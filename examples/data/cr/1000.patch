diff --git a/modules/activiti-camel/src/main/java/org/activiti/camel/ActivitiProducer.java b/modules/activiti-camel/src/main/java/org/activiti/camel/ActivitiProducer.java
index 3a389a7b5e1..654e8a6d406 100644
--- a/modules/activiti-camel/src/main/java/org/activiti/camel/ActivitiProducer.java
+++ b/modules/activiti-camel/src/main/java/org/activiti/camel/ActivitiProducer.java
@@ -84,9 +84,9 @@ protected void copyResultToCamel(Exchange exchange, ProcessInstance pi) {
       Map<String, Object> processVariables = null;
       if (repositoryService.isActiviti5ProcessDefinition(pi.getProcessDefinitionId())) {
         Activiti5CompatibilityHandler activiti5CompatibilityHandler = Activiti5Util.getActiviti5CompatibilityHandler();
-        processVariables = activiti5CompatibilityHandler.getVariableValues(pi);
+        processVariables = activiti5CompatibilityHandler.getVariables(pi);
       } else {
-        processVariables = ((ExecutionEntity) pi).getVariableValues();
+        processVariables = ((ExecutionEntity) pi).getVariables();
       }

       if (processVariables != null) {
diff --git a/modules/activiti-engine/src/main/java/org/activiti/engine/RuntimeService.java b/modules/activiti-engine/src/main/java/org/activiti/engine/RuntimeService.java
index f35f18b0a40..fc8afbbe118 100644
--- a/modules/activiti-engine/src/main/java/org/activiti/engine/RuntimeService.java
+++ b/modules/activiti-engine/src/main/java/org/activiti/engine/RuntimeService.java
@@ -43,7 +43,13 @@
  * @author Daniel Meyer
  */
 public interface RuntimeService {
-
+
+  /**
+   * Create a {@link ProcessInstanceBuilder}, that allows to set various options for starting a process instance,
+   * as an alternative to the various startProcessInstanceByXX methods.
+   */
+  ProcessInstanceBuilder createProcessInstanceBuilder();
+
   /**
    * Starts a new process instance in the latest version of the process definition with the given key.
    *
@@ -325,6 +331,13 @@ public interface RuntimeService {
    *           when no execution is found for the given executionId.
    */
   void trigger(String executionId, Map<String, Object> processVariables);
+
+
+  /**
+   * Similar to {@link #trigger(String, Map)}, but with an extra parameter that allows to pass
+   * transient variables.
+   */
+  void trigger(String executionId, Map<String, Object> processVariables, Map<String, Object> transientVariables);

   /**
    * Updates the business key for the provided process instance
@@ -1211,7 +1224,4 @@ public interface RuntimeService {
   /** The all events related to the given Process Instance. */
   List<Event> getProcessInstanceEvents(String processInstanceId);

-  /** Create a ProcessInstanceBuilder */
-  ProcessInstanceBuilder createProcessInstanceBuilder();
-
 }
\ No newline at end of file
diff --git a/modules/activiti-engine/src/main/java/org/activiti/engine/TaskService.java b/modules/activiti-engine/src/main/java/org/activiti/engine/TaskService.java
index 7186a247373..12a4eb645d3 100644
--- a/modules/activiti-engine/src/main/java/org/activiti/engine/TaskService.java
+++ b/modules/activiti-engine/src/main/java/org/activiti/engine/TaskService.java
@@ -210,6 +210,11 @@ public interface TaskService {
    *           When no task exists with the given id.
    */
   void resolveTask(String taskId, Map<String, Object> variables);
+
+  /**
+   * Similar to {@link #resolveTask(String, Map)}, but allows to set transient variables too.
+   */
+  void resolveTask(String taskId, Map<String, Object> variables, Map<String, Object> transientVariables);

   /**
    * Called when the task is successfully executed, and the required task parameters are given by the end-user.
@@ -222,6 +227,11 @@ public interface TaskService {
    *           when no task exists with the given id.
    */
   void complete(String taskId, Map<String, Object> variables);
+
+  /**
+   * Similar to {@link #complete(String, Map)}, but allows to set transient variables too.
+   */
+  void complete(String taskId, Map<String, Object> variables, Map<String, Object> transientVariables);

   /**
    * Called when the task is successfully executed, and the required task parameters are given by the end-user.
diff --git a/modules/activiti-engine/src/main/java/org/activiti/engine/compatibility/Activiti5CompatibilityHandler.java b/modules/activiti-engine/src/main/java/org/activiti/engine/compatibility/Activiti5CompatibilityHandler.java
index 4bacf836a56..0f0739d5208 100644
--- a/modules/activiti-engine/src/main/java/org/activiti/engine/compatibility/Activiti5CompatibilityHandler.java
+++ b/modules/activiti-engine/src/main/java/org/activiti/engine/compatibility/Activiti5CompatibilityHandler.java
@@ -173,7 +173,7 @@ public interface Activiti5CompatibilityHandler {

   boolean mapException(Exception camelException, DelegateExecution execution, List<MapExceptionEntry> mapExceptions);

-  Map<String, Object> getVariableValues(ProcessInstance processInstance);
+  Map<String, Object> getVariables(ProcessInstance processInstance);

   Object getScriptingEngineValue(String payloadExpressionValue, String languageValue, DelegateExecution execution);

diff --git a/modules/activiti-engine/src/main/java/org/activiti/engine/delegate/TransactionDependentExecutionListener.java b/modules/activiti-engine/src/main/java/org/activiti/engine/delegate/TransactionDependentExecutionListener.java
index 66e32a3c298..05fbc01394c 100644
--- a/modules/activiti-engine/src/main/java/org/activiti/engine/delegate/TransactionDependentExecutionListener.java
+++ b/modules/activiti-engine/src/main/java/org/activiti/engine/delegate/TransactionDependentExecutionListener.java
@@ -18,8 +18,6 @@
 import java.util.Map;

 /**
- * Callback interface to be notified of {@link org.activiti.engine.impl.interceptor.CommandContextCloseListener} events; closing, closed and closeFailure
- *
  * @author Yvo Swillens
  */
 public interface TransactionDependentExecutionListener extends BaseExecutionListener {
diff --git a/modules/activiti-engine/src/main/java/org/activiti/engine/delegate/VariableScope.java b/modules/activiti-engine/src/main/java/org/activiti/engine/delegate/VariableScope.java
index 153fcf802a8..5ed5a433b04 100644
--- a/modules/activiti-engine/src/main/java/org/activiti/engine/delegate/VariableScope.java
+++ b/modules/activiti-engine/src/main/java/org/activiti/engine/delegate/VariableScope.java
@@ -17,62 +17,174 @@
 import java.util.Map;
 import java.util.Set;

+import org.activiti.engine.history.HistoricVariableUpdate;
+import org.activiti.engine.impl.interceptor.Command;
 import org.activiti.engine.impl.persistence.entity.VariableInstance;

 /**
+ * Interface for class that acts as a scope for variables: i.e. the implementation
+ * can be used to set and get variables.
+ *
+ * Typically, executions (and thus process instances) and tasks are the primary use case
+ * to get and set variables. The {@link DelegateExecution} for example is often used
+ * in {@link JavaDelegate} implementation to get and set variables.
+ *
+ * Variables are typically stored on the 'highest parent'. For executions, this
+ * means that when called on an execution the variable will be stored on the process instance
+ * execution. Variables can be stored on the actual scope itself though, by calling the xxLocal methods.
+ *
  * @author Tom Baeyens
  * @author Joram Barrez
  */
 public interface VariableScope {

+  /**
+   * Returns all variables.
+   * This will include all variables of parent scopes too.
+   */
   Map<String, Object> getVariables();

+  /**
+   * Returns all variables, as instances of the {@link VariableInstance} interface,
+   * which gives more information than only the the value (type, execution id, etc.)
+   */
   Map<String, VariableInstance> getVariableInstances();

-  Map<String, Object> getVariableValues();
-
+  /**
+   * Similar to {@link #getVariables()}, but limited to only the variables with the provided names.
+   */
   Map<String, Object> getVariables(Collection<String> variableNames);

+  /**
+   * Similar to {@link #getVariableInstances()}, but limited to only the variables with the provided names.
+   */
   Map<String, VariableInstance> getVariableInstances(Collection<String> variableNames);

+  /**
+   * Similar to {@link #getVariables(Collection))}, but with a flag that indicates that all
+   * variables should be fetched when fetching the specific variables.
+   *
+   * If set to false, only the specific variables will be fetched.
+   * Dependening on the use case, this can be better for performance, as it avoids fetching and processing
+   * the other variables. However, if the other variables are needed further on, getting them in
+   * one go is probably better (and the variables are cached during one {@link Command} execution).
+   */
   Map<String, Object> getVariables(Collection<String> variableNames, boolean fetchAllVariables);

+  /**
+   * Similar to {@link #getVariables(Collection, boolean)} but returns the variables
+   * as instances of the {@link VariableInstance} interface,
+   * which gives more information than only the the value (type, execution id, etc.)
+   */
   Map<String, VariableInstance> getVariableInstances(Collection<String> variableNames, boolean fetchAllVariables);

+  /**
+   * Returns the variable local to this scope only.
+   * So, in contrary to {@link #getVariables()}, the variables from the parent scope won't be returned.
+   */
   Map<String, Object> getVariablesLocal();

+  /**
+   * Returns the variables local to this scope as instances of the {@link VariableInstance} interface,
+   * which provided additional information about the variable.
+   */
   Map<String, VariableInstance> getVariableInstancesLocal();

+  /**
+   * Similar to {@link #getVariables(Collection)}, but only for variables local to this scope.
+   */
   Map<String, Object> getVariablesLocal(Collection<String> variableNames);

+  /**
+   * Similar to {@link #getVariableInstances(Collection)}, but only for variables local to this scope.
+   */
   Map<String, VariableInstance> getVariableInstancesLocal(Collection<String> variableNames);

+  /**
+   * Similar to {@link #getVariables(Collection, boolean)}, but only for variables local to this scope.
+   */
   Map<String, Object> getVariablesLocal(Collection<String> variableNames, boolean fetchAllVariables);

+  /**
+   * Similar to {@link #getVariableInstances(Collection, boolean)}, but only for variables local to this scope.
+   */
   Map<String, VariableInstance> getVariableInstancesLocal(Collection<String> variableNames, boolean fetchAllVariables);

+  /**
+   * Returns the variable value for one specific variable.
+   * Will look in parent scopes when the variable does not exist on this particular scope.
+   */
   Object getVariable(String variableName);

+  /**
+   * Similar to {@link #getVariable(String)}, but returns a {@link VariableInstance} instance,
+   * which contains more information than just the value.
+   */
   VariableInstance getVariableInstance(String variableName);

+  /**
+   * Similar to {@link #getVariable(String)}, but has an extra flag that indicates whether or not
+   * all variables need to be fetched when getting one variable.
+   *
+   * By default true (for backwards compatibility reasons), which means that calling {@link #getVariable(String)}
+   * will fetch all variables, of the current scope and all parent scopes.
+   * Setting this flag to false can thus be better for performance. However, variables are cached, and
+   * if other variables are used later on, setting this true might actually be better for performance.
+   */
   Object getVariable(String variableName, boolean fetchAllVariables);

+  /**
+   * Similar to {@link #getVariable(String, boolean)}, but returns an instance of {@link VariableInstance},
+   * which has some additional information beyond the value.
+   */
   VariableInstance getVariableInstance(String variableName, boolean fetchAllVariables);

+  /**
+   * Returns the value for the specific variable and only checks this scope and not any parent scope.
+   */
   Object getVariableLocal(String variableName);

+  /**
+   * Similar to {@link #getVariableLocal(String)}, but returns an instance of {@link VariableInstance},
+   * which has some additional information beyond the value.
+   */
   VariableInstance getVariableInstanceLocal(String variableName);

+  /**
+   * Similar to {@link #getVariableLocal(String)}, but has an extra flag that indicates whether or not
+   * all variables need to be fetched when getting one variable.
+   *
+   * By default true (for backwards compatibility reasons), which means that calling {@link #getVariableLocal(String)}
+   * will fetch all variables, of the current scope.
+   * Setting this flag to false can thus be better for performance. However, variables are cached, and
+   * if other variables are used later on, setting this true might actually be better for performance.
+   */
   Object getVariableLocal(String variableName, boolean fetchAllVariables);

+  /**
+   * Similar to {@link #getVariableLocal(String, boolean)}, but returns an instance of {@link VariableInstance},
+   * which has some additional information beyond the value.
+   */
   VariableInstance getVariableInstanceLocal(String variableName, boolean fetchAllVariables);

+  /**
+   * Typed version of the {@link #getVariable(String)} method.
+   */
   <T> T getVariable(String variableName, Class<T> variableClass);

+  /**
+   * Typed version of the {@link #getVariableLocal(String)} method.
+   */
   <T> T getVariableLocal(String variableName, Class<T> variableClass);

+  /**
+   * Returns all the names of the variables for this scope and all parent scopes.
+   */
   Set<String> getVariableNames();

+  /**
+   * Returns all the names of the variables for this scope (no parent scopes).
+   */
   Set<String> getVariableNamesLocal();

   /**
@@ -104,73 +216,174 @@ public interface VariableScope {
    */
   void setVariable(String variableName, Object value);

+  /**
+   * Similar to {@link #setVariable(String, Object)}, but with an extra flag to indicate whether
+   * all variables should be fetched while doing this or not.
+   *
+   * The variable will be put on the highest possible scope. For an execution this is the process instance execution.
+   * If this is not wanted, use the {@link #setVariableLocal(String, Object)} method instead.
+   *
+   * The default (e.g. when calling {@link #setVariable(String, Object)}), is <i>true</i>, for backwards
+   * compatibility reasons. However, in some use cases, it might make sense not to fetch any other variables
+   * when setting one variable (for example when doing nothing more than just setting one variable).
+   */
   void setVariable(String variableName, Object value, boolean fetchAllVariables);

+  /**
+   * Similar to {@link #setVariable(String, Object)}, but the variable is set to this scope specifically.
+   */
   Object setVariableLocal(String variableName, Object value);

+  /**
+   * Similar to {@link #setVariableLocal(String, Object, boolean)}, but the variable is set to this scope specifically.
+   */
   Object setVariableLocal(String variableName, Object value, boolean fetchAllVariables);

   /**
    * Sets the provided variables to the variable scope.
    *
    * <p>
-   * Variables are set according algorithm for
-   * {@link #setVariable(String, Object)}, applied separately to each variable.
-   *
-   * @see #setVariable(String, Object)
-   *      {@link VariableScope#setVariable(String, Object)}
+   * Variables are set according algorithm for {@link #setVariable(String, Object)}, applied separately to each variable.
    *
    * @param variables
    *          a map of keys and values for the variables to be set
    */
   void setVariables(Map<String, ? extends Object> variables);

+  /**
+   * Similar to {@link #setVariables(Map)}, but the variable are set on this scope specifically.
+   */
   void setVariablesLocal(Map<String, ? extends Object> variables);

+  /**
+   * Returns whether this scope or any parent scope has variables.
+   */
   boolean hasVariables();

+  /**
+   * Returns whether this scope has variables.
+   */
   boolean hasVariablesLocal();

+  /**
+   * Returns whether this scope or any parent scope has a specific variable.
+   */
   boolean hasVariable(String variableName);

+  /**
+   * Returns whether this scope has a specific variable.
+   */
   boolean hasVariableLocal(String variableName);

-  void createVariableLocal(String variableName, Object value);
-
   /**
-   * Removes the variable and creates a new {@link HistoricVariableUpdateEntity}
-   * .
+   * Removes the variable and creates a new;@link HistoricVariableUpdateEntity}
    */
   void removeVariable(String variableName);

   /**
-   * Removes the local variable and creates a new
-   * {@link HistoricVariableUpdateEntity}.
+   * Removes the local variable and creates a new {@link HistoricVariableUpdate}.
    */
   void removeVariableLocal(String variableName);

   /**
    * Removes the variables and creates a new
-   * {@link HistoricVariableUpdateEntity} for each of them.
+   * {@link HistoricVariableUpdate} for each of them.
    */
   void removeVariables(Collection<String> variableNames);

   /**
    * Removes the local variables and creates a new
-   * {@link HistoricVariableUpdateEntity} for each of them.
+   * {@link HistoricVariableUpdate} for each of them.
    */
   void removeVariablesLocal(Collection<String> variableNames);

   /**
    * Removes the (local) variables and creates a new
-   * {@link HistoricVariableUpdateEntity} for each of them.
+   * {@link HistoricVariableUpdate} for each of them.
    */
   void removeVariables();

   /**
    * Removes the (local) variables and creates a new
-   * {@link HistoricVariableUpdateEntity} for each of them.
+   * {@link HistoricVariableUpdate} for each of them.
    */
   void removeVariablesLocal();
+
+  /**
+   * Similar to {@link #setVariable(String, Object)}, but the variable is transient:
+   *
+   * - no history is kept for the variable
+   * - the variable is only available until a waitstate is reached in the process
+   * - transient variables 'shadow' persistent variable (when getVariable('abc')
+   *   where 'abc' is both persistent and transient, the transient value is returned.
+   */
+  void setTransientVariable(String variableName, Object variableValue);
+
+  /**
+   * Similar to {@link #setVariableLocal(String, Object)}, but for a transient variable.
+   * See {@link #setTransientVariable(String, Object)} for the rules on 'transient' variables.
+   */
+  void setTransientVariableLocal(String variableName, Object variableValue);
+
+  /**
+   * Similar to {@link #setVariables(Map)}, but for transient variables.
+   * See {@link #setTransientVariable(String, Object)} for the rules on 'transient' variables.
+   */
+  void setTransientVariables(Map<String, Object> transientVariables);

+  /**
+   * Similar to {@link #getVariable(String)}, including the searching via the parent scopes, but
+   * for transient variables only.
+   * See {@link #setTransientVariable(String, Object)} for the rules on 'transient' variables.
+   */
+  Object getTransientVariable(String variableName);
+
+  /**
+   * Similar to {@link #getVariables()}, but for transient variables only.
+   * See {@link #setTransientVariable(String, Object)} for the rules on 'transient' variables.
+   */
+  Map<String, Object> getTransientVariables();
+
+  /**
+   * Similar to {@link #setVariablesLocal(Map)}, but for transient variables.
+   * See {@link #setTransientVariable(String, Object)} for the rules on 'transient' variables.
+   */
+  void setTransientVariablesLocal(Map<String, Object> transientVariables);
+
+  /**
+   * Similar to {@link #getVariableLocal(String)}, but for a transient variable.
+   * See {@link #setTransientVariable(String, Object)} for the rules on 'transient' variables.
+   */
+  Object getTransientVariableLocal(String variableName);
+
+  /**
+   * Similar to {@link #getVariableLocal(String)}, but for transient variables only.
+   * See {@link #setTransientVariable(String, Object)} for the rules on 'transient' variables.
+   */
+  Map<String, Object> getTransientVariablesLocal();
+
+  /**
+   * Removes a specific transient variable (also searching parent scopes).
+   * See {@link #setTransientVariable(String, Object)} for the rules on 'transient' variables.
+   */
+  void removeTransientVariableLocal(String variableName);
+
+  /**
+   * Removes a specific transient variable.
+   * See {@link #setTransientVariable(String, Object)} for the rules on 'transient' variables.
+   */
+  void removeTransientVariable(String variableName);
+
+  /**
+   * Remove all transient variable of this scope and its parent scopes.
+   * See {@link #setTransientVariable(String, Object)} for the rules on 'transient' variables.
+   */
+  void removeTransientVariables();
+
+  /**
+   * Removes all local transient variables.
+   * See {@link #setTransientVariable(String, Object)} for the rules on 'transient' variables.
+   */
+  void removeTransientVariablesLocal();
+
 }
\ No newline at end of file
diff --git a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/RuntimeServiceImpl.java b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/RuntimeServiceImpl.java
index f20c5ed7c41..c0715d5341e 100644
--- a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/RuntimeServiceImpl.java
+++ b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/RuntimeServiceImpl.java
@@ -336,6 +336,10 @@ public void signal(String executionId, Map<String, Object> processVariables) {
   public void trigger(String executionId, Map<String, Object> processVariables) {
     commandExecutor.execute(new TriggerCmd(executionId, processVariables));
   }
+
+  public void trigger(String executionId, Map<String, Object> processVariables, Map<String, Object> transientVariables) {
+    commandExecutor.execute(new TriggerCmd(executionId, processVariables, transientVariables));
+  }

   public void addUserIdentityLink(String processInstanceId, String userId, String identityLinkType) {
     commandExecutor.execute(new AddIdentityLinkForProcessInstanceCmd(processInstanceId, userId, null, identityLinkType));
@@ -525,6 +529,13 @@ public ProcessInstanceBuilder createProcessInstanceBuilder() {
   }

   public ProcessInstance startProcessInstance(ProcessInstanceBuilderImpl processInstanceBuilder) {
-    return commandExecutor.execute(new StartProcessInstanceCmd<ProcessInstance>(processInstanceBuilder));
+    if (processInstanceBuilder.getProcessDefinitionId() != null || processInstanceBuilder.getProcessDefinitionKey() != null) {
+      return commandExecutor.execute(new StartProcessInstanceCmd<ProcessInstance>(processInstanceBuilder));
+    } else if (processInstanceBuilder.getMessageName() != null) {
+      return commandExecutor.execute(new StartProcessInstanceByMessageCmd(processInstanceBuilder));
+    } else {
+      throw new ActivitiIllegalArgumentException("No processDefinitionId, processDefinitionKey nor messageName provided");
+    }
+
   }
 }
diff --git a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/TaskServiceImpl.java b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/TaskServiceImpl.java
index 19b9c468a93..85a68aa9f2a 100644
--- a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/TaskServiceImpl.java
+++ b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/TaskServiceImpl.java
@@ -185,6 +185,11 @@ public void complete(String taskId) {
   public void complete(String taskId, Map<String, Object> variables) {
     commandExecutor.execute(new CompleteTaskCmd(taskId, variables));
   }
+
+  @Override
+  public void complete(String taskId, Map<String, Object> variables, Map<String, Object> transientVariables) {
+    commandExecutor.execute(new CompleteTaskCmd(taskId, variables, transientVariables));
+  }

   public void complete(String taskId, Map<String, Object> variables, boolean localScope) {
     commandExecutor.execute(new CompleteTaskCmd(taskId, variables, localScope));
@@ -201,6 +206,11 @@ public void resolveTask(String taskId) {
   public void resolveTask(String taskId, Map<String, Object> variables) {
     commandExecutor.execute(new ResolveTaskCmd(taskId, variables));
   }
+
+  @Override
+  public void resolveTask(String taskId, Map<String, Object> variables, Map<String, Object> transientVariables) {
+    commandExecutor.execute(new ResolveTaskCmd(taskId, variables, transientVariables));
+  }

   public void setPriority(String taskId, int priority) {
     commandExecutor.execute(new SetTaskPriorityCmd(taskId, priority));
diff --git a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/CompleteTaskCmd.java b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/CompleteTaskCmd.java
index ed4c8c02033..eb9afeb63e8 100644
--- a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/CompleteTaskCmd.java
+++ b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/CompleteTaskCmd.java
@@ -26,6 +26,7 @@ public class CompleteTaskCmd extends AbstractCompleteTaskCmd {

   private static final long serialVersionUID = 1L;
   protected Map<String, Object> variables;
+  protected Map<String, Object> transientVariables;
   protected boolean localScope;

   public CompleteTaskCmd(String taskId, Map<String, Object> variables) {
@@ -34,10 +35,14 @@ public CompleteTaskCmd(String taskId, Map<String, Object> variables) {
   }

   public CompleteTaskCmd(String taskId, Map<String, Object> variables, boolean localScope) {
-    super(taskId);
-    this.variables = variables;
+    this(taskId, variables);
     this.localScope = localScope;
   }
+
+  public CompleteTaskCmd(String taskId, Map<String, Object> variables, Map<String, Object> transientVariables) {
+    this(taskId, variables);
+    this.transientVariables = transientVariables;
+  }

   protected Void execute(CommandContext commandContext, TaskEntity task) {
     // Backwards compatibility
@@ -58,6 +63,14 @@ protected Void execute(CommandContext commandContext, TaskEntity task) {
     		task.setVariables(variables);
     	}
     }
+
+    if (transientVariables != null) {
+      if (localScope) {
+        task.setTransientVariablesLocal(transientVariables);
+      } else {
+        task.setTransientVariables(transientVariables);
+      }
+    }

     executeTaskComplete(commandContext, task, variables, localScope);
     return null;
diff --git a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/ResolveTaskCmd.java b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/ResolveTaskCmd.java
index b025016525b..31fb8a42633 100644
--- a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/ResolveTaskCmd.java
+++ b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/ResolveTaskCmd.java
@@ -28,16 +28,25 @@ public class ResolveTaskCmd extends NeedsActiveTaskCmd<Void> {
   private static final long serialVersionUID = 1L;

   protected Map<String, Object> variables;
+  protected Map<String, Object> transientVariables;

   public ResolveTaskCmd(String taskId, Map<String, Object> variables) {
     super(taskId);
     this.variables = variables;
   }
+
+  public ResolveTaskCmd(String taskId, Map<String, Object> variables, Map<String, Object> transientVariables) {
+    this(taskId, variables);
+    this.transientVariables = transientVariables;
+  }

   protected Void execute(CommandContext commandContext, TaskEntity task) {
     if (variables != null) {
       task.setVariables(variables);
     }
+    if (transientVariables != null) {
+      task.setTransientVariables(transientVariables);
+    }

     task.setDelegationState(DelegationState.RESOLVED);
     commandContext.getTaskEntityManager().changeTaskAssignee(task, task.getOwner());
diff --git a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/StartProcessInstanceByMessageCmd.java b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/StartProcessInstanceByMessageCmd.java
index 6b592485744..13602fde4b3 100644
--- a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/StartProcessInstanceByMessageCmd.java
+++ b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/StartProcessInstanceByMessageCmd.java
@@ -22,6 +22,7 @@
 import org.activiti.engine.impl.interceptor.CommandContext;
 import org.activiti.engine.impl.persistence.deploy.DeploymentManager;
 import org.activiti.engine.impl.persistence.entity.MessageEventSubscriptionEntity;
+import org.activiti.engine.impl.runtime.ProcessInstanceBuilderImpl;
 import org.activiti.engine.impl.util.ProcessInstanceHelper;
 import org.activiti.engine.repository.ProcessDefinition;
 import org.activiti.engine.runtime.ProcessInstance;
@@ -32,10 +33,11 @@
  */
 public class StartProcessInstanceByMessageCmd implements Command<ProcessInstance> {

-  protected final String messageName;
-  protected final String businessKey;
-  protected final Map<String, Object> processVariables;
-  protected final String tenantId;
+  protected String messageName;
+  protected String businessKey;
+  protected Map<String, Object> processVariables;
+  protected Map<String, Object> transientVariables;
+  protected String tenantId;

   public StartProcessInstanceByMessageCmd(String messageName, String businessKey, Map<String, Object> processVariables, String tenantId) {
     this.messageName = messageName;
@@ -43,6 +45,14 @@ public StartProcessInstanceByMessageCmd(String messageName, String businessKey,
     this.processVariables = processVariables;
     this.tenantId = tenantId;
   }
+
+  public StartProcessInstanceByMessageCmd(ProcessInstanceBuilderImpl processInstanceBuilder) {
+    this.messageName = processInstanceBuilder.getMessageName();
+    this.businessKey = processInstanceBuilder.getBusinessKey();
+    this.processVariables = processInstanceBuilder.getVariables();
+    this.transientVariables = processInstanceBuilder.getTransientVariables();
+    this.tenantId = processInstanceBuilder.getTenantId();
+  }

   public ProcessInstance execute(CommandContext commandContext) {

@@ -69,7 +79,7 @@ public ProcessInstance execute(CommandContext commandContext) {
     }

     ProcessInstanceHelper processInstanceHelper = commandContext.getProcessEngineConfiguration().getProcessInstanceHelper();
-    ProcessInstance processInstance = processInstanceHelper.createAndStartProcessInstanceByMessage(processDefinition, messageName, processVariables);
+    ProcessInstance processInstance = processInstanceHelper.createAndStartProcessInstanceByMessage(processDefinition, messageName, processVariables, transientVariables);

     return processInstance;
   }
diff --git a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/StartProcessInstanceCmd.java b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/StartProcessInstanceCmd.java
index b780f336c45..59d9d63a4ae 100644
--- a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/StartProcessInstanceCmd.java
+++ b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/StartProcessInstanceCmd.java
@@ -40,6 +40,7 @@ public class StartProcessInstanceCmd<T> implements Command<ProcessInstance>, Ser
   protected String processDefinitionKey;
   protected String processDefinitionId;
   protected Map<String, Object> variables;
+  protected Map<String, Object> transientVariables;
   protected String businessKey;
   protected String tenantId;
   protected String processInstanceName;
@@ -58,9 +59,13 @@ public StartProcessInstanceCmd(String processDefinitionKey, String processDefini
   }

   public StartProcessInstanceCmd(ProcessInstanceBuilderImpl processInstanceBuilder) {
-    this(processInstanceBuilder.getProcessDefinitionKey(), processInstanceBuilder.getProcessDefinitionId(),
-        processInstanceBuilder.getBusinessKey(), processInstanceBuilder.getVariables(), processInstanceBuilder.getTenantId());
+    this(processInstanceBuilder.getProcessDefinitionKey(),
+        processInstanceBuilder.getProcessDefinitionId(),
+        processInstanceBuilder.getBusinessKey(),
+        processInstanceBuilder.getVariables(),
+        processInstanceBuilder.getTenantId());
     this.processInstanceName = processInstanceBuilder.getProcessInstanceName();
+    this.transientVariables = processInstanceBuilder.getTransientVariables();
   }

   public ProcessInstance execute(CommandContext commandContext) {
@@ -94,13 +99,14 @@ public ProcessInstance execute(CommandContext commandContext) {
     }

     processInstanceHelper = commandContext.getProcessEngineConfiguration().getProcessInstanceHelper();
-    ProcessInstance processInstance = createAndStartProcessInstance(processDefinition, businessKey, processInstanceName, variables);
+    ProcessInstance processInstance = createAndStartProcessInstance(processDefinition, businessKey, processInstanceName, variables, transientVariables);

     return processInstance;
   }

-  protected ProcessInstance createAndStartProcessInstance(ProcessDefinition processDefinition, String businessKey, String processInstanceName, Map<String,Object> variables) {
-    return processInstanceHelper.createAndStartProcessInstance(processDefinition, businessKey, processInstanceName, variables);
+  protected ProcessInstance createAndStartProcessInstance(ProcessDefinition processDefinition, String businessKey, String processInstanceName,
+      Map<String,Object> variables, Map<String, Object> transientVariables) {
+    return processInstanceHelper.createAndStartProcessInstance(processDefinition, businessKey, processInstanceName, variables, transientVariables);
   }

   protected Map<String, Object> processDataObjects(Collection<ValuedDataObject> dataObjects) {
diff --git a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SubmitStartFormCmd.java b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SubmitStartFormCmd.java
index ba1f2a350c2..0b5049111f4 100644
--- a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SubmitStartFormCmd.java
+++ b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/SubmitStartFormCmd.java
@@ -54,9 +54,9 @@ protected ProcessInstance execute(CommandContext commandContext, ProcessDefiniti

     // TODO: backwards compatibility? Only create the process instance and not start it? How?
     if (businessKey != null) {
-      processInstance = (ExecutionEntity) processInstanceHelper.createProcessInstance(processDefinition, businessKey, null, null);
+      processInstance = (ExecutionEntity) processInstanceHelper.createProcessInstance(processDefinition, businessKey, null, null, null);
     } else {
-      processInstance = (ExecutionEntity) processInstanceHelper.createProcessInstance(processDefinition, null, null, null);
+      processInstance = (ExecutionEntity) processInstanceHelper.createProcessInstance(processDefinition, null, null, null, null);
     }

     commandContext.getHistoryManager().recordFormPropertiesSubmitted(processInstance.getExecutions().get(0), properties, null);
diff --git a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/TriggerCmd.java b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/TriggerCmd.java
index 1b4c7b3f1bc..ffdb9d4f242 100755
--- a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/TriggerCmd.java
+++ b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/cmd/TriggerCmd.java
@@ -31,12 +31,18 @@ public class TriggerCmd extends NeedsActiveExecutionCmd<Object> {

   private static final long serialVersionUID = 1L;

-  protected final Map<String, Object> processVariables;
+  protected Map<String, Object> processVariables;
+  protected Map<String, Object> transientVariables;

   public TriggerCmd(String executionId, Map<String, Object> processVariables) {
     super(executionId);
     this.processVariables = processVariables;
   }
+
+  public TriggerCmd(String executionId, Map<String, Object> processVariables, Map<String, Object> transientVariables) {
+    this(executionId, processVariables);
+    this.transientVariables = transientVariables;
+  }

   protected Object execute(CommandContext commandContext, ExecutionEntity execution) {
     if (Activiti5Util.isActiviti5ProcessDefinitionId(commandContext, execution.getProcessDefinitionId())) {
@@ -49,6 +55,10 @@ protected Object execute(CommandContext commandContext, ExecutionEntity executio
       execution.setVariables(processVariables);
     }

+    if (transientVariables != null) {
+      execution.setTransientVariables(transientVariables);
+    }
+
     Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(
         ActivitiEventBuilder.createSignalEvent(ActivitiEventType.ACTIVITY_SIGNALED, execution.getCurrentActivityId(), null,
             null, execution.getId(), execution.getProcessInstanceId(), execution.getProcessDefinitionId()));
diff --git a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/el/NoExecutionVariableScope.java b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/el/NoExecutionVariableScope.java
index 04867ca17e7..dd88de52ff0 100644
--- a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/el/NoExecutionVariableScope.java
+++ b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/el/NoExecutionVariableScope.java
@@ -44,11 +44,6 @@ public Map<String, Object> getVariables() {
     return Collections.EMPTY_MAP;
   }

-  @Override
-  public Map<String, Object> getVariableValues() {
-    return Collections.EMPTY_MAP;
-  }
-
   @SuppressWarnings("unchecked")
   public Map<String, Object> getVariablesLocal() {
     return Collections.EMPTY_MAP;
@@ -238,4 +233,52 @@ public void removeVariables(Collection<String> variableNames) {
   public void removeVariablesLocal(Collection<String> variableNames) {
     throw new UnsupportedOperationException("No execution active, no variables can be removed");
   }
+
+  public void setTransientVariablesLocal(Map<String, Object> transientVariables) {
+    throw new UnsupportedOperationException("No execution active, no variables can be set");
+  }
+
+  public void setTransientVariableLocal(String variableName, Object variableValue) {
+    throw new UnsupportedOperationException("No execution active, no variables can be set");
+  }
+
+  public void setTransientVariables(Map<String, Object> transientVariables) {
+    throw new UnsupportedOperationException("No execution active, no variables can be set");
+  }
+
+  public void setTransientVariable(String variableName, Object variableValue) {
+    throw new UnsupportedOperationException("No execution active, no variables can be set");
+  }
+
+  public Object getTransientVariableLocal(String variableName) {
+    return null;
+  }
+
+  public Map<String, Object> getTransientVariablesLocal() {
+    return null;
+  }
+
+  public Object getTransientVariable(String variableName) {
+    return null;
+  }
+
+  public Map<String, Object> getTransientVariables() {
+    return null;
+  }
+
+  public void removeTransientVariableLocal(String variableName) {
+    throw new UnsupportedOperationException("No execution active, no variables can be removed");
+  }
+
+  public void removeTransientVariablesLocal() {
+    throw new UnsupportedOperationException("No execution active, no variables can be removed");
+  }
+
+  public void removeTransientVariable(String variableName) {
+    throw new UnsupportedOperationException("No execution active, no variables can be removed");
+  }
+
+  public void removeTransientVariables() {
+    throw new UnsupportedOperationException("No execution active, no variables can be removed");
+  }
 }
diff --git a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/SignalEventHandler.java b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/SignalEventHandler.java
index 019cb689d5b..792a142f99a 100644
--- a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/SignalEventHandler.java
+++ b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/event/SignalEventHandler.java
@@ -59,7 +59,7 @@ public void handleEvent(EventSubscriptionEntity eventSubscription, Object payloa
         variables = (Map<String, Object>) payload;
       }
       ProcessInstanceHelper processInstanceHelper = commandContext.getProcessEngineConfiguration().getProcessInstanceHelper();
-      processInstanceHelper.createAndStartProcessInstanceWithInitialFlowElement(processDefinition, null, null, flowElement, process, variables, true);
+      processInstanceHelper.createAndStartProcessInstanceWithInitialFlowElement(processDefinition, null, null, flowElement, process, variables, null, true);

     } else {
       throw new ActivitiException("Invalid signal handling: no execution nor process definition set");
diff --git a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerStartEventJobHandler.java b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerStartEventJobHandler.java
index 4b8dc217001..84259f26dd7 100755
--- a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerStartEventJobHandler.java
+++ b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerStartEventJobHandler.java
@@ -60,7 +60,7 @@ public void execute(JobEntity job, String configuration, ExecutionEntity executi
             throw new ActivitiException("Could not find matching FlowElement for activityId " + activityId);
           }
           ProcessInstanceHelper processInstanceHelper = commandContext.getProcessEngineConfiguration().getProcessInstanceHelper();
-          processInstanceHelper.createAndStartProcessInstanceWithInitialFlowElement(processDefinitionEntity, null, null, flowElement, process, null, true);
+          processInstanceHelper.createAndStartProcessInstanceWithInitialFlowElement(processDefinitionEntity, null, null, flowElement, process, null, null, true);
         } else {
           new StartProcessInstanceCmd(processDefinitionEntity.getKey(), null, null, null, job.getTenantId()).execute(commandContext);
         }
diff --git a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TransientVariableInstance.java b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TransientVariableInstance.java
new file mode 100644
index 00000000000..bff253f6ae0
--- /dev/null
+++ b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/TransientVariableInstance.java
@@ -0,0 +1,218 @@
+/* Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.activiti.engine.impl.persistence.entity;
+
+import org.activiti.engine.delegate.VariableScope;
+
+/**
+ * A dummy implementation of {@link VariableInstance}, used for storing transient variables
+ * on a {@link VariableScope}, as the {@link VariableScope} works with instances of {@link VariableInstance}
+ * and not with raw key/values.
+ *
+ * Nothing more than a thin wrapper around a name and value. All the other methods are not implemented.
+ *
+ * @author Joram Barrez
+ */
+public class TransientVariableInstance implements VariableInstance {
+
+  public static String TYPE_TRANSIENT = "transient";
+
+  protected String variableName;
+  protected Object variableValue;
+
+  public TransientVariableInstance(String variableName, Object variableValue) {
+    this.variableName = variableName;
+    this.variableValue = variableValue;
+  }
+
+  @Override
+  public String getName() {
+    return variableName;
+  }
+
+  @Override
+  public String getTextValue() {
+    return null;
+  }
+
+  @Override
+  public void setTextValue(String textValue) {
+
+  }
+
+  @Override
+  public String getTextValue2() {
+    return null;
+  }
+
+  @Override
+  public void setTextValue2(String textValue2) {
+
+  }
+
+  @Override
+  public Long getLongValue() {
+    return null;
+  }
+
+  @Override
+  public void setLongValue(Long longValue) {
+
+  }
+
+  @Override
+  public Double getDoubleValue() {
+    return null;
+  }
+
+  @Override
+  public void setDoubleValue(Double doubleValue) {
+
+  }
+
+  @Override
+  public byte[] getBytes() {
+    return null;
+  }
+
+  @Override
+  public void setBytes(byte[] bytes) {
+
+  }
+
+  @Override
+  public Object getCachedValue() {
+    return null;
+  }
+
+  @Override
+  public void setCachedValue(Object cachedValue) {
+
+  }
+
+  @Override
+  public String getId() {
+    return null;
+  }
+
+  @Override
+  public void setId(String id) {
+
+  }
+
+  @Override
+  public boolean isInserted() {
+    return false;
+  }
+
+  @Override
+  public void setInserted(boolean inserted) {
+
+  }
+
+  @Override
+  public boolean isUpdated() {
+    return false;
+  }
+
+  @Override
+  public void setUpdated(boolean updated) {
+
+  }
+
+  @Override
+  public boolean isDeleted() {
+    return false;
+  }
+
+  @Override
+  public void setDeleted(boolean deleted) {
+
+  }
+
+  @Override
+  public Object getPersistentState() {
+    return null;
+  }
+
+  @Override
+  public void setRevision(int revision) {
+
+  }
+
+  @Override
+  public int getRevision() {
+    return 0;
+  }
+
+  @Override
+  public int getRevisionNext() {
+    return 0;
+  }
+
+  @Override
+  public void setName(String name) {
+
+  }
+
+  @Override
+  public void setProcessInstanceId(String processInstanceId) {
+
+  }
+
+  @Override
+  public void setExecutionId(String executionId) {
+
+  }
+
+  @Override
+  public Object getValue() {
+    return variableValue;
+  }
+
+  @Override
+  public void setValue(Object value) {
+    variableValue = value;
+  }
+
+  @Override
+  public String getTypeName() {
+    return TYPE_TRANSIENT;
+  }
+
+  @Override
+  public void setTypeName(String typeName) {
+
+  }
+
+  @Override
+  public String getProcessInstanceId() {
+    return null;
+  }
+
+  @Override
+  public String getTaskId() {
+    return null;
+  }
+
+  @Override
+  public void setTaskId(String taskId) {
+
+  }
+
+  @Override
+  public String getExecutionId() {
+    return null;
+  }
+
+}
diff --git a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/VariableScopeImpl.java b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/VariableScopeImpl.java
index 775fd659b53..291fb1ae2e7 100644
--- a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/VariableScopeImpl.java
+++ b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/persistence/entity/VariableScopeImpl.java
@@ -47,6 +47,8 @@ public abstract class VariableScopeImpl extends AbstractEntity implements Serial
   // The cache is used when fetching/setting specific variables
   protected Map<String, VariableInstanceEntity> usedVariablesCache = new HashMap<String, VariableInstanceEntity>();

+  protected Map<String, VariableInstance> transientVariabes;
+
   protected ELContext cachedElContext;

   protected abstract Collection<VariableInstanceEntity> loadVariableInstances();
@@ -73,7 +75,7 @@ protected void ensureVariableInstancesInitialized() {
   public Map<String, Object> getVariables() {
     return collectVariables(new HashMap<String, Object>());
   }
-
+
   public Map<String, VariableInstance> getVariableInstances() {
     return collectVariableInstances(new HashMap<String, VariableInstance>());
   }
@@ -81,7 +83,7 @@ public Map<String, VariableInstance> getVariableInstances() {
   public Map<String, Object> getVariables(Collection<String> variableNames) {
     return getVariables(variableNames, true);
   }
-
+
   public Map<String, VariableInstance> getVariableInstances(Collection<String> variableNames) {
     return getVariableInstances(variableNames, true);
   }
@@ -90,11 +92,15 @@ public Map<String, Object> getVariables(Collection<String> variableNames, boolea

     Map<String, Object> requestedVariables = new HashMap<String, Object>();
     Set<String> variableNamesToFetch = new HashSet<String>(variableNames);
+

-    // The values in the fetch-cache will be more recent, so they can
-    // override any existing ones
+    // Transient variables 'shadow' any existing variables.
+    // The values in the fetch-cache will be more recent, so they can override any existing ones
     for (String variableName : variableNames) {
-      if (usedVariablesCache.containsKey(variableName)) {
+      if (transientVariabes != null && transientVariabes.containsKey(variableName)) {
+        requestedVariables.put(variableName, transientVariabes.get(variableName).getValue());
+        variableNamesToFetch.remove(variableName);
+      } else if (usedVariablesCache.containsKey(variableName)) {
         requestedVariables.put(variableName, usedVariablesCache.get(variableName).getValue());
         variableNamesToFetch.remove(variableName);
       }
@@ -103,8 +109,7 @@ public Map<String, Object> getVariables(Collection<String> variableNames, boolea
     if (fetchAllVariables == true) {

       // getVariables() will go up the execution hierarchy, no need to do
-      // it here
-      // also, the cached values will already be applied too
+      // it here also, the cached values will already be applied too
       Map<String, Object> allVariables = getVariables();
       for (String variableName : variableNamesToFetch) {
         requestedVariables.put(variableName, allVariables.get(variableName));
@@ -136,10 +141,12 @@ public Map<String, VariableInstance> getVariableInstances(Collection<String> var
     Map<String, VariableInstance> requestedVariables = new HashMap<String, VariableInstance>();
     Set<String> variableNamesToFetch = new HashSet<String>(variableNames);

-    // The values in the fetch-cache will be more recent, so they can
-    // override any existing ones
+    // The values in the fetch-cache will be more recent, so they can override any existing ones
     for (String variableName : variableNames) {
-      if (usedVariablesCache.containsKey(variableName)) {
+      if (transientVariabes != null && transientVariabes.containsKey(variableName)) {
+        requestedVariables.put(variableName, transientVariabes.get(variableName));
+        variableNamesToFetch.remove(variableName);
+      } else if (usedVariablesCache.containsKey(variableName)) {
         requestedVariables.put(variableName, usedVariablesCache.get(variableName));
         variableNamesToFetch.remove(variableName);
       }
@@ -189,6 +196,12 @@ protected Map<String, Object> collectVariables(HashMap<String, Object> variables
     for (String variableName : usedVariablesCache.keySet()) {
       variables.put(variableName, usedVariablesCache.get(variableName).getValue());
     }
+
+    if (transientVariabes != null) {
+      for (String variableName : transientVariabes.keySet()) {
+        variables.put(variableName, transientVariabes.get(variableName).getValue());
+      }
+    }

     return variables;
   }
@@ -207,6 +220,10 @@ protected Map<String, VariableInstance> collectVariableInstances(HashMap<String,
     for (String variableName : usedVariablesCache.keySet()) {
       variables.put(variableName, usedVariablesCache.get(variableName));
     }
+
+    if (transientVariabes != null) {
+      variables.putAll(variables);
+    }

     return variables;
   }
@@ -214,16 +231,19 @@ protected Map<String, VariableInstance> collectVariableInstances(HashMap<String,
   public Object getVariable(String variableName) {
     return getVariable(variableName, true);
   }
-
+
   public VariableInstance getVariableInstance(String variableName) {
     return getVariableInstance(variableName, true);
   }

   /**
-   * The same operation as {@link VariableScopeImpl#getVariable(String)}, but with an extra parameter to indicate whether or not all variables need to be fetched.
+   * The same operation as {@link VariableScopeImpl#getVariable(String)},
+   * but with an extra parameter to indicate whether or not all variables need to be fetched.
    *
-   * Note that the default Activiti way (because of backwards compatibility) is to fetch all the variables when doing a get/set of variables. So this means 'true' is the default value for this method,
-   * and in fact it will simply delegate to {@link #getVariable(String)}. This can also be the most performant, if you're doing a lot of variable gets in the same transaction (eg in service tasks).
+   * Note that the default Activiti way (because of backwards compatibility) is to fetch all the variables
+   * when doing a get/set of variables. So this means 'true' is the default value for this method,
+   * and in fact it will simply delegate to {@link #getVariable(String)}.
+   * This can also be the most performant, if you're doing a lot of variable gets in the same transaction (eg in service tasks).
    *
    * In case 'false' is used, only the specific variable will be fetched.
    */
@@ -235,15 +255,20 @@ public Object getVariable(String variableName, boolean fetchAllVariables) {
     }
     return value;
   }
-
-  public VariableInstance getVariableInstance(String variableName, boolean fetchAllVariables) {
-    if (fetchAllVariables == true) {

-      // Check the local single-fetch cache
-      if (usedVariablesCache.containsKey(variableName)) {
-        return usedVariablesCache.get(variableName);
-      }
+  public VariableInstance getVariableInstance(String variableName, boolean fetchAllVariables) {
+
+    // Transient variable
+    if (transientVariabes != null && transientVariabes.containsKey(variableName)) {
+      return transientVariabes.get(variableName);
+    }

+    // Check the local single-fetch cache
+    if (usedVariablesCache.containsKey(variableName)) {
+      return usedVariablesCache.get(variableName);
+    }
+
+    if (fetchAllVariables == true) {
       ensureVariableInstancesInitialized();
       VariableInstanceEntity variableInstance = variableInstances.get(variableName);
       if (variableInstance != null) {
@@ -259,11 +284,7 @@ public VariableInstance getVariableInstance(String variableName, boolean fetchAl
       return null;

     } else {
-
-      if (usedVariablesCache.containsKey(variableName)) {
-        return usedVariablesCache.get(variableName);
-      }
-
+
       if (variableInstances != null && variableInstances.containsKey(variableName)) {
         return variableInstances.get(variableName);
       }
@@ -290,7 +311,7 @@ public VariableInstance getVariableInstance(String variableName, boolean fetchAl
   public Object getVariableLocal(String variableName) {
     return getVariableLocal(variableName, true);
   }
-
+
   public VariableInstance getVariableInstanceLocal(String variableName) {
     return getVariableInstanceLocal(variableName, true);
   }
@@ -303,14 +324,19 @@ public Object getVariableLocal(String variableName, boolean fetchAllVariables) {
     }
     return value;
   }
-
+
   public VariableInstance getVariableInstanceLocal(String variableName, boolean fetchAllVariables) {
+
+    if (transientVariabes != null && transientVariabes.containsKey(variableName)) {
+      return transientVariabes.get(variableName);
+    }
+
+    if (usedVariablesCache.containsKey(variableName)) {
+      return usedVariablesCache.get(variableName);
+    }
+
     if (fetchAllVariables == true) {

-      if (usedVariablesCache.containsKey(variableName)) {
-        return usedVariablesCache.get(variableName);
-      }
-
       ensureVariableInstancesInitialized();

       VariableInstanceEntity variableInstance = variableInstances.get(variableName);
@@ -321,13 +347,6 @@ public VariableInstance getVariableInstanceLocal(String variableName, boolean fe

     } else {

-      if (usedVariablesCache.containsKey(variableName)) {
-        VariableInstanceEntity variable = usedVariablesCache.get(variableName);
-        if (variable != null) {
-          return variable;
-        }
-      }
-
       if (variableInstances != null && variableInstances.containsKey(variableName)) {
         VariableInstanceEntity variable = variableInstances.get(variableName);
         if (variable != null) {
@@ -346,6 +365,10 @@ public VariableInstance getVariableInstanceLocal(String variableName, boolean fe
   }

   public boolean hasVariables() {
+    if (transientVariabes != null && !transientVariabes.isEmpty()) {
+      return true;
+    }
+
     ensureVariableInstancesInitialized();
     if (!variableInstances.isEmpty()) {
       return true;
@@ -358,6 +381,9 @@ public boolean hasVariables() {
   }

   public boolean hasVariablesLocal() {
+    if (transientVariabes != null && !transientVariabes.isEmpty()) {
+      return true;
+    }
     ensureVariableInstancesInitialized();
     return !variableInstances.isEmpty();
   }
@@ -374,11 +400,18 @@ public boolean hasVariable(String variableName) {
   }

   public boolean hasVariableLocal(String variableName) {
+    if (transientVariabes != null && transientVariabes.containsKey(variableName)) {
+      return true;
+    }
     ensureVariableInstancesInitialized();
     return variableInstances.containsKey(variableName);
   }

   protected Set<String> collectVariableNames(Set<String> variableNames) {
+    if (transientVariabes != null) {
+      variableNames.addAll(transientVariabes.keySet());
+    }
+
     ensureVariableInstancesInitialized();
     VariableScopeImpl parentScope = getParentVariableScope();
     if (parentScope != null) {
@@ -403,9 +436,14 @@ public Map<String, Object> getVariablesLocal() {
     for (String variableName : usedVariablesCache.keySet()) {
       variables.put(variableName, usedVariablesCache.get(variableName).getValue());
     }
+    if (transientVariabes != null) {
+      for (String variableName : transientVariabes.keySet()) {
+        variables.put(variableName, transientVariabes.get(variableName).getValue());
+      }
+    }
     return variables;
   }
-
+
   public Map<String, VariableInstance> getVariableInstancesLocal() {
     Map<String, VariableInstance> variables = new HashMap<String, VariableInstance>();
     ensureVariableInstancesInitialized();
@@ -415,13 +453,16 @@ public Map<String, VariableInstance> getVariableInstancesLocal() {
     for (String variableName : usedVariablesCache.keySet()) {
       variables.put(variableName, usedVariablesCache.get(variableName));
     }
+    if (transientVariabes != null) {
+      variables.putAll(transientVariabes);;
+    }
     return variables;
   }

   public Map<String, Object> getVariablesLocal(Collection<String> variableNames) {
     return getVariablesLocal(variableNames, true);
   }
-
+
   public Map<String, VariableInstance> getVariableInstancesLocal(Collection<String> variableNames) {
     return getVariableInstancesLocal(variableNames, true);
   }
@@ -429,11 +470,13 @@ public Map<String, VariableInstance> getVariableInstancesLocal(Collection<String
   public Map<String, Object> getVariablesLocal(Collection<String> variableNames, boolean fetchAllVariables) {
     Map<String, Object> requestedVariables = new HashMap<String, Object>();

-    // The values in the fetch-cache will be more recent, so they can
-    // override any existing ones
+    // The values in the fetch-cache will be more recent, so they can override any existing ones
     Set<String> variableNamesToFetch = new HashSet<String>(variableNames);
     for (String variableName : variableNames) {
-      if (usedVariablesCache.containsKey(variableName)) {
+      if (transientVariabes != null && transientVariabes.containsKey(variableName)) {
+        requestedVariables.put(variableName, transientVariabes.get(variableName).getValue());
+        variableNamesToFetch.remove(variableName);
+      } else if (usedVariablesCache.containsKey(variableName)) {
         requestedVariables.put(variableName, usedVariablesCache.get(variableName).getValue());
         variableNamesToFetch.remove(variableName);
       }
@@ -461,11 +504,13 @@ public Map<String, Object> getVariablesLocal(Collection<String> variableNames, b
   public Map<String, VariableInstance> getVariableInstancesLocal(Collection<String> variableNames, boolean fetchAllVariables) {
     Map<String, VariableInstance> requestedVariables = new HashMap<String, VariableInstance>();

-    // The values in the fetch-cache will be more recent, so they can
-    // override any existing ones
+    // The values in the fetch-cache will be more recent, so they can override any existing ones
     Set<String> variableNamesToFetch = new HashSet<String>(variableNames);
     for (String variableName : variableNames) {
-      if (usedVariablesCache.containsKey(variableName)) {
+      if (transientVariabes != null && transientVariabes.containsKey(variableName)) {
+        requestedVariables.put(variableName, transientVariabes.get(variableName));
+        variableNamesToFetch.remove(variableName);
+      } else if (usedVariablesCache.containsKey(variableName)) {
         requestedVariables.put(variableName, usedVariablesCache.get(variableName));
         variableNamesToFetch.remove(variableName);
       }
@@ -493,8 +538,13 @@ public Map<String, VariableInstance> getVariableInstancesLocal(Collection<String
   protected abstract List<VariableInstanceEntity> getSpecificVariables(Collection<String> variableNames);

   public Set<String> getVariableNamesLocal() {
+    Set<String> variableNames = new HashSet<String>();
+    if (transientVariabes != null) {
+      variableNames.addAll(transientVariabes.keySet());
+    }
     ensureVariableInstancesInitialized();
-    return variableInstances.keySet();
+    variableNames.addAll(variableInstances.keySet());
+    return variableNames;
   }

   public Map<String, VariableInstanceEntity> getVariableInstanceEntities() {
@@ -502,20 +552,6 @@ public Map<String, VariableInstanceEntity> getVariableInstanceEntities() {
     return Collections.unmodifiableMap(variableInstances);
   }

-  public Map<String, Object> getVariableValues() {
-    Map<String, Object> variableMap = new HashMap<String, Object>();
-    if (variableInstances != null) {
-      for (String varName : variableInstances.keySet()) {
-        VariableInstanceEntity variableEntity = variableInstances.get(varName);
-        if (variableEntity != null) {
-          variableMap.put(varName, variableEntity.getValue());
-        } else {
-          variableMap.put(varName, null);
-        }
-      }
-    }
-    return variableMap;
-  }

   public Map<String, VariableInstanceEntity> getUsedVariablesCache() {
     return usedVariablesCache;
@@ -560,15 +596,6 @@ public void removeVariablesLocal() {
     }
   }

-  public void deleteVariablesInstanceForLeavingScope() {
-    ensureVariableInstancesInitialized();
-
-    for (VariableInstanceEntity variableInstance : variableInstances.values()) {
-      Context.getCommandContext().getHistoryManager().recordVariableUpdate(variableInstance);
-      Context.getCommandContext().getVariableInstanceEntityManager().delete(variableInstance);
-    }
-  }
-
   public void removeVariables(Collection<String> variableNames) {
     if (variableNames != null) {
       for (String variableName : variableNames) {
@@ -590,45 +617,53 @@ public void setVariable(String variableName, Object value) {
   }

   /**
-   * The default {@link #setVariable(String, Object)} fetches all variables (for historical and backwards compatible reasons) while setting the variables.
+   * The default {@link #setVariable(String, Object)} fetches all variables
+   * (for historical and backwards compatible reasons) while setting the variables.
    *
-   * Setting the fetchAllVariables parameter to true is the default behaviour (ie fetching all variables) Setting the fetchAllVariables parameter to false does not do that.
+   * Setting the fetchAllVariables parameter to true is the default behaviour
+   * (ie fetching all variables) Setting the fetchAllVariables parameter to false does not do that.
    *
    */
   public void setVariable(String variableName, Object value, boolean fetchAllVariables) {
     setVariable(variableName, value, getSourceActivityExecution(), fetchAllVariables);
   }

-  protected void setVariable(String variableName, Object value, ExecutionEntity sourceActivityExecution, boolean fetchAllVariables) {
+  /**
+   * Sets a variable as high as possible (highest parent).
+   *
+   *  @param sourceExecution The execution where the variable was originally set, used for history data.
+   *  @param fetchAllVariables If true, all existing variables will be fetched when setting the variable.
+   */
+  protected void setVariable(String variableName, Object value, ExecutionEntity sourceExecution, boolean fetchAllVariables) {

     if (fetchAllVariables == true) {

       // If it's in the cache, it's more recent
       if (usedVariablesCache.containsKey(variableName)) {
-        updateVariableInstance(usedVariablesCache.get(variableName), value, sourceActivityExecution);
+        updateVariableInstance(usedVariablesCache.get(variableName), value, sourceExecution);
       }

       // If the variable exists on this scope, replace it
       if (hasVariableLocal(variableName)) {
-        setVariableLocal(variableName, value, sourceActivityExecution, true);
+        setVariableLocal(variableName, value, sourceExecution, true);
         return;
       }

       // Otherwise, go up the hierarchy (we're trying to put it as high as possible)
       VariableScopeImpl parentVariableScope = getParentVariableScope();
       if (parentVariableScope != null) {
-        if (sourceActivityExecution == null) {
+        if (sourceExecution == null) {
           parentVariableScope.setVariable(variableName, value);
         } else {
-          parentVariableScope.setVariable(variableName, value, sourceActivityExecution, true);
+          parentVariableScope.setVariable(variableName, value, sourceExecution, true);
         }
         return;
       }

       // We're as high as possible and the variable doesn't exist yet, so
       // we're creating it
-      if (sourceActivityExecution != null) {
-        createVariableLocal(variableName, value, sourceActivityExecution);
+      if (sourceExecution != null) {
+        createVariableLocal(variableName, value, sourceExecution);
       } else {
         createVariableLocal(variableName, value);
       }
@@ -638,11 +673,11 @@ protected void setVariable(String variableName, Object value, ExecutionEntity so
       // Check local cache first
       if (usedVariablesCache.containsKey(variableName)) {

-        updateVariableInstance(usedVariablesCache.get(variableName), value, sourceActivityExecution);
+        updateVariableInstance(usedVariablesCache.get(variableName), value, sourceExecution);

       } else if (variableInstances != null && variableInstances.containsKey(variableName)) {

-        updateVariableInstance(variableInstances.get(variableName), value, sourceActivityExecution);
+        updateVariableInstance(variableInstances.get(variableName), value, sourceExecution);

       } else {

@@ -650,17 +685,17 @@ protected void setVariable(String variableName, Object value, ExecutionEntity so
         // Create it if it doesn't exist yet
         VariableInstanceEntity variable = getSpecificVariable(variableName);
         if (variable != null) {
-          updateVariableInstance(variable, value, sourceActivityExecution);
+          updateVariableInstance(variable, value, sourceExecution);
           usedVariablesCache.put(variableName, variable);
         } else {

           VariableScopeImpl parent = getParentVariableScope();
           if (parent != null) {
-            parent.setVariable(variableName, value, sourceActivityExecution, fetchAllVariables);
+            parent.setVariable(variableName, value, sourceExecution, fetchAllVariables);
             return;
           }

-          variable = createVariableInstance(variableName, value, sourceActivityExecution);
+          variable = createVariableInstance(variableName, value, sourceExecution);
           usedVariablesCache.put(variableName, variable);

         }
@@ -731,7 +766,7 @@ public Object setVariableLocal(String variableName, Object value, ExecutionEntit

     }
   }
-
+
   public void createVariableLocal(String variableName, Object value) {
     createVariableLocal(variableName, value, getSourceActivityExecution());
   }
@@ -846,7 +881,122 @@ protected VariableInstanceEntity createVariableInstance(String variableName, Obj

     return variableInstance;
   }
+
+
+  /*
+   * Transient variables
+   */
+
+  public void setTransientVariablesLocal(Map<String, Object> transientVariables) {
+    for (String variableName : transientVariables.keySet()) {
+      setTransientVariableLocal(variableName, transientVariables.get(variableName));
+    }
+  }
+
+  public void setTransientVariableLocal(String variableName, Object variableValue) {
+    if (transientVariabes == null) {
+      transientVariabes = new HashMap<String, VariableInstance>();
+    }
+    transientVariabes.put(variableName, new TransientVariableInstance(variableName, variableValue));
+  }
+
+  public void setTransientVariables(Map<String, Object> transientVariables) {
+    for (String variableName : transientVariables.keySet()) {
+      setTransientVariable(variableName, transientVariables.get(variableName));
+    }
+  }
+
+  public void setTransientVariable(String variableName, Object variableValue) {
+    VariableScopeImpl parentVariableScope = getParentVariableScope();
+    if (parentVariableScope != null) {
+      parentVariableScope.setTransientVariable(variableName, variableValue);
+      return;
+    }
+    setTransientVariableLocal(variableName, variableValue);
+  }
+
+  public Object getTransientVariableLocal(String variableName) {
+    if (transientVariabes != null) {
+      return transientVariabes.get(variableName).getValue();
+    }
+    return null;
+  }
+
+  public Map<String, Object> getTransientVariablesLocal() {
+    if (transientVariabes != null) {
+      Map<String, Object> variables = new HashMap<String, Object>();
+      for (String variableName : transientVariabes.keySet()) {
+        variables.put(variableName, transientVariabes.get(variableName).getValue());
+      }
+      return variables;
+    } else {
+      return Collections.emptyMap();
+    }
+  }
+
+  public Object getTransientVariable(String variableName) {
+    if (transientVariabes != null && transientVariabes.containsKey(variableName)) {
+      return transientVariabes.get(variableName).getValue();
+    }
+
+    VariableScopeImpl  parentScope = getParentVariableScope();
+    if (parentScope != null) {
+      return parentScope.getTransientVariable(variableName);
+    }
+
+    return null;
+  }
+
+  public Map<String, Object> getTransientVariables() {
+    return collectTransientVariables(new HashMap<String, Object>());
+  }
+
+  protected Map<String, Object> collectTransientVariables(HashMap<String, Object> variables) {
+    VariableScopeImpl parentScope = getParentVariableScope();
+    if (parentScope != null) {
+      variables.putAll(parentScope.collectVariables(variables));
+    }
+
+    if (transientVariabes != null) {
+      for (String variableName : transientVariabes.keySet()) {
+        variables.put(variableName, transientVariabes.get(variableName).getValue());
+      }
+    }

+    return variables;
+  }
+
+  public void removeTransientVariableLocal(String variableName) {
+    if (transientVariabes != null) {
+      transientVariabes.remove(variableName);
+    }
+  }
+
+  public void removeTransientVariablesLocal() {
+    if (transientVariabes != null) {
+      transientVariabes.clear();
+    }
+  }
+
+  public void removeTransientVariable(String variableName) {
+    if (transientVariabes != null && transientVariabes.containsKey(variableName)) {
+      removeTransientVariableLocal(variableName);
+      return;
+    }
+    VariableScopeImpl parentVariableScope = getParentVariableScope();
+    if (parentVariableScope != null) {
+      parentVariableScope.removeTransientVariable(variableName);
+    }
+  }
+
+  public void removeTransientVariables() {
+    removeTransientVariablesLocal();
+    VariableScopeImpl parentVariableScope = getParentVariableScope();
+    if (parentVariableScope != null) {
+      parentVariableScope.removeTransientVariablesLocal();
+    }
+  }
+
   /**
    * Execution variable updates have activity instance ids, but historic task variable updates don't.
    */
diff --git a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/runtime/ProcessInstanceBuilderImpl.java b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/runtime/ProcessInstanceBuilderImpl.java
index 6ad5446240a..d1644d7d659 100644
--- a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/runtime/ProcessInstanceBuilderImpl.java
+++ b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/runtime/ProcessInstanceBuilderImpl.java
@@ -15,14 +15,13 @@
 import java.util.HashMap;
 import java.util.Map;

-import org.activiti.engine.ActivitiIllegalArgumentException;
 import org.activiti.engine.impl.RuntimeServiceImpl;
 import org.activiti.engine.runtime.ProcessInstance;
 import org.activiti.engine.runtime.ProcessInstanceBuilder;

 /**
  * @author Bassam Al-Sarori
- *
+ * @author Joram Barrez
  */
 public class ProcessInstanceBuilderImpl implements ProcessInstanceBuilder {

@@ -30,10 +29,12 @@ public class ProcessInstanceBuilderImpl implements ProcessInstanceBuilder {

   protected String processDefinitionId;
   protected String processDefinitionKey;
+  protected String messageName;
   protected String processInstanceName;
   protected String businessKey;
   protected String tenantId;
-  protected Map<String, Object> variables = new HashMap<String, Object>();
+  protected Map<String, Object> variables;
+  protected Map<String, Object> transientVariables;

   public ProcessInstanceBuilderImpl(RuntimeServiceImpl runtimeService) {
     this.runtimeService = runtimeService;
@@ -48,8 +49,13 @@ public ProcessInstanceBuilder processDefinitionKey(String processDefinitionKey)
     this.processDefinitionKey = processDefinitionKey;
     return this;
   }
+
+  public ProcessInstanceBuilder messageName(String messageName) {
+    this.messageName = messageName;
+    return this;
+  }

-  public ProcessInstanceBuilder processInstanceName(String processInstanceName) {
+  public ProcessInstanceBuilder name(String processInstanceName) {
     this.processInstanceName = processInstanceName;
     return this;
   }
@@ -63,16 +69,48 @@ public ProcessInstanceBuilder tenantId(String tenantId) {
     this.tenantId = tenantId;
     return this;
   }
+
+  public ProcessInstanceBuilder variables(Map<String, Object> variables) {
+    if (this.variables == null) {
+      this.variables = new HashMap<String, Object>();
+    }
+    if (variables != null) {
+      for (String variableName : variables.keySet()) {
+        this.variables.put(variableName, variables.get(variableName));
+      }
+    }
+    return this;
+  }

-  public ProcessInstanceBuilder addVariable(String variableName, Object value) {
+  public ProcessInstanceBuilder variable(String variableName, Object value) {
+    if (this.variables == null) {
+      this.variables = new HashMap<String, Object>();
+    }
     this.variables.put(variableName, value);
     return this;
   }
+
+  public ProcessInstanceBuilder transientVariables(Map<String, Object> transientVariables) {
+    if (this.transientVariables == null) {
+      this.transientVariables = new HashMap<String, Object>();
+    }
+    if (transientVariables != null) {
+      for (String variableName : transientVariables.keySet()) {
+        this.transientVariables.put(variableName, transientVariables.get(variableName));
+      }
+    }
+    return this;
+  }
+
+  public ProcessInstanceBuilder transientVariable(String variableName, Object value) {
+    if (this.transientVariables == null) {
+      this.transientVariables = new HashMap<String, Object>();
+    }
+    this.transientVariables.put(variableName, value);
+    return this;
+  }

   public ProcessInstance start() {
-    if (processDefinitionId == null && processDefinitionKey == null) {
-      throw new ActivitiIllegalArgumentException("processDefinitionKey and processDefinitionId are null");
-    }
     return runtimeService.startProcessInstance(this);
   }

@@ -83,6 +121,10 @@ public String getProcessDefinitionId() {
   public String getProcessDefinitionKey() {
     return processDefinitionKey;
   }
+
+  public String getMessageName() {
+    return messageName;
+  }

   public String getProcessInstanceName() {
     return processInstanceName;
@@ -99,5 +141,9 @@ public String getTenantId() {
   public Map<String, Object> getVariables() {
     return variables;
   }
+
+  public Map<String, Object> getTransientVariables() {
+    return transientVariables;
+  }

 }
diff --git a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/util/ProcessInstanceHelper.java b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/util/ProcessInstanceHelper.java
index 6a638c8feb7..d282bf1eaf3 100644
--- a/modules/activiti-engine/src/main/java/org/activiti/engine/impl/util/ProcessInstanceHelper.java
+++ b/modules/activiti-engine/src/main/java/org/activiti/engine/impl/util/ProcessInstanceHelper.java
@@ -42,19 +42,20 @@
 public class ProcessInstanceHelper {

   public ProcessInstance createProcessInstance(ProcessDefinitionEntity processDefinition,
-      String businessKey, String processInstanceName, Map<String, Object> variables) {
+      String businessKey, String processInstanceName, Map<String, Object> variables, Map<String, Object> transientVariables) {

-    return createAndStartProcessInstance(processDefinition, businessKey, processInstanceName, variables, false);
+    return createAndStartProcessInstance(processDefinition, businessKey, processInstanceName, variables, transientVariables, false);
   }

   public ProcessInstance createAndStartProcessInstance(ProcessDefinition processDefinition,
-      String businessKey, String processInstanceName, Map<String, Object> variables) {
+      String businessKey, String processInstanceName, Map<String, Object> variables, Map<String, Object> transientVariables) {

-    return createAndStartProcessInstance(processDefinition, businessKey, processInstanceName, variables, true);
+    return createAndStartProcessInstance(processDefinition, businessKey, processInstanceName, variables, transientVariables, true);
   }

   protected ProcessInstance createAndStartProcessInstance(ProcessDefinition processDefinition,
-      String businessKey, String processInstanceName, Map<String, Object> variables, boolean startProcessInstance) {
+      String businessKey, String processInstanceName,
+      Map<String, Object> variables, Map<String, Object> transientVariables, boolean startProcessInstance) {

     CommandContext commandContext = Context.getCommandContext(); // Todo: ideally, context should be passed here
     if (Activiti5Util.isActiviti5ProcessDefinition(commandContext, processDefinition)) {
@@ -80,10 +81,12 @@ protected ProcessInstance createAndStartProcessInstance(ProcessDefinition proces
     }

     return createAndStartProcessInstanceWithInitialFlowElement(processDefinition, businessKey,
-        processInstanceName, initialFlowElement, process, variables, startProcessInstance);
+        processInstanceName, initialFlowElement, process, variables, transientVariables, startProcessInstance);
   }

-  public ProcessInstance createAndStartProcessInstanceByMessage(ProcessDefinition processDefinition, String messageName, Map<String, Object> variables) {
+  public ProcessInstance createAndStartProcessInstanceByMessage(ProcessDefinition processDefinition, String messageName,
+      Map<String, Object> variables, Map<String, Object> transientVariables) {
+
     CommandContext commandContext = Context.getCommandContext();
     if (processDefinition.getEngineVersion() != null) {
       if (Activiti5CompatibilityHandler.ACTIVITI_5_ENGINE_TAG.equals(processDefinition.getEngineVersion())) {
@@ -129,12 +132,12 @@ public ProcessInstance createAndStartProcessInstanceByMessage(ProcessDefinition
       throw new ActivitiException("No message start event found for process definition " + processDefinition.getId() + " and message name " + messageName);
     }

-    return createAndStartProcessInstanceWithInitialFlowElement(processDefinition, null, null, initialFlowElement, process, variables, true);
+    return createAndStartProcessInstanceWithInitialFlowElement(processDefinition, null, null, initialFlowElement, process, variables, transientVariables, true);
   }

   public ProcessInstance createAndStartProcessInstanceWithInitialFlowElement(ProcessDefinition processDefinition,
       String businessKey, String processInstanceName, FlowElement initialFlowElement,
-      Process process, Map<String, Object> variables, boolean startProcessInstance) {
+      Process process, Map<String, Object> variables, Map<String, Object> transientVariables, boolean startProcessInstance) {

     CommandContext commandContext = Context.getCommandContext();

@@ -157,6 +160,11 @@ public ProcessInstance createAndStartProcessInstanceWithInitialFlowElement(Proce
         processInstance.setVariable(varName, variables.get(varName));
       }
     }
+    if (transientVariables != null) {
+      for (String varName : transientVariables.keySet()) {
+        processInstance.setTransientVariable(varName, transientVariables.get(varName));
+      }
+    }

     // Set processInstance name
     if (processInstanceName != null) {
diff --git a/modules/activiti-engine/src/main/java/org/activiti/engine/runtime/ProcessInstanceBuilder.java b/modules/activiti-engine/src/main/java/org/activiti/engine/runtime/ProcessInstanceBuilder.java
index d558900b0c0..c889fa7f38b 100644
--- a/modules/activiti-engine/src/main/java/org/activiti/engine/runtime/ProcessInstanceBuilder.java
+++ b/modules/activiti-engine/src/main/java/org/activiti/engine/runtime/ProcessInstanceBuilder.java
@@ -12,6 +12,11 @@
  */
 package org.activiti.engine.runtime;

+import java.util.Map;
+
+import org.activiti.engine.ActivitiIllegalArgumentException;
+import org.activiti.engine.ActivitiObjectNotFoundException;
+
 /**
  * Helper for starting new ProcessInstance.
  *
@@ -21,29 +26,60 @@
  *
  *
  * @author Bassam Al-Sarori
- *
+ * @author Joram Barrez
  */
 public interface ProcessInstanceBuilder {

-  /** Set the id of the process definition **/
+  /**
+   * Set the id of the process definition
+   **/
   ProcessInstanceBuilder processDefinitionId(String processDefinitionId);

   /**
-   * Set the key of the process definition, latest version of the process definition with the given key. If processDefinitionId was set this will be ignored
+   * Set the key of the process definition, latest version of the process definition with the given key.
+   * If processDefinitionId was set this will be ignored
    **/
   ProcessInstanceBuilder processDefinitionKey(String processDefinitionKey);
+
+  /**
+   * Set the message name that needs to be used to look up the process definition that needs to be used to start the process instance.
+   */
+  ProcessInstanceBuilder messageName(String messageName);

-  /** Set the name of process instance **/
-  ProcessInstanceBuilder processInstanceName(String processInstanceName);
+  /**
+   * Set the name of process instance
+   **/
+  ProcessInstanceBuilder name(String processInstanceName);

-  /** Set the businessKey of process instance **/
+  /**
+   * Set the businessKey of process instance
+   **/
   ProcessInstanceBuilder businessKey(String businessKey);

-  /** Set the tenantId of process instance **/
+  /**
+   * Set the tenantId of process instance
+   **/
   ProcessInstanceBuilder tenantId(String tenantId);

-  /** Add a variable to the process instance **/
-  ProcessInstanceBuilder addVariable(String variableName, Object value);
+  /**
+   * Sets the process variables
+   */
+  ProcessInstanceBuilder variables(Map<String, Object> variables);
+
+  /**
+   * Adds a variable to the process instance
+   **/
+  ProcessInstanceBuilder variable(String variableName, Object value);
+
+  /**
+   * Sets the transient variables
+   */
+  ProcessInstanceBuilder transientVariables(Map<String, Object> transientVariables);
+
+  /**
+   * Adds a transient variable to the process instance
+   */
+  ProcessInstanceBuilder transientVariable(String variableName, Object value);

   /**
    * Start the process instance
@@ -54,4 +90,5 @@ public interface ProcessInstanceBuilder {
    *           when no process definition is deployed with the given processDefinitionKey or processDefinitionId
    * **/
   ProcessInstance start();
+
 }
diff --git a/modules/activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/RuntimeServiceTest.java b/modules/activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/RuntimeServiceTest.java
index 1f601b7fcb5..fb8cc240172 100644
--- a/modules/activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/RuntimeServiceTest.java
+++ b/modules/activiti-engine/src/test/java/org/activiti/engine/test/api/runtime/RuntimeServiceTest.java
@@ -159,7 +159,7 @@ public void testStartProcessInstanceByProcessInstanceBuilder() {
     processInstanceBuilder = runtimeService.createProcessInstanceBuilder();

     // by key, with processInstance name with variables
-    processInstance = processInstanceBuilder.processDefinitionKey("oneTaskProcess").businessKey("456").addVariable("var", "value").processInstanceName("processName1").start();
+    processInstance = processInstanceBuilder.processDefinitionKey("oneTaskProcess").businessKey("456").variable("var", "value").name("processName1").start();
     assertNotNull(processInstance);
     assertEquals(2, runtimeService.createProcessInstanceQuery().processDefinitionKey("oneTaskProcess").count());
     assertEquals("processName1", processInstance.getName());
@@ -176,7 +176,7 @@ public void testStartProcessInstanceByProcessInstanceBuilder() {

     processInstanceBuilder = runtimeService.createProcessInstanceBuilder();
     // by id with variables
-    processInstance = processInstanceBuilder.processDefinitionId(processDefinition.getId()).businessKey("101123").addVariable("var", "value2").start();
+    processInstance = processInstanceBuilder.processDefinitionId(processDefinition.getId()).businessKey("101123").variable("var", "value2").start();
     assertNotNull(processInstance);
     assertEquals(4, runtimeService.createProcessInstanceQuery().processDefinitionKey("oneTaskProcess").count());
     assertEquals("value2", runtimeService.getVariable(processInstance.getId(), "var"));
@@ -184,7 +184,7 @@ public void testStartProcessInstanceByProcessInstanceBuilder() {

     processInstanceBuilder = runtimeService.createProcessInstanceBuilder();
     // by id and processInstance name
-    processInstance = processInstanceBuilder.processDefinitionId(processDefinition.getId()).businessKey("101124").processInstanceName("processName2").start();
+    processInstance = processInstanceBuilder.processDefinitionId(processDefinition.getId()).businessKey("101124").name("processName2").start();
     assertNotNull(processInstance);
     assertEquals(5, runtimeService.createProcessInstanceQuery().processDefinitionKey("oneTaskProcess").count());
     assertEquals("processName2", processInstance.getName());
diff --git a/modules/activiti-engine/src/test/java/org/activiti/engine/test/api/variables/TransientVariablesTest.java b/modules/activiti-engine/src/test/java/org/activiti/engine/test/api/variables/TransientVariablesTest.java
new file mode 100644
index 00000000000..c933faeab62
--- /dev/null
+++ b/modules/activiti-engine/src/test/java/org/activiti/engine/test/api/variables/TransientVariablesTest.java
@@ -0,0 +1,349 @@
+/* Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.activiti.engine.test.api.variables;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.activiti.engine.delegate.DelegateExecution;
+import org.activiti.engine.delegate.DelegateTask;
+import org.activiti.engine.delegate.ExecutionListener;
+import org.activiti.engine.delegate.Expression;
+import org.activiti.engine.delegate.JavaDelegate;
+import org.activiti.engine.delegate.TaskListener;
+import org.activiti.engine.impl.test.PluggableActivitiTestCase;
+import org.activiti.engine.impl.util.CollectionUtil;
+import org.activiti.engine.runtime.Execution;
+import org.activiti.engine.runtime.ProcessInstance;
+import org.activiti.engine.task.Task;
+import org.activiti.engine.test.Deployment;
+
+/**
+ * @author Joram Barrez
+ */
+public class TransientVariablesTest extends PluggableActivitiTestCase {
+
+  @Deployment
+  public void testSetTransientVariableInServiceTask() {
+
+    // Process has two service task: first sets transient vars,
+    // second then processes transient var and puts data in real vars.
+    // (mimicing a service + processing call)
+    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("transientVarsTest");
+    Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
+    String message = (String) taskService.getVariable(task.getId(), "message");
+    assertEquals("Hello World!", message);
+
+    // Variable should not be there after user task
+    assertNull(runtimeService.getVariable(processInstance.getId(), "response"));
+  }
+
+  @Deployment
+  public void testUseTransientVariableInExclusiveGateway() {
+    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("transientVarsTest");
+    Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
+    assertEquals("responseOk", task.getTaskDefinitionKey());
+
+    // Variable should not be there after user task
+    assertNull(runtimeService.getVariable(processInstance.getId(), "response"));
+  }
+
+  @Deployment
+  public void testTaskCompleteWithTransientVariables() {
+    Map<String, Object> persistentVars = new HashMap<String, Object>();
+    persistentVars.put("persistentVar1", "Hello World");
+    persistentVars.put("persistentVar2", 987654321);
+    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("transientVarsTest", persistentVars);
+
+    Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
+    assertEquals("My Task", task.getName());
+
+    persistentVars.clear();
+    Map<String, Object> transientVars = new HashMap<String, Object>();
+    transientVars.put("unusedTransientVar", "Hello there");
+    transientVars.put("transientVar", "OK");
+    taskService.complete(task.getId(), persistentVars, transientVars);
+
+    // Combined var has been set by execution listener
+    String combinedVar = (String) runtimeService.getVariable(processInstance.getId(), "combinedVar");
+    assertEquals("Hello WorldABC123", combinedVar);
+
+    assertNotNull(runtimeService.getVariable(processInstance.getId(), "persistentVar1"));
+    assertNotNull(runtimeService.getVariable(processInstance.getId(), "persistentVar2"));
+
+    assertNull(runtimeService.getVariable(processInstance.getId(), "unusedTransientVar"));
+    assertNull(runtimeService.getVariable(processInstance.getId(), "transientVar"));
+    assertNull(runtimeService.getVariable(processInstance.getId(), "secondTransientVar"));
+    assertNull(runtimeService.getVariable(processInstance.getId(), "thirdTransientVar"));
+  }
+
+  @Deployment
+  public void testTaskResolveWithTransientVariables() {
+    Map<String, Object> persistentVars = new HashMap<String, Object>();
+    persistentVars.put("persistentVar1", "Hello World");
+    persistentVars.put("persistentVar2", 987654321);
+    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("transientVarsTest", persistentVars);
+
+    Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
+    assertEquals("My Task", task.getName());
+
+    persistentVars.clear();
+    Map<String, Object> transientVars = new HashMap<String, Object>();
+    transientVars.put("unusedTransientVar", "Hello there");
+    transientVars.put("transientVar", "OK");
+    taskService.complete(task.getId(), persistentVars, transientVars);
+
+    // Combined var has been set by execution listener
+    String combinedVar = (String) runtimeService.getVariable(processInstance.getId(), "combinedVar");
+    assertEquals("Hello WorldABC123", combinedVar);
+
+    assertNotNull(runtimeService.getVariable(processInstance.getId(), "persistentVar1"));
+    assertNotNull(runtimeService.getVariable(processInstance.getId(), "persistentVar2"));
+
+    assertNull(runtimeService.getVariable(processInstance.getId(), "unusedTransientVar"));
+    assertNull(runtimeService.getVariable(processInstance.getId(), "transientVar"));
+    assertNull(runtimeService.getVariable(processInstance.getId(), "secondTransientVar"));
+    assertNull(runtimeService.getVariable(processInstance.getId(), "thirdTransientVar"));
+  }
+
+  @Deployment
+  public void testTaskListenerWithTransientVariables() {
+    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("transientVarsTest");
+
+    Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
+    assertEquals("Task after", task.getName());
+
+    String mergedResult = (String) taskService.getVariable(task.getId(), "mergedResult");
+    assertEquals("transientVar01transientVar02transientVar03", mergedResult);
+  }
+
+  @Deployment
+  public void testTransientVariableShadowsPersistentVariable() {
+    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("transientVarsTest", CollectionUtil.singletonMap("theVar", "Hello World"));
+    Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
+    String varValue = (String) taskService.getVariable(task.getId(), "resultVar");
+    assertEquals("I am shadowed", varValue);
+  }
+
+  @Deployment
+  public void testTriggerWithTransientVars() {
+    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("transientVarsTest");
+
+    Execution executionInWait1 = runtimeService.createExecutionQuery().activityId("wait1").singleResult();
+    runtimeService.trigger(executionInWait1.getId(), CollectionUtil.singletonMap("persistentVar", "persistentValue01"));
+
+    Execution executionInWait2 = runtimeService.createExecutionQuery().activityId("wait2").singleResult();
+    runtimeService.trigger(executionInWait2.getId(), CollectionUtil.singletonMap("anotherPersistentVar", "persistentValue02"), CollectionUtil.singletonMap("transientVar", "transientValue"));
+
+    Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
+    String result = (String) taskService.getVariable(task.getId(), "result");
+    assertEquals("persistentValue02persistentValue01transientValue", result);
+
+    assertNull(runtimeService.getVariable(processInstance.getId(), "transientVar"));
+  }
+
+  @Deployment
+  public void testStartProcessInstanceByKey() {
+    ProcessInstance processInstance = runtimeService.createProcessInstanceBuilder()
+        .processDefinitionKey("transientVarsTest")
+        .transientVariable("variable", "gotoA")
+        .start();
+    Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
+    assertEquals("A", task.getName());
+    assertEquals(0, runtimeService.getVariables(processInstance.getId()).size());
+
+    processInstance =runtimeService.createProcessInstanceBuilder()
+        .processDefinitionKey("transientVarsTest")
+        .transientVariable("variable", "gotoB")
+        .start();
+    task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
+    assertEquals("B", task.getName());
+    assertEquals(0, runtimeService.getVariables(processInstance.getId()).size());
+
+    processInstance = runtimeService.createProcessInstanceBuilder()
+        .processDefinitionKey("transientVarsTest")
+        .transientVariable("variable", "somethingElse")
+        .start();
+    task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
+    assertEquals("Default", task.getName());
+    assertEquals(0, runtimeService.getVariables(processInstance.getId()).size());
+  }
+
+  @Deployment
+  public void testStartProcessInstanceById() {
+
+    String processDefinitionId = repositoryService.createProcessDefinitionQuery().singleResult().getId();
+
+    ProcessInstance processInstance = runtimeService.createProcessInstanceBuilder()
+        .processDefinitionId(processDefinitionId)
+        .transientVariable("variable", "gotoA")
+        .start();
+    Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
+    assertEquals("A", task.getName());
+    assertEquals(0, runtimeService.getVariables(processInstance.getId()).size());
+
+    processInstance =runtimeService.createProcessInstanceBuilder()
+        .processDefinitionId(processDefinitionId)
+        .transientVariable("variable", "gotoB")
+        .start();
+    task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
+    assertEquals("B", task.getName());
+    assertEquals(0, runtimeService.getVariables(processInstance.getId()).size());
+
+    processInstance = runtimeService.createProcessInstanceBuilder()
+        .processDefinitionId(processDefinitionId)
+        .transientVariable("variable", "somethingElse")
+        .start();
+    task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
+    assertEquals("Default", task.getName());
+    assertEquals(0, runtimeService.getVariables(processInstance.getId()).size());
+  }
+
+  @Deployment
+  public void testStartProcessInstanceByMessage() {
+
+    ProcessInstance processInstance = runtimeService.createProcessInstanceBuilder()
+        .messageName("myMessage")
+        .transientVariable("variable", "gotoA")
+        .start();
+    Task task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
+    assertEquals("A", task.getName());
+    assertEquals(0, runtimeService.getVariables(processInstance.getId()).size());
+
+    processInstance =runtimeService.createProcessInstanceBuilder()
+        .messageName("myMessage")
+        .transientVariable("variable", "gotoB")
+        .start();
+    task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
+    assertEquals("B", task.getName());
+    assertEquals(0, runtimeService.getVariables(processInstance.getId()).size());
+
+    processInstance = runtimeService.createProcessInstanceBuilder()
+        .messageName("myMessage")
+        .transientVariable("variable", "somethingElse")
+        .start();
+    task = taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();
+    assertEquals("Default", task.getName());
+    assertEquals(0, runtimeService.getVariables(processInstance.getId()).size());
+  }
+
+
+
+  /* Service task class for previous tests */
+
+
+  /**
+   * Mimics a service task that fetches data from a server and stored the whole thing
+   * in a transient variable.
+   */
+  public static class FetchDataServiceTask implements JavaDelegate {
+    public void execute(DelegateExecution execution) {
+      execution.setTransientVariable("response", "author=kermit;version=3;message=Hello World");
+      execution.setTransientVariable("status", new Integer(200));
+    }
+  }
+
+  /**
+   * Processes the transient variable and puts the relevant bits in real variables
+   */
+  public static class ServiceTask02 implements JavaDelegate {
+    public void execute(DelegateExecution execution) {
+      String response = (String) execution.getTransientVariable("response");
+      for (String s : response.split(";")) {
+        String[] data = s.split("=");
+        if (data[0].equals("message")) {
+          execution.setVariable("message", data[1] + "!");
+        }
+      }
+    }
+  }
+
+  public static class CombineVariablesExecutionListener implements ExecutionListener {
+    public void notify(DelegateExecution execution) {
+      String persistentVar1 = (String) execution.getVariable("persistentVar1");
+
+      Object unusedTransientVar = execution.getVariable("unusedTransientVar");
+      if (unusedTransientVar != null) {
+        throw new RuntimeException("Unused transient var should have been deleted");
+      }
+
+      String secondTransientVar = (String) execution.getVariable("secondTransientVar");
+      Number thirdTransientVar = (Number) execution.getTransientVariable("thirdTransientVar");
+
+      String combinedVar = persistentVar1 + secondTransientVar + thirdTransientVar.intValue();
+      execution.setVariable("combinedVar", combinedVar);
+    }
+  }
+
+  public static class GetDataDelegate implements JavaDelegate {
+    private Expression variableName;
+    public void execute(DelegateExecution execution) {
+      String var = (String) variableName.getValue(execution);
+      execution.setTransientVariable(var, "author=kermit;version=3;message=" + var);
+    }
+  }
+
+  public static class ProcessDataDelegate implements JavaDelegate {
+    private Expression dataVariableName;
+    private Expression resultVariableName;
+    public void execute(DelegateExecution execution) {
+      String varName = (String) dataVariableName.getValue(execution);
+      String resultVar = (String) resultVariableName.getValue(execution);
+
+      // Sets the name of the variable as 'resultVar'
+      for (String s : ((String)execution.getVariable(varName)).split(";")) {
+        String[] data = s.split("=");
+        if (data[0].equals("message")) {
+          execution.setTransientVariable(resultVar, data[1]);
+        }
+      }
+    }
+  }
+
+  public static class MergeTransientVariablesTaskListener implements TaskListener {
+    public void notify(DelegateTask delegateTask) {
+      Map<String, Object> transientVariables = delegateTask.getTransientVariables();
+      List<String> variableNames = new ArrayList(transientVariables.keySet());
+      Collections.sort(variableNames);
+
+      StringBuilder strb = new StringBuilder();
+      for (String variableName : variableNames) {
+        if (variableName.startsWith("transientResult")) {
+          String result = (String) transientVariables.get(variableName);
+         strb.append(result);
+        }
+      }
+
+      delegateTask.setVariable("mergedResult", strb.toString());
+    }
+  }
+
+  public static class MergeVariableValues implements JavaDelegate {
+    public void execute(DelegateExecution execution) {
+      Map<String, Object> vars = execution.getVariables();
+      List<String> varNames = new ArrayList<String>(vars.keySet());
+      Collections.sort(varNames);
+
+      StringBuilder strb = new StringBuilder();
+      for (String varName : varNames) {
+        strb.append(vars.get(varName));
+      }
+
+      execution.setVariable("result", strb.toString());
+    }
+  }
+
+}
diff --git a/modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/StartToEndTest.java b/modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/StartToEndTest.java
index 7982b1ebfaa..ff16f931416 100644
--- a/modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/StartToEndTest.java
+++ b/modules/activiti-engine/src/test/java/org/activiti/engine/test/bpmn/StartToEndTest.java
@@ -41,7 +41,7 @@ public void testStartProcessInstanceWithVariables() {
     varMap.put("test", "hello");
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("startToEnd", varMap);
     assertProcessEnded(processInstance.getId());
-    Map<String, Object> returnVarMap = ((ExecutionEntity) processInstance).getVariableValues();
+    Map<String, Object> returnVarMap = ((ExecutionEntity) processInstance).getVariables();
     assertEquals("hello", returnVarMap.get("test"));
   }

@@ -51,7 +51,7 @@ public void testStartProcessInstanceWithServiceTask() {
     varMap.put("test", "hello");
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("startToEnd", varMap);
     assertProcessEnded(processInstance.getId());
-    Map<String, Object> returnVarMap = ((ExecutionEntity) processInstance).getVariableValues();
+    Map<String, Object> returnVarMap = ((ExecutionEntity) processInstance).getVariables();
     assertEquals("hello", returnVarMap.get("test"));
     assertEquals("string", returnVarMap.get("string"));
     assertEquals(true, returnVarMap.get("boolean"));
@@ -65,7 +65,7 @@ public void testStartProcessInstanceWithSerializbleVariables() {
     varMap.put("test", "hello");
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("startToEnd", varMap);
     assertProcessEnded(processInstance.getId());
-    Map<String, Object> returnVarMap = ((ExecutionEntity) processInstance).getVariableValues();
+    Map<String, Object> returnVarMap = ((ExecutionEntity) processInstance).getVariables();
     assertEquals("hello", returnVarMap.get("test"));
     Person person1 = (Person) returnVarMap.get("person1");
     assertEquals("1", person1.getId());
diff --git a/modules/activiti-engine/src/test/java/org/activiti/engine/test/history/HistoricProcessInstanceTest.java b/modules/activiti-engine/src/test/java/org/activiti/engine/test/history/HistoricProcessInstanceTest.java
index 59ac451ffe3..680cad1c665 100644
--- a/modules/activiti-engine/src/test/java/org/activiti/engine/test/history/HistoricProcessInstanceTest.java
+++ b/modules/activiti-engine/src/test/java/org/activiti/engine/test/history/HistoricProcessInstanceTest.java
@@ -446,7 +446,7 @@ public void testHistoricProcessInstanceName() {
     String piName = "Customized Process Instance Name";
     ProcessInstanceBuilder builder = runtimeService.createProcessInstanceBuilder();
     builder.processDefinitionKey("oneTaskProcess");
-    builder.processInstanceName(piName);
+    builder.name(piName);
     ProcessInstance processInstance1 = builder.start();

     HistoricProcessInstance historicProcessInstance = historyService.createHistoricProcessInstanceQuery().processInstanceId(processInstance1.getProcessInstanceId()).singleResult();
diff --git a/modules/activiti-engine/src/test/resources/org/activiti/engine/test/api/variables/TransientVariablesTest.testSetTransientVariableInServiceTask.bpmn20.xml b/modules/activiti-engine/src/test/resources/org/activiti/engine/test/api/variables/TransientVariablesTest.testSetTransientVariableInServiceTask.bpmn20.xml
new file mode 100644
index 00000000000..0398ae36f97
--- /dev/null
+++ b/modules/activiti-engine/src/test/resources/org/activiti/engine/test/api/variables/TransientVariablesTest.testSetTransientVariableInServiceTask.bpmn20.xml
@@ -0,0 +1,20 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:activiti="http://activiti.org/bpmn" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:omgdc="http://www.omg.org/spec/DD/20100524/DC" xmlns:omgdi="http://www.omg.org/spec/DD/20100524/DI" typeLanguage="http://www.w3.org/2001/XMLSchema" expressionLanguage="http://www.w3.org/1999/XPath" targetNamespace="http://www.activiti.org/processdef" xmlns:modeler="http://activiti.com/modeler" modeler:version="1.0en" modeler:exportDateTime="20141210093416680" modeler:modelId="924474" modeler:modelVersion="1" modeler:modelLastUpdated="1418204052768">
+  <process id="transientVarsTest" isExecutable="true">
+
+    <startEvent id="theStart"/>
+    <sequenceFlow sourceRef="theStart" targetRef="serviceTask01"/>
+
+    <serviceTask id="serviceTask01" activiti:class="org.activiti.engine.test.api.variables.TransientVariablesTest$FetchDataServiceTask" />
+    <sequenceFlow sourceRef="serviceTask01" targetRef="serviceTask02"/>
+
+    <serviceTask id="serviceTask02" activiti:class="org.activiti.engine.test.api.variables.TransientVariablesTest$ServiceTask02" />
+    <sequenceFlow sourceRef="serviceTask02" targetRef="theUserTask"/>
+
+    <userTask id="theUserTask" />
+    <sequenceFlow sourceRef="theUserTask" targetRef="theEnd"/>
+
+    <endEvent id="theEnd" />
+
+  </process>
+</definitions>
\ No newline at end of file
diff --git a/modules/activiti-engine/src/test/resources/org/activiti/engine/test/api/variables/TransientVariablesTest.testStartProcessInstanceById.bpmn20.xml b/modules/activiti-engine/src/test/resources/org/activiti/engine/test/api/variables/TransientVariablesTest.testStartProcessInstanceById.bpmn20.xml
new file mode 100644
index 00000000000..3943fab46c3
--- /dev/null
+++ b/modules/activiti-engine/src/test/resources/org/activiti/engine/test/api/variables/TransientVariablesTest.testStartProcessInstanceById.bpmn20.xml
@@ -0,0 +1,146 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:activiti="http://activiti.org/bpmn" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:omgdc="http://www.omg.org/spec/DD/20100524/DC" xmlns:omgdi="http://www.omg.org/spec/DD/20100524/DI" typeLanguage="http://www.w3.org/2001/XMLSchema" expressionLanguage="http://www.w3.org/1999/XPath" targetNamespace="http://www.activiti.org/processdef" xmlns:modeler="http://activiti.com/modeler" modeler:version="1.0en" modeler:exportDateTime="20160823153328016" modeler:modelId="5" modeler:modelVersion="1" modeler:modelLastUpdated="1471959206008">
+  <process id="transientVarsTest" name="transientVarsTest" isExecutable="true">
+    <startEvent id="startEvent1">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[startEvent1]]></modeler:editor-resource-id>
+      </extensionElements>
+    </startEvent>
+    <exclusiveGateway id="sid-372939DC-8012-41DA-88D5-C7791CBAE872" default="sid-DEAF1635-AC1C-4876-B79D-D57E0B03E321">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-372939DC-8012-41DA-88D5-C7791CBAE872]]></modeler:editor-resource-id>
+      </extensionElements>
+    </exclusiveGateway>
+    <sequenceFlow id="sid-2C96D408-F45D-4381-B834-0CD5E853711A" sourceRef="startEvent1" targetRef="sid-372939DC-8012-41DA-88D5-C7791CBAE872">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-2C96D408-F45D-4381-B834-0CD5E853711A]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <userTask id="sid-47B5A6D9-F447-43EB-B95C-E06769DEEED9" name="A" activiti:assignee="$INITIATOR">
+      <extensionElements>
+        <modeler:allow-send-email><![CDATA[true]]></modeler:allow-send-email>
+        <modeler:activiti-idm-initiator><![CDATA[true]]></modeler:activiti-idm-initiator>
+        <modeler:editor-resource-id><![CDATA[sid-47B5A6D9-F447-43EB-B95C-E06769DEEED9]]></modeler:editor-resource-id>
+      </extensionElements>
+    </userTask>
+    <userTask id="sid-0AEB208C-84E3-4809-8569-21AD9E1A42B1" name="B" activiti:assignee="$INITIATOR">
+      <extensionElements>
+        <modeler:allow-send-email><![CDATA[true]]></modeler:allow-send-email>
+        <modeler:activiti-idm-initiator><![CDATA[true]]></modeler:activiti-idm-initiator>
+        <modeler:editor-resource-id><![CDATA[sid-0AEB208C-84E3-4809-8569-21AD9E1A42B1]]></modeler:editor-resource-id>
+      </extensionElements>
+    </userTask>
+    <userTask id="sid-D4A94019-AF3A-415B-9B3B-8E6050D41C11" name="Default" activiti:assignee="$INITIATOR">
+      <extensionElements>
+        <modeler:allow-send-email><![CDATA[true]]></modeler:allow-send-email>
+        <modeler:activiti-idm-initiator><![CDATA[true]]></modeler:activiti-idm-initiator>
+        <modeler:editor-resource-id><![CDATA[sid-D4A94019-AF3A-415B-9B3B-8E6050D41C11]]></modeler:editor-resource-id>
+      </extensionElements>
+    </userTask>
+    <endEvent id="sid-4CCE23AA-FEA7-4569-9103-6C3A8DD9AC25">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-4CCE23AA-FEA7-4569-9103-6C3A8DD9AC25]]></modeler:editor-resource-id>
+      </extensionElements>
+    </endEvent>
+    <sequenceFlow id="sid-FCA94FCA-915D-4DBE-935A-03F1F6FE1692" sourceRef="sid-47B5A6D9-F447-43EB-B95C-E06769DEEED9" targetRef="sid-4CCE23AA-FEA7-4569-9103-6C3A8DD9AC25">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-FCA94FCA-915D-4DBE-935A-03F1F6FE1692]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <endEvent id="sid-0E9F2534-282A-4E40-81B3-4DD2AF1D0ED5">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-0E9F2534-282A-4E40-81B3-4DD2AF1D0ED5]]></modeler:editor-resource-id>
+      </extensionElements>
+    </endEvent>
+    <sequenceFlow id="sid-FD498EB0-E9D2-4E85-885C-6793DDB659E4" sourceRef="sid-0AEB208C-84E3-4809-8569-21AD9E1A42B1" targetRef="sid-0E9F2534-282A-4E40-81B3-4DD2AF1D0ED5">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-FD498EB0-E9D2-4E85-885C-6793DDB659E4]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <endEvent id="sid-CB4513FA-17B6-4DED-889F-DA819A3AD117">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-CB4513FA-17B6-4DED-889F-DA819A3AD117]]></modeler:editor-resource-id>
+      </extensionElements>
+    </endEvent>
+    <sequenceFlow id="sid-1BEC387C-78B6-40E2-B5F1-F6D80CAAA197" sourceRef="sid-D4A94019-AF3A-415B-9B3B-8E6050D41C11" targetRef="sid-CB4513FA-17B6-4DED-889F-DA819A3AD117">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-1BEC387C-78B6-40E2-B5F1-F6D80CAAA197]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <sequenceFlow id="sid-DEAF1635-AC1C-4876-B79D-D57E0B03E321" sourceRef="sid-372939DC-8012-41DA-88D5-C7791CBAE872" targetRef="sid-D4A94019-AF3A-415B-9B3B-8E6050D41C11">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-DEAF1635-AC1C-4876-B79D-D57E0B03E321]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <sequenceFlow id="sid-08213970-42BF-4759-A928-DD76542A1C34" sourceRef="sid-372939DC-8012-41DA-88D5-C7791CBAE872" targetRef="sid-47B5A6D9-F447-43EB-B95C-E06769DEEED9">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-08213970-42BF-4759-A928-DD76542A1C34]]></modeler:editor-resource-id>
+      </extensionElements>
+      <conditionExpression xsi:type="tFormalExpression"><![CDATA[${variable == 'gotoA'}]]></conditionExpression>
+    </sequenceFlow>
+    <sequenceFlow id="sid-56AA9D7D-D07C-461A-BB49-BFB4A443A649" sourceRef="sid-372939DC-8012-41DA-88D5-C7791CBAE872" targetRef="sid-0AEB208C-84E3-4809-8569-21AD9E1A42B1">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-56AA9D7D-D07C-461A-BB49-BFB4A443A649]]></modeler:editor-resource-id>
+      </extensionElements>
+      <conditionExpression xsi:type="tFormalExpression"><![CDATA[${variable == 'gotoB'}]]></conditionExpression>
+    </sequenceFlow>
+  </process>
+  <bpmndi:BPMNDiagram id="BPMNDiagram_transientVarsTest">
+    <bpmndi:BPMNPlane bpmnElement="transientVarsTest" id="BPMNPlane_transientVarsTest">
+      <bpmndi:BPMNShape bpmnElement="startEvent1" id="BPMNShape_startEvent1">
+        <omgdc:Bounds height="30.0" width="30.0" x="75.0" y="330.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-372939DC-8012-41DA-88D5-C7791CBAE872" id="BPMNShape_sid-372939DC-8012-41DA-88D5-C7791CBAE872">
+        <omgdc:Bounds height="40.0" width="40.0" x="150.0" y="325.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-47B5A6D9-F447-43EB-B95C-E06769DEEED9" id="BPMNShape_sid-47B5A6D9-F447-43EB-B95C-E06769DEEED9">
+        <omgdc:Bounds height="80.0" width="100.0" x="300.0" y="165.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-0AEB208C-84E3-4809-8569-21AD9E1A42B1" id="BPMNShape_sid-0AEB208C-84E3-4809-8569-21AD9E1A42B1">
+        <omgdc:Bounds height="80.0" width="100.0" x="300.0" y="305.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-D4A94019-AF3A-415B-9B3B-8E6050D41C11" id="BPMNShape_sid-D4A94019-AF3A-415B-9B3B-8E6050D41C11">
+        <omgdc:Bounds height="80.0" width="100.0" x="300.0" y="435.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-4CCE23AA-FEA7-4569-9103-6C3A8DD9AC25" id="BPMNShape_sid-4CCE23AA-FEA7-4569-9103-6C3A8DD9AC25">
+        <omgdc:Bounds height="28.0" width="28.0" x="445.0" y="191.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-0E9F2534-282A-4E40-81B3-4DD2AF1D0ED5" id="BPMNShape_sid-0E9F2534-282A-4E40-81B3-4DD2AF1D0ED5">
+        <omgdc:Bounds height="28.0" width="28.0" x="445.0" y="331.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-CB4513FA-17B6-4DED-889F-DA819A3AD117" id="BPMNShape_sid-CB4513FA-17B6-4DED-889F-DA819A3AD117">
+        <omgdc:Bounds height="28.0" width="28.0" x="445.0" y="461.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNEdge bpmnElement="sid-1BEC387C-78B6-40E2-B5F1-F6D80CAAA197" id="BPMNEdge_sid-1BEC387C-78B6-40E2-B5F1-F6D80CAAA197">
+        <omgdi:waypoint x="400.0" y="475.0"/>
+        <omgdi:waypoint x="445.0" y="475.0"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-08213970-42BF-4759-A928-DD76542A1C34" id="BPMNEdge_sid-08213970-42BF-4759-A928-DD76542A1C34">
+        <omgdi:waypoint x="170.5" y="325.5"/>
+        <omgdi:waypoint x="170.5" y="205.0"/>
+        <omgdi:waypoint x="300.0" y="205.0"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-FCA94FCA-915D-4DBE-935A-03F1F6FE1692" id="BPMNEdge_sid-FCA94FCA-915D-4DBE-935A-03F1F6FE1692">
+        <omgdi:waypoint x="400.0" y="205.0"/>
+        <omgdi:waypoint x="445.0" y="205.0"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-2C96D408-F45D-4381-B834-0CD5E853711A" id="BPMNEdge_sid-2C96D408-F45D-4381-B834-0CD5E853711A">
+        <omgdi:waypoint x="104.99971066768252" y="345.0931659047682"/>
+        <omgdi:waypoint x="150.375" y="345.375"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-56AA9D7D-D07C-461A-BB49-BFB4A443A649" id="BPMNEdge_sid-56AA9D7D-D07C-461A-BB49-BFB4A443A649">
+        <omgdi:waypoint x="189.55307262569832" y="345.44692737430165"/>
+        <omgdi:waypoint x="300.0" y="345.1392757660167"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-FD498EB0-E9D2-4E85-885C-6793DDB659E4" id="BPMNEdge_sid-FD498EB0-E9D2-4E85-885C-6793DDB659E4">
+        <omgdi:waypoint x="400.0" y="345.0"/>
+        <omgdi:waypoint x="445.0" y="345.0"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-DEAF1635-AC1C-4876-B79D-D57E0B03E321" id="BPMNEdge_sid-DEAF1635-AC1C-4876-B79D-D57E0B03E321">
+        <omgdi:waypoint x="170.5" y="364.5"/>
+        <omgdi:waypoint x="170.5" y="475.0"/>
+        <omgdi:waypoint x="300.0" y="475.0"/>
+      </bpmndi:BPMNEdge>
+    </bpmndi:BPMNPlane>
+  </bpmndi:BPMNDiagram>
+</definitions>
\ No newline at end of file
diff --git a/modules/activiti-engine/src/test/resources/org/activiti/engine/test/api/variables/TransientVariablesTest.testStartProcessInstanceByKey.bpmn20.xml b/modules/activiti-engine/src/test/resources/org/activiti/engine/test/api/variables/TransientVariablesTest.testStartProcessInstanceByKey.bpmn20.xml
new file mode 100644
index 00000000000..3943fab46c3
--- /dev/null
+++ b/modules/activiti-engine/src/test/resources/org/activiti/engine/test/api/variables/TransientVariablesTest.testStartProcessInstanceByKey.bpmn20.xml
@@ -0,0 +1,146 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:activiti="http://activiti.org/bpmn" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:omgdc="http://www.omg.org/spec/DD/20100524/DC" xmlns:omgdi="http://www.omg.org/spec/DD/20100524/DI" typeLanguage="http://www.w3.org/2001/XMLSchema" expressionLanguage="http://www.w3.org/1999/XPath" targetNamespace="http://www.activiti.org/processdef" xmlns:modeler="http://activiti.com/modeler" modeler:version="1.0en" modeler:exportDateTime="20160823153328016" modeler:modelId="5" modeler:modelVersion="1" modeler:modelLastUpdated="1471959206008">
+  <process id="transientVarsTest" name="transientVarsTest" isExecutable="true">
+    <startEvent id="startEvent1">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[startEvent1]]></modeler:editor-resource-id>
+      </extensionElements>
+    </startEvent>
+    <exclusiveGateway id="sid-372939DC-8012-41DA-88D5-C7791CBAE872" default="sid-DEAF1635-AC1C-4876-B79D-D57E0B03E321">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-372939DC-8012-41DA-88D5-C7791CBAE872]]></modeler:editor-resource-id>
+      </extensionElements>
+    </exclusiveGateway>
+    <sequenceFlow id="sid-2C96D408-F45D-4381-B834-0CD5E853711A" sourceRef="startEvent1" targetRef="sid-372939DC-8012-41DA-88D5-C7791CBAE872">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-2C96D408-F45D-4381-B834-0CD5E853711A]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <userTask id="sid-47B5A6D9-F447-43EB-B95C-E06769DEEED9" name="A" activiti:assignee="$INITIATOR">
+      <extensionElements>
+        <modeler:allow-send-email><![CDATA[true]]></modeler:allow-send-email>
+        <modeler:activiti-idm-initiator><![CDATA[true]]></modeler:activiti-idm-initiator>
+        <modeler:editor-resource-id><![CDATA[sid-47B5A6D9-F447-43EB-B95C-E06769DEEED9]]></modeler:editor-resource-id>
+      </extensionElements>
+    </userTask>
+    <userTask id="sid-0AEB208C-84E3-4809-8569-21AD9E1A42B1" name="B" activiti:assignee="$INITIATOR">
+      <extensionElements>
+        <modeler:allow-send-email><![CDATA[true]]></modeler:allow-send-email>
+        <modeler:activiti-idm-initiator><![CDATA[true]]></modeler:activiti-idm-initiator>
+        <modeler:editor-resource-id><![CDATA[sid-0AEB208C-84E3-4809-8569-21AD9E1A42B1]]></modeler:editor-resource-id>
+      </extensionElements>
+    </userTask>
+    <userTask id="sid-D4A94019-AF3A-415B-9B3B-8E6050D41C11" name="Default" activiti:assignee="$INITIATOR">
+      <extensionElements>
+        <modeler:allow-send-email><![CDATA[true]]></modeler:allow-send-email>
+        <modeler:activiti-idm-initiator><![CDATA[true]]></modeler:activiti-idm-initiator>
+        <modeler:editor-resource-id><![CDATA[sid-D4A94019-AF3A-415B-9B3B-8E6050D41C11]]></modeler:editor-resource-id>
+      </extensionElements>
+    </userTask>
+    <endEvent id="sid-4CCE23AA-FEA7-4569-9103-6C3A8DD9AC25">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-4CCE23AA-FEA7-4569-9103-6C3A8DD9AC25]]></modeler:editor-resource-id>
+      </extensionElements>
+    </endEvent>
+    <sequenceFlow id="sid-FCA94FCA-915D-4DBE-935A-03F1F6FE1692" sourceRef="sid-47B5A6D9-F447-43EB-B95C-E06769DEEED9" targetRef="sid-4CCE23AA-FEA7-4569-9103-6C3A8DD9AC25">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-FCA94FCA-915D-4DBE-935A-03F1F6FE1692]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <endEvent id="sid-0E9F2534-282A-4E40-81B3-4DD2AF1D0ED5">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-0E9F2534-282A-4E40-81B3-4DD2AF1D0ED5]]></modeler:editor-resource-id>
+      </extensionElements>
+    </endEvent>
+    <sequenceFlow id="sid-FD498EB0-E9D2-4E85-885C-6793DDB659E4" sourceRef="sid-0AEB208C-84E3-4809-8569-21AD9E1A42B1" targetRef="sid-0E9F2534-282A-4E40-81B3-4DD2AF1D0ED5">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-FD498EB0-E9D2-4E85-885C-6793DDB659E4]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <endEvent id="sid-CB4513FA-17B6-4DED-889F-DA819A3AD117">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-CB4513FA-17B6-4DED-889F-DA819A3AD117]]></modeler:editor-resource-id>
+      </extensionElements>
+    </endEvent>
+    <sequenceFlow id="sid-1BEC387C-78B6-40E2-B5F1-F6D80CAAA197" sourceRef="sid-D4A94019-AF3A-415B-9B3B-8E6050D41C11" targetRef="sid-CB4513FA-17B6-4DED-889F-DA819A3AD117">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-1BEC387C-78B6-40E2-B5F1-F6D80CAAA197]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <sequenceFlow id="sid-DEAF1635-AC1C-4876-B79D-D57E0B03E321" sourceRef="sid-372939DC-8012-41DA-88D5-C7791CBAE872" targetRef="sid-D4A94019-AF3A-415B-9B3B-8E6050D41C11">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-DEAF1635-AC1C-4876-B79D-D57E0B03E321]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <sequenceFlow id="sid-08213970-42BF-4759-A928-DD76542A1C34" sourceRef="sid-372939DC-8012-41DA-88D5-C7791CBAE872" targetRef="sid-47B5A6D9-F447-43EB-B95C-E06769DEEED9">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-08213970-42BF-4759-A928-DD76542A1C34]]></modeler:editor-resource-id>
+      </extensionElements>
+      <conditionExpression xsi:type="tFormalExpression"><![CDATA[${variable == 'gotoA'}]]></conditionExpression>
+    </sequenceFlow>
+    <sequenceFlow id="sid-56AA9D7D-D07C-461A-BB49-BFB4A443A649" sourceRef="sid-372939DC-8012-41DA-88D5-C7791CBAE872" targetRef="sid-0AEB208C-84E3-4809-8569-21AD9E1A42B1">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-56AA9D7D-D07C-461A-BB49-BFB4A443A649]]></modeler:editor-resource-id>
+      </extensionElements>
+      <conditionExpression xsi:type="tFormalExpression"><![CDATA[${variable == 'gotoB'}]]></conditionExpression>
+    </sequenceFlow>
+  </process>
+  <bpmndi:BPMNDiagram id="BPMNDiagram_transientVarsTest">
+    <bpmndi:BPMNPlane bpmnElement="transientVarsTest" id="BPMNPlane_transientVarsTest">
+      <bpmndi:BPMNShape bpmnElement="startEvent1" id="BPMNShape_startEvent1">
+        <omgdc:Bounds height="30.0" width="30.0" x="75.0" y="330.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-372939DC-8012-41DA-88D5-C7791CBAE872" id="BPMNShape_sid-372939DC-8012-41DA-88D5-C7791CBAE872">
+        <omgdc:Bounds height="40.0" width="40.0" x="150.0" y="325.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-47B5A6D9-F447-43EB-B95C-E06769DEEED9" id="BPMNShape_sid-47B5A6D9-F447-43EB-B95C-E06769DEEED9">
+        <omgdc:Bounds height="80.0" width="100.0" x="300.0" y="165.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-0AEB208C-84E3-4809-8569-21AD9E1A42B1" id="BPMNShape_sid-0AEB208C-84E3-4809-8569-21AD9E1A42B1">
+        <omgdc:Bounds height="80.0" width="100.0" x="300.0" y="305.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-D4A94019-AF3A-415B-9B3B-8E6050D41C11" id="BPMNShape_sid-D4A94019-AF3A-415B-9B3B-8E6050D41C11">
+        <omgdc:Bounds height="80.0" width="100.0" x="300.0" y="435.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-4CCE23AA-FEA7-4569-9103-6C3A8DD9AC25" id="BPMNShape_sid-4CCE23AA-FEA7-4569-9103-6C3A8DD9AC25">
+        <omgdc:Bounds height="28.0" width="28.0" x="445.0" y="191.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-0E9F2534-282A-4E40-81B3-4DD2AF1D0ED5" id="BPMNShape_sid-0E9F2534-282A-4E40-81B3-4DD2AF1D0ED5">
+        <omgdc:Bounds height="28.0" width="28.0" x="445.0" y="331.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-CB4513FA-17B6-4DED-889F-DA819A3AD117" id="BPMNShape_sid-CB4513FA-17B6-4DED-889F-DA819A3AD117">
+        <omgdc:Bounds height="28.0" width="28.0" x="445.0" y="461.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNEdge bpmnElement="sid-1BEC387C-78B6-40E2-B5F1-F6D80CAAA197" id="BPMNEdge_sid-1BEC387C-78B6-40E2-B5F1-F6D80CAAA197">
+        <omgdi:waypoint x="400.0" y="475.0"/>
+        <omgdi:waypoint x="445.0" y="475.0"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-08213970-42BF-4759-A928-DD76542A1C34" id="BPMNEdge_sid-08213970-42BF-4759-A928-DD76542A1C34">
+        <omgdi:waypoint x="170.5" y="325.5"/>
+        <omgdi:waypoint x="170.5" y="205.0"/>
+        <omgdi:waypoint x="300.0" y="205.0"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-FCA94FCA-915D-4DBE-935A-03F1F6FE1692" id="BPMNEdge_sid-FCA94FCA-915D-4DBE-935A-03F1F6FE1692">
+        <omgdi:waypoint x="400.0" y="205.0"/>
+        <omgdi:waypoint x="445.0" y="205.0"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-2C96D408-F45D-4381-B834-0CD5E853711A" id="BPMNEdge_sid-2C96D408-F45D-4381-B834-0CD5E853711A">
+        <omgdi:waypoint x="104.99971066768252" y="345.0931659047682"/>
+        <omgdi:waypoint x="150.375" y="345.375"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-56AA9D7D-D07C-461A-BB49-BFB4A443A649" id="BPMNEdge_sid-56AA9D7D-D07C-461A-BB49-BFB4A443A649">
+        <omgdi:waypoint x="189.55307262569832" y="345.44692737430165"/>
+        <omgdi:waypoint x="300.0" y="345.1392757660167"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-FD498EB0-E9D2-4E85-885C-6793DDB659E4" id="BPMNEdge_sid-FD498EB0-E9D2-4E85-885C-6793DDB659E4">
+        <omgdi:waypoint x="400.0" y="345.0"/>
+        <omgdi:waypoint x="445.0" y="345.0"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-DEAF1635-AC1C-4876-B79D-D57E0B03E321" id="BPMNEdge_sid-DEAF1635-AC1C-4876-B79D-D57E0B03E321">
+        <omgdi:waypoint x="170.5" y="364.5"/>
+        <omgdi:waypoint x="170.5" y="475.0"/>
+        <omgdi:waypoint x="300.0" y="475.0"/>
+      </bpmndi:BPMNEdge>
+    </bpmndi:BPMNPlane>
+  </bpmndi:BPMNDiagram>
+</definitions>
\ No newline at end of file
diff --git a/modules/activiti-engine/src/test/resources/org/activiti/engine/test/api/variables/TransientVariablesTest.testStartProcessInstanceByMessage.bpmn20.xml b/modules/activiti-engine/src/test/resources/org/activiti/engine/test/api/variables/TransientVariablesTest.testStartProcessInstanceByMessage.bpmn20.xml
new file mode 100644
index 00000000000..a1d9568d303
--- /dev/null
+++ b/modules/activiti-engine/src/test/resources/org/activiti/engine/test/api/variables/TransientVariablesTest.testStartProcessInstanceByMessage.bpmn20.xml
@@ -0,0 +1,148 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:activiti="http://activiti.org/bpmn" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:omgdc="http://www.omg.org/spec/DD/20100524/DC" xmlns:omgdi="http://www.omg.org/spec/DD/20100524/DI" typeLanguage="http://www.w3.org/2001/XMLSchema" expressionLanguage="http://www.w3.org/1999/XPath" targetNamespace="http://www.activiti.org/processdef" xmlns:modeler="http://activiti.com/modeler" modeler:version="1.0en" modeler:exportDateTime="20160823153904827" modeler:modelId="5" modeler:modelVersion="1" modeler:modelLastUpdated="1471959542634">
+  <message id="myMessage" name="myMessage"/>
+  <process id="transientVarsTest" name="transientVarsTest" isExecutable="true">
+    <exclusiveGateway id="sid-372939DC-8012-41DA-88D5-C7791CBAE872" default="sid-DEAF1635-AC1C-4876-B79D-D57E0B03E321">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-372939DC-8012-41DA-88D5-C7791CBAE872]]></modeler:editor-resource-id>
+      </extensionElements>
+    </exclusiveGateway>
+    <sequenceFlow id="sid-2C96D408-F45D-4381-B834-0CD5E853711A" sourceRef="sid-F5CD5F75-729C-4C09-84AE-33A2A65CE41B" targetRef="sid-372939DC-8012-41DA-88D5-C7791CBAE872">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-2C96D408-F45D-4381-B834-0CD5E853711A]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <userTask id="sid-47B5A6D9-F447-43EB-B95C-E06769DEEED9" name="A" activiti:assignee="$INITIATOR">
+      <extensionElements>
+        <modeler:allow-send-email><![CDATA[true]]></modeler:allow-send-email>
+        <modeler:activiti-idm-initiator><![CDATA[true]]></modeler:activiti-idm-initiator>
+        <modeler:editor-resource-id><![CDATA[sid-47B5A6D9-F447-43EB-B95C-E06769DEEED9]]></modeler:editor-resource-id>
+      </extensionElements>
+    </userTask>
+    <userTask id="sid-0AEB208C-84E3-4809-8569-21AD9E1A42B1" name="B" activiti:assignee="$INITIATOR">
+      <extensionElements>
+        <modeler:allow-send-email><![CDATA[true]]></modeler:allow-send-email>
+        <modeler:activiti-idm-initiator><![CDATA[true]]></modeler:activiti-idm-initiator>
+        <modeler:editor-resource-id><![CDATA[sid-0AEB208C-84E3-4809-8569-21AD9E1A42B1]]></modeler:editor-resource-id>
+      </extensionElements>
+    </userTask>
+    <userTask id="sid-D4A94019-AF3A-415B-9B3B-8E6050D41C11" name="Default" activiti:assignee="$INITIATOR">
+      <extensionElements>
+        <modeler:allow-send-email><![CDATA[true]]></modeler:allow-send-email>
+        <modeler:activiti-idm-initiator><![CDATA[true]]></modeler:activiti-idm-initiator>
+        <modeler:editor-resource-id><![CDATA[sid-D4A94019-AF3A-415B-9B3B-8E6050D41C11]]></modeler:editor-resource-id>
+      </extensionElements>
+    </userTask>
+    <endEvent id="sid-4CCE23AA-FEA7-4569-9103-6C3A8DD9AC25">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-4CCE23AA-FEA7-4569-9103-6C3A8DD9AC25]]></modeler:editor-resource-id>
+      </extensionElements>
+    </endEvent>
+    <sequenceFlow id="sid-FCA94FCA-915D-4DBE-935A-03F1F6FE1692" sourceRef="sid-47B5A6D9-F447-43EB-B95C-E06769DEEED9" targetRef="sid-4CCE23AA-FEA7-4569-9103-6C3A8DD9AC25">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-FCA94FCA-915D-4DBE-935A-03F1F6FE1692]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <endEvent id="sid-0E9F2534-282A-4E40-81B3-4DD2AF1D0ED5">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-0E9F2534-282A-4E40-81B3-4DD2AF1D0ED5]]></modeler:editor-resource-id>
+      </extensionElements>
+    </endEvent>
+    <sequenceFlow id="sid-FD498EB0-E9D2-4E85-885C-6793DDB659E4" sourceRef="sid-0AEB208C-84E3-4809-8569-21AD9E1A42B1" targetRef="sid-0E9F2534-282A-4E40-81B3-4DD2AF1D0ED5">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-FD498EB0-E9D2-4E85-885C-6793DDB659E4]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <endEvent id="sid-CB4513FA-17B6-4DED-889F-DA819A3AD117">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-CB4513FA-17B6-4DED-889F-DA819A3AD117]]></modeler:editor-resource-id>
+      </extensionElements>
+    </endEvent>
+    <sequenceFlow id="sid-1BEC387C-78B6-40E2-B5F1-F6D80CAAA197" sourceRef="sid-D4A94019-AF3A-415B-9B3B-8E6050D41C11" targetRef="sid-CB4513FA-17B6-4DED-889F-DA819A3AD117">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-1BEC387C-78B6-40E2-B5F1-F6D80CAAA197]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <sequenceFlow id="sid-DEAF1635-AC1C-4876-B79D-D57E0B03E321" sourceRef="sid-372939DC-8012-41DA-88D5-C7791CBAE872" targetRef="sid-D4A94019-AF3A-415B-9B3B-8E6050D41C11">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-DEAF1635-AC1C-4876-B79D-D57E0B03E321]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <sequenceFlow id="sid-08213970-42BF-4759-A928-DD76542A1C34" sourceRef="sid-372939DC-8012-41DA-88D5-C7791CBAE872" targetRef="sid-47B5A6D9-F447-43EB-B95C-E06769DEEED9">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-08213970-42BF-4759-A928-DD76542A1C34]]></modeler:editor-resource-id>
+      </extensionElements>
+      <conditionExpression xsi:type="tFormalExpression"><![CDATA[${variable == 'gotoA'}]]></conditionExpression>
+    </sequenceFlow>
+    <sequenceFlow id="sid-56AA9D7D-D07C-461A-BB49-BFB4A443A649" sourceRef="sid-372939DC-8012-41DA-88D5-C7791CBAE872" targetRef="sid-0AEB208C-84E3-4809-8569-21AD9E1A42B1">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-56AA9D7D-D07C-461A-BB49-BFB4A443A649]]></modeler:editor-resource-id>
+      </extensionElements>
+      <conditionExpression xsi:type="tFormalExpression"><![CDATA[${variable == 'gotoB'}]]></conditionExpression>
+    </sequenceFlow>
+    <startEvent id="sid-F5CD5F75-729C-4C09-84AE-33A2A65CE41B">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-F5CD5F75-729C-4C09-84AE-33A2A65CE41B]]></modeler:editor-resource-id>
+      </extensionElements>
+      <messageEventDefinition messageRef="myMessage"/>
+    </startEvent>
+  </process>
+  <bpmndi:BPMNDiagram id="BPMNDiagram_transientVarsTest">
+    <bpmndi:BPMNPlane bpmnElement="transientVarsTest" id="BPMNPlane_transientVarsTest">
+      <bpmndi:BPMNShape bpmnElement="sid-372939DC-8012-41DA-88D5-C7791CBAE872" id="BPMNShape_sid-372939DC-8012-41DA-88D5-C7791CBAE872">
+        <omgdc:Bounds height="40.0" width="40.0" x="150.0" y="325.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-47B5A6D9-F447-43EB-B95C-E06769DEEED9" id="BPMNShape_sid-47B5A6D9-F447-43EB-B95C-E06769DEEED9">
+        <omgdc:Bounds height="80.0" width="100.0" x="300.0" y="165.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-0AEB208C-84E3-4809-8569-21AD9E1A42B1" id="BPMNShape_sid-0AEB208C-84E3-4809-8569-21AD9E1A42B1">
+        <omgdc:Bounds height="80.0" width="100.0" x="300.0" y="305.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-D4A94019-AF3A-415B-9B3B-8E6050D41C11" id="BPMNShape_sid-D4A94019-AF3A-415B-9B3B-8E6050D41C11">
+        <omgdc:Bounds height="80.0" width="100.0" x="300.0" y="435.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-4CCE23AA-FEA7-4569-9103-6C3A8DD9AC25" id="BPMNShape_sid-4CCE23AA-FEA7-4569-9103-6C3A8DD9AC25">
+        <omgdc:Bounds height="28.0" width="28.0" x="445.0" y="191.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-0E9F2534-282A-4E40-81B3-4DD2AF1D0ED5" id="BPMNShape_sid-0E9F2534-282A-4E40-81B3-4DD2AF1D0ED5">
+        <omgdc:Bounds height="28.0" width="28.0" x="445.0" y="331.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-CB4513FA-17B6-4DED-889F-DA819A3AD117" id="BPMNShape_sid-CB4513FA-17B6-4DED-889F-DA819A3AD117">
+        <omgdc:Bounds height="28.0" width="28.0" x="445.0" y="461.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-F5CD5F75-729C-4C09-84AE-33A2A65CE41B" id="BPMNShape_sid-F5CD5F75-729C-4C09-84AE-33A2A65CE41B">
+        <omgdc:Bounds height="30.0" width="30.5" x="59.75" y="330.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNEdge bpmnElement="sid-1BEC387C-78B6-40E2-B5F1-F6D80CAAA197" id="BPMNEdge_sid-1BEC387C-78B6-40E2-B5F1-F6D80CAAA197">
+        <omgdi:waypoint x="400.0" y="475.0"/>
+        <omgdi:waypoint x="445.0" y="475.0"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-08213970-42BF-4759-A928-DD76542A1C34" id="BPMNEdge_sid-08213970-42BF-4759-A928-DD76542A1C34">
+        <omgdi:waypoint x="170.5" y="325.5"/>
+        <omgdi:waypoint x="170.5" y="205.0"/>
+        <omgdi:waypoint x="300.0" y="205.0"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-FCA94FCA-915D-4DBE-935A-03F1F6FE1692" id="BPMNEdge_sid-FCA94FCA-915D-4DBE-935A-03F1F6FE1692">
+        <omgdi:waypoint x="400.0" y="205.0"/>
+        <omgdi:waypoint x="445.0" y="205.0"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-2C96D408-F45D-4381-B834-0CD5E853711A" id="BPMNEdge_sid-2C96D408-F45D-4381-B834-0CD5E853711A">
+        <omgdi:waypoint x="90.24979099138609" y="345.07984183765126"/>
+        <omgdi:waypoint x="150.39473684210526" y="345.39473684210526"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-56AA9D7D-D07C-461A-BB49-BFB4A443A649" id="BPMNEdge_sid-56AA9D7D-D07C-461A-BB49-BFB4A443A649">
+        <omgdi:waypoint x="189.55307262569832" y="345.44692737430165"/>
+        <omgdi:waypoint x="300.0" y="345.1392757660167"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-FD498EB0-E9D2-4E85-885C-6793DDB659E4" id="BPMNEdge_sid-FD498EB0-E9D2-4E85-885C-6793DDB659E4">
+        <omgdi:waypoint x="400.0" y="345.0"/>
+        <omgdi:waypoint x="445.0" y="345.0"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-DEAF1635-AC1C-4876-B79D-D57E0B03E321" id="BPMNEdge_sid-DEAF1635-AC1C-4876-B79D-D57E0B03E321">
+        <omgdi:waypoint x="170.5" y="364.5"/>
+        <omgdi:waypoint x="170.5" y="475.0"/>
+        <omgdi:waypoint x="300.0" y="475.0"/>
+      </bpmndi:BPMNEdge>
+    </bpmndi:BPMNPlane>
+  </bpmndi:BPMNDiagram>
+</definitions>
\ No newline at end of file
diff --git a/modules/activiti-engine/src/test/resources/org/activiti/engine/test/api/variables/TransientVariablesTest.testTaskCompleteWithTransientVariables.bpmn20.xml b/modules/activiti-engine/src/test/resources/org/activiti/engine/test/api/variables/TransientVariablesTest.testTaskCompleteWithTransientVariables.bpmn20.xml
new file mode 100644
index 00000000000..75ddae303a9
--- /dev/null
+++ b/modules/activiti-engine/src/test/resources/org/activiti/engine/test/api/variables/TransientVariablesTest.testTaskCompleteWithTransientVariables.bpmn20.xml
@@ -0,0 +1,87 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:activiti="http://activiti.org/bpmn" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:omgdc="http://www.omg.org/spec/DD/20100524/DC" xmlns:omgdi="http://www.omg.org/spec/DD/20100524/DI" typeLanguage="http://www.w3.org/2001/XMLSchema" expressionLanguage="http://www.w3.org/1999/XPath" targetNamespace="http://www.activiti.org/processdef" xmlns:modeler="http://activiti.com/modeler" modeler:version="1.0en" modeler:exportDateTime="20160822151517782" modeler:modelId="1" modeler:modelVersion="1" modeler:modelLastUpdated="1471871715697">
+  <process id="transientVarsTest" name="transientVarsTest" isExecutable="true">
+    <startEvent id="startEvent1">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[startEvent1]]></modeler:editor-resource-id>
+      </extensionElements>
+    </startEvent>
+    <userTask id="sid-69454AAD-0322-4A27-A659-F64FF39D4610" name="My Task" activiti:assignee="$INITIATOR">
+      <extensionElements>
+        <modeler:allow-send-email><![CDATA[true]]></modeler:allow-send-email>
+        <modeler:activiti-idm-initiator><![CDATA[true]]></modeler:activiti-idm-initiator>
+        <modeler:editor-resource-id><![CDATA[sid-69454AAD-0322-4A27-A659-F64FF39D4610]]></modeler:editor-resource-id>
+      </extensionElements>
+    </userTask>
+    <sequenceFlow id="sid-2450CC62-0FE2-4B65-A3A4-283B3E505014" sourceRef="startEvent1" targetRef="sid-69454AAD-0322-4A27-A659-F64FF39D4610">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-2450CC62-0FE2-4B65-A3A4-283B3E505014]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <exclusiveGateway id="sid-403B6285-6510-4960-87A0-FC041B2E7301" default="sid-37B85BD0-57CD-4B81-A45D-046FF8D1498D">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-403B6285-6510-4960-87A0-FC041B2E7301]]></modeler:editor-resource-id>
+      </extensionElements>
+    </exclusiveGateway>
+    <sequenceFlow id="sid-A0FA6B83-37EC-4B8D-BD6B-6A622AB36251" sourceRef="sid-69454AAD-0322-4A27-A659-F64FF39D4610" targetRef="sid-403B6285-6510-4960-87A0-FC041B2E7301">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-A0FA6B83-37EC-4B8D-BD6B-6A622AB36251]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <scriptTask id="sid-30D22945-EC22-403B-B0B3-CB28EFDDD68E" name="Set more transient vars" scriptFormat="javascript" activiti:autoStoreVariables="false">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-30D22945-EC22-403B-B0B3-CB28EFDDD68E]]></modeler:editor-resource-id>
+      </extensionElements>
+      <script><![CDATA[execution.removeTransientVariable("unusedTransientVar");
+execution.setTransientVariable("secondTransientVar", "ABC");
+execution.setTransientVariable("thirdTransientVar", 123);
+]]></script>
+    </scriptTask>
+    <userTask id="sid-EDC9427E-EDEE-4938-B1E1-987179DF6D59" name="Other task" activiti:assignee="$INITIATOR">
+      <extensionElements>
+        <modeler:allow-send-email><![CDATA[true]]></modeler:allow-send-email>
+        <modeler:activiti-idm-initiator><![CDATA[true]]></modeler:activiti-idm-initiator>
+        <modeler:editor-resource-id><![CDATA[sid-EDC9427E-EDEE-4938-B1E1-987179DF6D59]]></modeler:editor-resource-id>
+      </extensionElements>
+    </userTask>
+    <userTask id="sid-26433ACD-BBC8-4642-9AEA-2BBB096943BE" name="Final task" activiti:assignee="$INITIATOR">
+      <extensionElements>
+        <modeler:allow-send-email><![CDATA[true]]></modeler:allow-send-email>
+        <modeler:activiti-idm-initiator><![CDATA[true]]></modeler:activiti-idm-initiator>
+        <modeler:editor-resource-id><![CDATA[sid-26433ACD-BBC8-4642-9AEA-2BBB096943BE]]></modeler:editor-resource-id>
+      </extensionElements>
+    </userTask>
+    <sequenceFlow id="sid-A4BA280B-63D8-4BED-907F-17DE1106CA4C" sourceRef="sid-EDC9427E-EDEE-4938-B1E1-987179DF6D59" targetRef="sid-26433ACD-BBC8-4642-9AEA-2BBB096943BE">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-A4BA280B-63D8-4BED-907F-17DE1106CA4C]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <endEvent id="sid-D382A7CE-420A-42BA-BB11-CB68224080DE">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-D382A7CE-420A-42BA-BB11-CB68224080DE]]></modeler:editor-resource-id>
+      </extensionElements>
+    </endEvent>
+    <sequenceFlow id="sid-890EE71D-1243-4AE0-A7AA-A64CB0F67A40" sourceRef="sid-26433ACD-BBC8-4642-9AEA-2BBB096943BE" targetRef="sid-D382A7CE-420A-42BA-BB11-CB68224080DE">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-890EE71D-1243-4AE0-A7AA-A64CB0F67A40]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <sequenceFlow id="sid-C2AEA284-50F0-4BB5-9DD2-4BD26F5C33D8" sourceRef="sid-403B6285-6510-4960-87A0-FC041B2E7301" targetRef="sid-30D22945-EC22-403B-B0B3-CB28EFDDD68E">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-C2AEA284-50F0-4BB5-9DD2-4BD26F5C33D8]]></modeler:editor-resource-id>
+      </extensionElements>
+      <conditionExpression xsi:type="tFormalExpression"><![CDATA[${transientVar == 'OK'}]]></conditionExpression>
+    </sequenceFlow>
+    <sequenceFlow id="sid-37B85BD0-57CD-4B81-A45D-046FF8D1498D" sourceRef="sid-403B6285-6510-4960-87A0-FC041B2E7301" targetRef="sid-EDC9427E-EDEE-4938-B1E1-987179DF6D59">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-37B85BD0-57CD-4B81-A45D-046FF8D1498D]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <sequenceFlow id="sid-A873D0A9-CF0A-4F41-B192-53FA910DDB6F" sourceRef="sid-30D22945-EC22-403B-B0B3-CB28EFDDD68E" targetRef="sid-26433ACD-BBC8-4642-9AEA-2BBB096943BE">
+      <extensionElements>
+        <activiti:executionListener event="take" class="org.activiti.engine.test.api.variables.TransientVariablesTest$CombineVariablesExecutionListener"/>
+        <modeler:editor-resource-id><![CDATA[sid-A873D0A9-CF0A-4F41-B192-53FA910DDB6F]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+  </process>
+</definitions>
\ No newline at end of file
diff --git a/modules/activiti-engine/src/test/resources/org/activiti/engine/test/api/variables/TransientVariablesTest.testTaskListenerWithTransientVariables.bpmn20.xml b/modules/activiti-engine/src/test/resources/org/activiti/engine/test/api/variables/TransientVariablesTest.testTaskListenerWithTransientVariables.bpmn20.xml
new file mode 100644
index 00000000000..d089ecafc4e
--- /dev/null
+++ b/modules/activiti-engine/src/test/resources/org/activiti/engine/test/api/variables/TransientVariablesTest.testTaskListenerWithTransientVariables.bpmn20.xml
@@ -0,0 +1,221 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:activiti="http://activiti.org/bpmn" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:omgdc="http://www.omg.org/spec/DD/20100524/DC" xmlns:omgdi="http://www.omg.org/spec/DD/20100524/DI" typeLanguage="http://www.w3.org/2001/XMLSchema" expressionLanguage="http://www.w3.org/1999/XPath" targetNamespace="http://www.activiti.org/processdef" xmlns:modeler="http://activiti.com/modeler" modeler:version="1.0en" modeler:exportDateTime="20160823100446390" modeler:modelId="2" modeler:modelVersion="1" modeler:modelLastUpdated="1471939484069">
+  <process id="transientVarsTest" name="transientVarsTest" isExecutable="true">
+    <startEvent id="startEvent1">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[startEvent1]]></modeler:editor-resource-id>
+      </extensionElements>
+    </startEvent>
+    <sequenceFlow id="sid-A2AF8094-A203-4484-AA8F-08FCCFF25117" sourceRef="startEvent1" targetRef="sid-BE57B450-5727-4197-8F54-224ED5954DA0">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-A2AF8094-A203-4484-AA8F-08FCCFF25117]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <parallelGateway id="sid-BE57B450-5727-4197-8F54-224ED5954DA0">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-BE57B450-5727-4197-8F54-224ED5954DA0]]></modeler:editor-resource-id>
+      </extensionElements>
+    </parallelGateway>
+    <sequenceFlow id="sid-1260F436-7722-4185-8CFD-AFEFB5336907" sourceRef="sid-BE57B450-5727-4197-8F54-224ED5954DA0" targetRef="sid-35E15B47-6F0D-453B-A492-B4C0441D2AFD">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-1260F436-7722-4185-8CFD-AFEFB5336907]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <serviceTask id="sid-35E15B47-6F0D-453B-A492-B4C0441D2AFD" name="Get Data 01" activiti:class="org.activiti.engine.test.api.variables.TransientVariablesTest$GetDataDelegate">
+      <extensionElements>
+        <activiti:field name="variableName" expression="transientVar01"/>
+        <modeler:editor-resource-id><![CDATA[sid-35E15B47-6F0D-453B-A492-B4C0441D2AFD]]></modeler:editor-resource-id>
+      </extensionElements>
+    </serviceTask>
+    <serviceTask id="sid-21FE5280-FB03-48BF-809F-EA26109CB52B" name="Get Data 02" activiti:class="org.activiti.engine.test.api.variables.TransientVariablesTest$GetDataDelegate">
+      <extensionElements>
+        <activiti:field name="variableName" expression="transientVar02"/>
+        <modeler:editor-resource-id><![CDATA[sid-21FE5280-FB03-48BF-809F-EA26109CB52B]]></modeler:editor-resource-id>
+      </extensionElements>
+    </serviceTask>
+    <sequenceFlow id="sid-9A5BE2F7-FA40-4A53-88B7-993B7FC96F13" sourceRef="sid-BE57B450-5727-4197-8F54-224ED5954DA0" targetRef="sid-21FE5280-FB03-48BF-809F-EA26109CB52B">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-9A5BE2F7-FA40-4A53-88B7-993B7FC96F13]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <serviceTask id="sid-B518166B-5F8E-4CF4-AB0B-75B477303733" name="Process Data 01" activiti:class="org.activiti.engine.test.api.variables.TransientVariablesTest$ProcessDataDelegate">
+      <extensionElements>
+        <activiti:field name="dataVariableName" expression="transientVar01"/>
+        <activiti:field name="resultVariableName" expression="transientResult01"/>
+        <modeler:editor-resource-id><![CDATA[sid-B518166B-5F8E-4CF4-AB0B-75B477303733]]></modeler:editor-resource-id>
+      </extensionElements>
+    </serviceTask>
+    <sequenceFlow id="sid-7C165ED7-2BE5-4A92-B8B6-DB0721A7600B" sourceRef="sid-35E15B47-6F0D-453B-A492-B4C0441D2AFD" targetRef="sid-B518166B-5F8E-4CF4-AB0B-75B477303733">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-7C165ED7-2BE5-4A92-B8B6-DB0721A7600B]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <serviceTask id="sid-02D828E3-3F55-4E2D-A669-11E47FDB98AF" name="Process Data 02" activiti:class="org.activiti.engine.test.api.variables.TransientVariablesTest$ProcessDataDelegate">
+      <extensionElements>
+        <activiti:field name="dataVariableName" expression="transientVar02"/>
+        <activiti:field name="resultVariableName" expression="transientResult02"/>
+        <modeler:editor-resource-id><![CDATA[sid-02D828E3-3F55-4E2D-A669-11E47FDB98AF]]></modeler:editor-resource-id>
+      </extensionElements>
+    </serviceTask>
+    <sequenceFlow id="sid-5A9158BD-6931-421D-AC45-6509FAE91A4F" sourceRef="sid-21FE5280-FB03-48BF-809F-EA26109CB52B" targetRef="sid-02D828E3-3F55-4E2D-A669-11E47FDB98AF">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-5A9158BD-6931-421D-AC45-6509FAE91A4F]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <sequenceFlow id="sid-EA81C1C3-18EF-41D9-B696-D0AAB8E4F375" sourceRef="sid-B518166B-5F8E-4CF4-AB0B-75B477303733" targetRef="sid-826F2917-867A-4907-860B-39F5CD5FF595">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-EA81C1C3-18EF-41D9-B696-D0AAB8E4F375]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <parallelGateway id="sid-826F2917-867A-4907-860B-39F5CD5FF595">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-826F2917-867A-4907-860B-39F5CD5FF595]]></modeler:editor-resource-id>
+      </extensionElements>
+    </parallelGateway>
+    <sequenceFlow id="sid-8E68992D-C53A-4D8D-AFB7-11D637EB7048" sourceRef="sid-02D828E3-3F55-4E2D-A669-11E47FDB98AF" targetRef="sid-826F2917-867A-4907-860B-39F5CD5FF595">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-8E68992D-C53A-4D8D-AFB7-11D637EB7048]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <userTask id="sid-9347FB12-576C-44B6-A1D0-A3E44D55ADD3" name="Task after " activiti:assignee="$INITIATOR">
+      <extensionElements>
+        <activiti:taskListener event="create" class="org.activiti.engine.test.api.variables.TransientVariablesTest$MergeTransientVariablesTaskListener"/>
+        <modeler:allow-send-email><![CDATA[true]]></modeler:allow-send-email>
+        <modeler:activiti-idm-initiator><![CDATA[true]]></modeler:activiti-idm-initiator>
+        <modeler:editor-resource-id><![CDATA[sid-9347FB12-576C-44B6-A1D0-A3E44D55ADD3]]></modeler:editor-resource-id>
+      </extensionElements>
+    </userTask>
+    <sequenceFlow id="sid-1DFFBC06-AF98-4867-B590-E01A5EA6C9C3" sourceRef="sid-826F2917-867A-4907-860B-39F5CD5FF595" targetRef="sid-9347FB12-576C-44B6-A1D0-A3E44D55ADD3">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-1DFFBC06-AF98-4867-B590-E01A5EA6C9C3]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <serviceTask id="sid-94AB07A3-E6C9-4C70-AF99-C0D88DB78023" name="Get Data 03" activiti:class="org.activiti.engine.test.api.variables.TransientVariablesTest$GetDataDelegate">
+      <extensionElements>
+        <activiti:field name="variableName" expression="transientVar03"/>
+        <modeler:editor-resource-id><![CDATA[sid-94AB07A3-E6C9-4C70-AF99-C0D88DB78023]]></modeler:editor-resource-id>
+      </extensionElements>
+    </serviceTask>
+    <serviceTask id="sid-BF28B3E7-C1B7-4BB4-AB9D-BFBD7DC02F68" name="Process Data 03" activiti:class="org.activiti.engine.test.api.variables.TransientVariablesTest$ProcessDataDelegate">
+      <extensionElements>
+        <activiti:field name="dataVariableName" expression="transientVar03"/>
+        <activiti:field name="resultVariableName" expression="transientResult03"/>
+        <modeler:editor-resource-id><![CDATA[sid-BF28B3E7-C1B7-4BB4-AB9D-BFBD7DC02F68]]></modeler:editor-resource-id>
+      </extensionElements>
+    </serviceTask>
+    <sequenceFlow id="sid-CA8C0582-CED7-40DE-B8EE-EECE418B60AF" sourceRef="sid-BE57B450-5727-4197-8F54-224ED5954DA0" targetRef="sid-94AB07A3-E6C9-4C70-AF99-C0D88DB78023">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-CA8C0582-CED7-40DE-B8EE-EECE418B60AF]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <sequenceFlow id="sid-CAD62905-BCE0-4692-9F64-AE796B7238FA" sourceRef="sid-94AB07A3-E6C9-4C70-AF99-C0D88DB78023" targetRef="sid-BF28B3E7-C1B7-4BB4-AB9D-BFBD7DC02F68">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-CAD62905-BCE0-4692-9F64-AE796B7238FA]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <sequenceFlow id="sid-6E8A2226-F092-4446-9581-4DDA4ACBD881" sourceRef="sid-BF28B3E7-C1B7-4BB4-AB9D-BFBD7DC02F68" targetRef="sid-826F2917-867A-4907-860B-39F5CD5FF595">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-6E8A2226-F092-4446-9581-4DDA4ACBD881]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <endEvent id="sid-C8B893F1-DCDA-455E-B052-DA49910AEE75">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-C8B893F1-DCDA-455E-B052-DA49910AEE75]]></modeler:editor-resource-id>
+      </extensionElements>
+    </endEvent>
+    <sequenceFlow id="sid-CFB88154-92AD-4C4A-BF00-E88253414226" sourceRef="sid-9347FB12-576C-44B6-A1D0-A3E44D55ADD3" targetRef="sid-C8B893F1-DCDA-455E-B052-DA49910AEE75">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-CFB88154-92AD-4C4A-BF00-E88253414226]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+  </process>
+  <bpmndi:BPMNDiagram id="BPMNDiagram_transientVarsTest">
+    <bpmndi:BPMNPlane bpmnElement="transientVarsTest" id="BPMNPlane_transientVarsTest">
+      <bpmndi:BPMNShape bpmnElement="startEvent1" id="BPMNShape_startEvent1">
+        <omgdc:Bounds height="30.0" width="30.0" x="188.5" y="430.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-BE57B450-5727-4197-8F54-224ED5954DA0" id="BPMNShape_sid-BE57B450-5727-4197-8F54-224ED5954DA0">
+        <omgdc:Bounds height="40.0" width="40.0" x="278.5" y="425.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-35E15B47-6F0D-453B-A492-B4C0441D2AFD" id="BPMNShape_sid-35E15B47-6F0D-453B-A492-B4C0441D2AFD">
+        <omgdc:Bounds height="80.0" width="100.0" x="383.5" y="270.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-21FE5280-FB03-48BF-809F-EA26109CB52B" id="BPMNShape_sid-21FE5280-FB03-48BF-809F-EA26109CB52B">
+        <omgdc:Bounds height="80.0" width="100.0" x="383.5" y="405.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-B518166B-5F8E-4CF4-AB0B-75B477303733" id="BPMNShape_sid-B518166B-5F8E-4CF4-AB0B-75B477303733">
+        <omgdc:Bounds height="80.0" width="100.0" x="563.5" y="270.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-02D828E3-3F55-4E2D-A669-11E47FDB98AF" id="BPMNShape_sid-02D828E3-3F55-4E2D-A669-11E47FDB98AF">
+        <omgdc:Bounds height="80.0" width="100.0" x="563.5" y="405.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-826F2917-867A-4907-860B-39F5CD5FF595" id="BPMNShape_sid-826F2917-867A-4907-860B-39F5CD5FF595">
+        <omgdc:Bounds height="40.0" width="40.0" x="708.5" y="425.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-9347FB12-576C-44B6-A1D0-A3E44D55ADD3" id="BPMNShape_sid-9347FB12-576C-44B6-A1D0-A3E44D55ADD3">
+        <omgdc:Bounds height="80.0" width="100.0" x="803.5" y="405.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-94AB07A3-E6C9-4C70-AF99-C0D88DB78023" id="BPMNShape_sid-94AB07A3-E6C9-4C70-AF99-C0D88DB78023">
+        <omgdc:Bounds height="80.0" width="100.0" x="383.5" y="540.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-BF28B3E7-C1B7-4BB4-AB9D-BFBD7DC02F68" id="BPMNShape_sid-BF28B3E7-C1B7-4BB4-AB9D-BFBD7DC02F68">
+        <omgdc:Bounds height="80.0" width="100.0" x="563.5" y="540.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-C8B893F1-DCDA-455E-B052-DA49910AEE75" id="BPMNShape_sid-C8B893F1-DCDA-455E-B052-DA49910AEE75">
+        <omgdc:Bounds height="28.0" width="28.0" x="953.5" y="431.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNEdge bpmnElement="sid-A2AF8094-A203-4484-AA8F-08FCCFF25117" id="BPMNEdge_sid-A2AF8094-A203-4484-AA8F-08FCCFF25117">
+        <omgdi:waypoint x="218.49979441775682" y="445.0785329550668"/>
+        <omgdi:waypoint x="278.89473684210526" y="445.39473684210526"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-7C165ED7-2BE5-4A92-B8B6-DB0721A7600B" id="BPMNEdge_sid-7C165ED7-2BE5-4A92-B8B6-DB0721A7600B">
+        <omgdi:waypoint x="483.5" y="310.0"/>
+        <omgdi:waypoint x="563.5" y="310.0"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-9A5BE2F7-FA40-4A53-88B7-993B7FC96F13" id="BPMNEdge_sid-9A5BE2F7-FA40-4A53-88B7-993B7FC96F13">
+        <omgdi:waypoint x="318.07089552238807" y="445.42910447761193"/>
+        <omgdi:waypoint x="383.5" y="445.18587360594796"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-8E68992D-C53A-4D8D-AFB7-11D637EB7048" id="BPMNEdge_sid-8E68992D-C53A-4D8D-AFB7-11D637EB7048">
+        <omgdi:waypoint x="663.5" y="445.0"/>
+        <omgdi:waypoint x="708.5" y="445.0"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-CA8C0582-CED7-40DE-B8EE-EECE418B60AF" id="BPMNEdge_sid-CA8C0582-CED7-40DE-B8EE-EECE418B60AF">
+        <omgdi:waypoint x="299.0" y="464.5"/>
+        <omgdi:waypoint x="299.0" y="580.0"/>
+        <omgdi:waypoint x="383.5" y="580.0"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-6E8A2226-F092-4446-9581-4DDA4ACBD881" id="BPMNEdge_sid-6E8A2226-F092-4446-9581-4DDA4ACBD881">
+        <omgdi:waypoint x="663.5" y="580.0"/>
+        <omgdi:waypoint x="728.5" y="580.0"/>
+        <omgdi:waypoint x="728.5" y="465.0"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-EA81C1C3-18EF-41D9-B696-D0AAB8E4F375" id="BPMNEdge_sid-EA81C1C3-18EF-41D9-B696-D0AAB8E4F375">
+        <omgdi:waypoint x="663.5" y="310.0"/>
+        <omgdi:waypoint x="729.0" y="310.0"/>
+        <omgdi:waypoint x="729.0" y="425.5"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-1DFFBC06-AF98-4867-B590-E01A5EA6C9C3" id="BPMNEdge_sid-1DFFBC06-AF98-4867-B590-E01A5EA6C9C3">
+        <omgdi:waypoint x="748.0766129032259" y="445.4233870967742"/>
+        <omgdi:waypoint x="803.5" y="445.2008032128514"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-1260F436-7722-4185-8CFD-AFEFB5336907" id="BPMNEdge_sid-1260F436-7722-4185-8CFD-AFEFB5336907">
+        <omgdi:waypoint x="299.0" y="425.5"/>
+        <omgdi:waypoint x="299.0" y="310.0"/>
+        <omgdi:waypoint x="383.5" y="310.0"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-CFB88154-92AD-4C4A-BF00-E88253414226" id="BPMNEdge_sid-CFB88154-92AD-4C4A-BF00-E88253414226">
+        <omgdi:waypoint x="903.5" y="445.0"/>
+        <omgdi:waypoint x="953.5" y="445.0"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-CAD62905-BCE0-4692-9F64-AE796B7238FA" id="BPMNEdge_sid-CAD62905-BCE0-4692-9F64-AE796B7238FA">
+        <omgdi:waypoint x="483.5" y="580.0"/>
+        <omgdi:waypoint x="563.5" y="580.0"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-5A9158BD-6931-421D-AC45-6509FAE91A4F" id="BPMNEdge_sid-5A9158BD-6931-421D-AC45-6509FAE91A4F">
+        <omgdi:waypoint x="483.5" y="445.0"/>
+        <omgdi:waypoint x="563.5" y="445.0"/>
+      </bpmndi:BPMNEdge>
+    </bpmndi:BPMNPlane>
+  </bpmndi:BPMNDiagram>
+</definitions>
\ No newline at end of file
diff --git a/modules/activiti-engine/src/test/resources/org/activiti/engine/test/api/variables/TransientVariablesTest.testTaskResolveWithTransientVariables.bpmn20.xml b/modules/activiti-engine/src/test/resources/org/activiti/engine/test/api/variables/TransientVariablesTest.testTaskResolveWithTransientVariables.bpmn20.xml
new file mode 100644
index 00000000000..75ddae303a9
--- /dev/null
+++ b/modules/activiti-engine/src/test/resources/org/activiti/engine/test/api/variables/TransientVariablesTest.testTaskResolveWithTransientVariables.bpmn20.xml
@@ -0,0 +1,87 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:activiti="http://activiti.org/bpmn" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:omgdc="http://www.omg.org/spec/DD/20100524/DC" xmlns:omgdi="http://www.omg.org/spec/DD/20100524/DI" typeLanguage="http://www.w3.org/2001/XMLSchema" expressionLanguage="http://www.w3.org/1999/XPath" targetNamespace="http://www.activiti.org/processdef" xmlns:modeler="http://activiti.com/modeler" modeler:version="1.0en" modeler:exportDateTime="20160822151517782" modeler:modelId="1" modeler:modelVersion="1" modeler:modelLastUpdated="1471871715697">
+  <process id="transientVarsTest" name="transientVarsTest" isExecutable="true">
+    <startEvent id="startEvent1">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[startEvent1]]></modeler:editor-resource-id>
+      </extensionElements>
+    </startEvent>
+    <userTask id="sid-69454AAD-0322-4A27-A659-F64FF39D4610" name="My Task" activiti:assignee="$INITIATOR">
+      <extensionElements>
+        <modeler:allow-send-email><![CDATA[true]]></modeler:allow-send-email>
+        <modeler:activiti-idm-initiator><![CDATA[true]]></modeler:activiti-idm-initiator>
+        <modeler:editor-resource-id><![CDATA[sid-69454AAD-0322-4A27-A659-F64FF39D4610]]></modeler:editor-resource-id>
+      </extensionElements>
+    </userTask>
+    <sequenceFlow id="sid-2450CC62-0FE2-4B65-A3A4-283B3E505014" sourceRef="startEvent1" targetRef="sid-69454AAD-0322-4A27-A659-F64FF39D4610">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-2450CC62-0FE2-4B65-A3A4-283B3E505014]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <exclusiveGateway id="sid-403B6285-6510-4960-87A0-FC041B2E7301" default="sid-37B85BD0-57CD-4B81-A45D-046FF8D1498D">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-403B6285-6510-4960-87A0-FC041B2E7301]]></modeler:editor-resource-id>
+      </extensionElements>
+    </exclusiveGateway>
+    <sequenceFlow id="sid-A0FA6B83-37EC-4B8D-BD6B-6A622AB36251" sourceRef="sid-69454AAD-0322-4A27-A659-F64FF39D4610" targetRef="sid-403B6285-6510-4960-87A0-FC041B2E7301">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-A0FA6B83-37EC-4B8D-BD6B-6A622AB36251]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <scriptTask id="sid-30D22945-EC22-403B-B0B3-CB28EFDDD68E" name="Set more transient vars" scriptFormat="javascript" activiti:autoStoreVariables="false">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-30D22945-EC22-403B-B0B3-CB28EFDDD68E]]></modeler:editor-resource-id>
+      </extensionElements>
+      <script><![CDATA[execution.removeTransientVariable("unusedTransientVar");
+execution.setTransientVariable("secondTransientVar", "ABC");
+execution.setTransientVariable("thirdTransientVar", 123);
+]]></script>
+    </scriptTask>
+    <userTask id="sid-EDC9427E-EDEE-4938-B1E1-987179DF6D59" name="Other task" activiti:assignee="$INITIATOR">
+      <extensionElements>
+        <modeler:allow-send-email><![CDATA[true]]></modeler:allow-send-email>
+        <modeler:activiti-idm-initiator><![CDATA[true]]></modeler:activiti-idm-initiator>
+        <modeler:editor-resource-id><![CDATA[sid-EDC9427E-EDEE-4938-B1E1-987179DF6D59]]></modeler:editor-resource-id>
+      </extensionElements>
+    </userTask>
+    <userTask id="sid-26433ACD-BBC8-4642-9AEA-2BBB096943BE" name="Final task" activiti:assignee="$INITIATOR">
+      <extensionElements>
+        <modeler:allow-send-email><![CDATA[true]]></modeler:allow-send-email>
+        <modeler:activiti-idm-initiator><![CDATA[true]]></modeler:activiti-idm-initiator>
+        <modeler:editor-resource-id><![CDATA[sid-26433ACD-BBC8-4642-9AEA-2BBB096943BE]]></modeler:editor-resource-id>
+      </extensionElements>
+    </userTask>
+    <sequenceFlow id="sid-A4BA280B-63D8-4BED-907F-17DE1106CA4C" sourceRef="sid-EDC9427E-EDEE-4938-B1E1-987179DF6D59" targetRef="sid-26433ACD-BBC8-4642-9AEA-2BBB096943BE">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-A4BA280B-63D8-4BED-907F-17DE1106CA4C]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <endEvent id="sid-D382A7CE-420A-42BA-BB11-CB68224080DE">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-D382A7CE-420A-42BA-BB11-CB68224080DE]]></modeler:editor-resource-id>
+      </extensionElements>
+    </endEvent>
+    <sequenceFlow id="sid-890EE71D-1243-4AE0-A7AA-A64CB0F67A40" sourceRef="sid-26433ACD-BBC8-4642-9AEA-2BBB096943BE" targetRef="sid-D382A7CE-420A-42BA-BB11-CB68224080DE">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-890EE71D-1243-4AE0-A7AA-A64CB0F67A40]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <sequenceFlow id="sid-C2AEA284-50F0-4BB5-9DD2-4BD26F5C33D8" sourceRef="sid-403B6285-6510-4960-87A0-FC041B2E7301" targetRef="sid-30D22945-EC22-403B-B0B3-CB28EFDDD68E">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-C2AEA284-50F0-4BB5-9DD2-4BD26F5C33D8]]></modeler:editor-resource-id>
+      </extensionElements>
+      <conditionExpression xsi:type="tFormalExpression"><![CDATA[${transientVar == 'OK'}]]></conditionExpression>
+    </sequenceFlow>
+    <sequenceFlow id="sid-37B85BD0-57CD-4B81-A45D-046FF8D1498D" sourceRef="sid-403B6285-6510-4960-87A0-FC041B2E7301" targetRef="sid-EDC9427E-EDEE-4938-B1E1-987179DF6D59">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-37B85BD0-57CD-4B81-A45D-046FF8D1498D]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <sequenceFlow id="sid-A873D0A9-CF0A-4F41-B192-53FA910DDB6F" sourceRef="sid-30D22945-EC22-403B-B0B3-CB28EFDDD68E" targetRef="sid-26433ACD-BBC8-4642-9AEA-2BBB096943BE">
+      <extensionElements>
+        <activiti:executionListener event="take" class="org.activiti.engine.test.api.variables.TransientVariablesTest$CombineVariablesExecutionListener"/>
+        <modeler:editor-resource-id><![CDATA[sid-A873D0A9-CF0A-4F41-B192-53FA910DDB6F]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+  </process>
+</definitions>
\ No newline at end of file
diff --git a/modules/activiti-engine/src/test/resources/org/activiti/engine/test/api/variables/TransientVariablesTest.testTransientVariableShadowsPersistentVariable.bpmn20.xml b/modules/activiti-engine/src/test/resources/org/activiti/engine/test/api/variables/TransientVariablesTest.testTransientVariableShadowsPersistentVariable.bpmn20.xml
new file mode 100644
index 00000000000..5a799fe5d6c
--- /dev/null
+++ b/modules/activiti-engine/src/test/resources/org/activiti/engine/test/api/variables/TransientVariablesTest.testTransientVariableShadowsPersistentVariable.bpmn20.xml
@@ -0,0 +1,89 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:activiti="http://activiti.org/bpmn" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:omgdc="http://www.omg.org/spec/DD/20100524/DC" xmlns:omgdi="http://www.omg.org/spec/DD/20100524/DI" typeLanguage="http://www.w3.org/2001/XMLSchema" expressionLanguage="http://www.w3.org/1999/XPath" targetNamespace="http://www.activiti.org/processdef" xmlns:modeler="http://activiti.com/modeler" modeler:version="1.0en" modeler:exportDateTime="20160823103434643" modeler:modelId="3" modeler:modelVersion="1" modeler:modelLastUpdated="1471941272741">
+  <process id="transientVarsTest" name="transientVarsTest" isExecutable="true">
+    <startEvent id="startEvent1">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[startEvent1]]></modeler:editor-resource-id>
+      </extensionElements>
+    </startEvent>
+    <sequenceFlow id="sid-78575621-2BF9-4F12-AC51-4A7A069A5630" sourceRef="startEvent1" targetRef="sid-11CD6DCF-DD91-4D7F-8743-459CD9F42A8B">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-78575621-2BF9-4F12-AC51-4A7A069A5630]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <scriptTask id="sid-11CD6DCF-DD91-4D7F-8743-459CD9F42A8B" name="Set transient var" scriptFormat="javascript" activiti:autoStoreVariables="false">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-11CD6DCF-DD91-4D7F-8743-459CD9F42A8B]]></modeler:editor-resource-id>
+      </extensionElements>
+      <script><![CDATA[execution.setTransientVariable("theVar", "I am shadowed");]]></script>
+    </scriptTask>
+    <userTask id="sid-8188123A-1334-4034-B22A-F3C45C59C006" name="My Task" activiti:assignee="$INITIATOR">
+      <extensionElements>
+        <modeler:allow-send-email><![CDATA[true]]></modeler:allow-send-email>
+        <modeler:activiti-idm-initiator><![CDATA[true]]></modeler:activiti-idm-initiator>
+        <modeler:editor-resource-id><![CDATA[sid-8188123A-1334-4034-B22A-F3C45C59C006]]></modeler:editor-resource-id>
+      </extensionElements>
+    </userTask>
+    <endEvent id="sid-86373E84-A134-4FAC-B33F-C27ED13EE30D">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-86373E84-A134-4FAC-B33F-C27ED13EE30D]]></modeler:editor-resource-id>
+      </extensionElements>
+    </endEvent>
+    <sequenceFlow id="sid-A4DCDAEB-269E-4B67-9603-CF682C8396A9" sourceRef="sid-8188123A-1334-4034-B22A-F3C45C59C006" targetRef="sid-86373E84-A134-4FAC-B33F-C27ED13EE30D">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-A4DCDAEB-269E-4B67-9603-CF682C8396A9]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <sequenceFlow id="sid-22D98EA5-8EAC-41C5-96F3-FBA45B46AA34" sourceRef="sid-11CD6DCF-DD91-4D7F-8743-459CD9F42A8B" targetRef="sid-469F0D65-9684-48A9-92F6-352B090AD718">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-22D98EA5-8EAC-41C5-96F3-FBA45B46AA34]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <scriptTask id="sid-469F0D65-9684-48A9-92F6-352B090AD718" name="Set persistent var based on transient var" scriptFormat="javascript" activiti:autoStoreVariables="false">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-469F0D65-9684-48A9-92F6-352B090AD718]]></modeler:editor-resource-id>
+      </extensionElements>
+      <script><![CDATA[execution.setVariable("resultVar", execution.getVariable("theVar"));]]></script>
+    </scriptTask>
+    <sequenceFlow id="sid-21BB7208-C0DD-4D2B-9C27-59F0F9351405" sourceRef="sid-469F0D65-9684-48A9-92F6-352B090AD718" targetRef="sid-8188123A-1334-4034-B22A-F3C45C59C006">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-21BB7208-C0DD-4D2B-9C27-59F0F9351405]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+  </process>
+  <bpmndi:BPMNDiagram id="BPMNDiagram_transientVarsTest">
+    <bpmndi:BPMNPlane bpmnElement="transientVarsTest" id="BPMNPlane_transientVarsTest">
+      <bpmndi:BPMNShape bpmnElement="startEvent1" id="BPMNShape_startEvent1">
+        <omgdc:Bounds height="30.0" width="30.0" x="90.0" y="150.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-11CD6DCF-DD91-4D7F-8743-459CD9F42A8B" id="BPMNShape_sid-11CD6DCF-DD91-4D7F-8743-459CD9F42A8B">
+        <omgdc:Bounds height="80.0" width="100.0" x="165.0" y="125.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-8188123A-1334-4034-B22A-F3C45C59C006" id="BPMNShape_sid-8188123A-1334-4034-B22A-F3C45C59C006">
+        <omgdc:Bounds height="80.0" width="100.0" x="450.0" y="135.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-86373E84-A134-4FAC-B33F-C27ED13EE30D" id="BPMNShape_sid-86373E84-A134-4FAC-B33F-C27ED13EE30D">
+        <omgdc:Bounds height="28.0" width="28.0" x="595.0" y="161.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-469F0D65-9684-48A9-92F6-352B090AD718" id="BPMNShape_sid-469F0D65-9684-48A9-92F6-352B090AD718">
+        <omgdc:Bounds height="80.0" width="100.0" x="310.0" y="125.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNEdge bpmnElement="sid-22D98EA5-8EAC-41C5-96F3-FBA45B46AA34" id="BPMNEdge_sid-22D98EA5-8EAC-41C5-96F3-FBA45B46AA34">
+        <omgdi:waypoint x="265.0" y="165.0"/>
+        <omgdi:waypoint x="310.0" y="165.0"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-A4DCDAEB-269E-4B67-9603-CF682C8396A9" id="BPMNEdge_sid-A4DCDAEB-269E-4B67-9603-CF682C8396A9">
+        <omgdi:waypoint x="550.0" y="175.0"/>
+        <omgdi:waypoint x="595.0" y="175.0"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-21BB7208-C0DD-4D2B-9C27-59F0F9351405" id="BPMNEdge_sid-21BB7208-C0DD-4D2B-9C27-59F0F9351405">
+        <omgdi:waypoint x="410.0" y="168.57142857142856"/>
+        <omgdi:waypoint x="450.0" y="171.42857142857144"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-78575621-2BF9-4F12-AC51-4A7A069A5630" id="BPMNEdge_sid-78575621-2BF9-4F12-AC51-4A7A069A5630">
+        <omgdi:waypoint x="120.0" y="165.0"/>
+        <omgdi:waypoint x="165.0" y="165.0"/>
+      </bpmndi:BPMNEdge>
+    </bpmndi:BPMNPlane>
+  </bpmndi:BPMNDiagram>
+</definitions>
\ No newline at end of file
diff --git a/modules/activiti-engine/src/test/resources/org/activiti/engine/test/api/variables/TransientVariablesTest.testTriggerWithTransientVars.bpmn20.xml b/modules/activiti-engine/src/test/resources/org/activiti/engine/test/api/variables/TransientVariablesTest.testTriggerWithTransientVars.bpmn20.xml
new file mode 100644
index 00000000000..2d731f308cd
--- /dev/null
+++ b/modules/activiti-engine/src/test/resources/org/activiti/engine/test/api/variables/TransientVariablesTest.testTriggerWithTransientVars.bpmn20.xml
@@ -0,0 +1,195 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:activiti="http://activiti.org/bpmn" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:omgdc="http://www.omg.org/spec/DD/20100524/DC" xmlns:omgdi="http://www.omg.org/spec/DD/20100524/DI" typeLanguage="http://www.w3.org/2001/XMLSchema" expressionLanguage="http://www.w3.org/1999/XPath" targetNamespace="http://www.activiti.org/processdef" xmlns:modeler="http://activiti.com/modeler" modeler:version="1.0en" modeler:exportDateTime="20160823110603954" modeler:modelId="4" modeler:modelVersion="1" modeler:modelLastUpdated="1471943161728">
+  <process id="transientVarsTest" name="transientVarsTest" isExecutable="true">
+    <startEvent id="startEvent1">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[startEvent1]]></modeler:editor-resource-id>
+      </extensionElements>
+    </startEvent>
+    <subProcess id="sid-E0A29445-5407-4EAA-ADC5-1F7201635370" name="subProcess">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-E0A29445-5407-4EAA-ADC5-1F7201635370]]></modeler:editor-resource-id>
+      </extensionElements>
+      <startEvent id="sid-C44C2081-C369-45A5-AD2F-F0E9BA7F2915">
+        <extensionElements>
+          <modeler:editor-resource-id><![CDATA[sid-C44C2081-C369-45A5-AD2F-F0E9BA7F2915]]></modeler:editor-resource-id>
+        </extensionElements>
+      </startEvent>
+      <parallelGateway id="sid-1BB75B8C-28B7-49CE-B1D9-2DE94FBEB896">
+        <extensionElements>
+          <modeler:editor-resource-id><![CDATA[sid-1BB75B8C-28B7-49CE-B1D9-2DE94FBEB896]]></modeler:editor-resource-id>
+        </extensionElements>
+      </parallelGateway>
+      <receiveTask id="wait1" name="Wait 1">
+        <extensionElements>
+          <modeler:editor-resource-id><![CDATA[wait1]]></modeler:editor-resource-id>
+        </extensionElements>
+      </receiveTask>
+      <receiveTask id="wait2" name="Wait 2">
+        <extensionElements>
+          <modeler:editor-resource-id><![CDATA[wait2]]></modeler:editor-resource-id>
+        </extensionElements>
+      </receiveTask>
+      <parallelGateway id="sid-BEB4F413-B127-4B40-8A8B-6BA613BC12B2">
+        <extensionElements>
+          <modeler:editor-resource-id><![CDATA[sid-BEB4F413-B127-4B40-8A8B-6BA613BC12B2]]></modeler:editor-resource-id>
+        </extensionElements>
+      </parallelGateway>
+      <endEvent id="sid-DE466F26-2EF5-4E5D-8268-AF4CAD2C6052">
+        <extensionElements>
+          <modeler:editor-resource-id><![CDATA[sid-DE466F26-2EF5-4E5D-8268-AF4CAD2C6052]]></modeler:editor-resource-id>
+        </extensionElements>
+      </endEvent>
+      <serviceTask id="sid-57438760-2BDE-4E7D-B518-77EA267FE7BF" name="Merge vars" activiti:class="org.activiti.engine.test.api.variables.TransientVariablesTest$MergeVariableValues">
+        <extensionElements>
+          <modeler:editor-resource-id><![CDATA[sid-57438760-2BDE-4E7D-B518-77EA267FE7BF]]></modeler:editor-resource-id>
+        </extensionElements>
+      </serviceTask>
+      <sequenceFlow id="sid-12122E37-DB1E-48B3-A0D1-365B47A687EF" sourceRef="sid-C44C2081-C369-45A5-AD2F-F0E9BA7F2915" targetRef="sid-1BB75B8C-28B7-49CE-B1D9-2DE94FBEB896">
+        <extensionElements>
+          <modeler:editor-resource-id><![CDATA[sid-12122E37-DB1E-48B3-A0D1-365B47A687EF]]></modeler:editor-resource-id>
+        </extensionElements>
+      </sequenceFlow>
+      <sequenceFlow id="sid-74D97FB8-F5A3-4D63-B9D7-F85059F9D4BE" sourceRef="sid-1BB75B8C-28B7-49CE-B1D9-2DE94FBEB896" targetRef="wait1">
+        <extensionElements>
+          <modeler:editor-resource-id><![CDATA[sid-74D97FB8-F5A3-4D63-B9D7-F85059F9D4BE]]></modeler:editor-resource-id>
+        </extensionElements>
+      </sequenceFlow>
+      <sequenceFlow id="sid-61AEF81E-55BC-4FDB-906B-21E2585F5C56" sourceRef="sid-1BB75B8C-28B7-49CE-B1D9-2DE94FBEB896" targetRef="wait2">
+        <extensionElements>
+          <modeler:editor-resource-id><![CDATA[sid-61AEF81E-55BC-4FDB-906B-21E2585F5C56]]></modeler:editor-resource-id>
+        </extensionElements>
+      </sequenceFlow>
+      <sequenceFlow id="sid-1987B937-FD74-4D40-8BC9-630E6E4D9C2B" sourceRef="wait1" targetRef="sid-BEB4F413-B127-4B40-8A8B-6BA613BC12B2">
+        <extensionElements>
+          <modeler:editor-resource-id><![CDATA[sid-1987B937-FD74-4D40-8BC9-630E6E4D9C2B]]></modeler:editor-resource-id>
+        </extensionElements>
+      </sequenceFlow>
+      <sequenceFlow id="sid-6FCF921B-AE6E-4960-BBB4-3D852B623692" sourceRef="wait2" targetRef="sid-BEB4F413-B127-4B40-8A8B-6BA613BC12B2">
+        <extensionElements>
+          <modeler:editor-resource-id><![CDATA[sid-6FCF921B-AE6E-4960-BBB4-3D852B623692]]></modeler:editor-resource-id>
+        </extensionElements>
+      </sequenceFlow>
+      <sequenceFlow id="sid-B7B2DCA3-CA6D-47F8-997D-5F00175328DF" sourceRef="sid-BEB4F413-B127-4B40-8A8B-6BA613BC12B2" targetRef="sid-57438760-2BDE-4E7D-B518-77EA267FE7BF">
+        <extensionElements>
+          <modeler:editor-resource-id><![CDATA[sid-B7B2DCA3-CA6D-47F8-997D-5F00175328DF]]></modeler:editor-resource-id>
+        </extensionElements>
+      </sequenceFlow>
+      <sequenceFlow id="sid-7985FB2C-1EAD-47A7-B110-F4B14360E6FD" sourceRef="sid-57438760-2BDE-4E7D-B518-77EA267FE7BF" targetRef="sid-DE466F26-2EF5-4E5D-8268-AF4CAD2C6052">
+        <extensionElements>
+          <modeler:editor-resource-id><![CDATA[sid-7985FB2C-1EAD-47A7-B110-F4B14360E6FD]]></modeler:editor-resource-id>
+        </extensionElements>
+      </sequenceFlow>
+    </subProcess>
+    <sequenceFlow id="sid-8A200C9A-07F8-4EE5-A62D-74FB400D1807" sourceRef="startEvent1" targetRef="sid-E0A29445-5407-4EAA-ADC5-1F7201635370">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-8A200C9A-07F8-4EE5-A62D-74FB400D1807]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <userTask id="sid-37BFBB43-9415-4199-BF91-33080A9ACA8D" name="My Task" activiti:assignee="$INITIATOR">
+      <extensionElements>
+        <modeler:allow-send-email><![CDATA[true]]></modeler:allow-send-email>
+        <modeler:activiti-idm-initiator><![CDATA[true]]></modeler:activiti-idm-initiator>
+        <modeler:editor-resource-id><![CDATA[sid-37BFBB43-9415-4199-BF91-33080A9ACA8D]]></modeler:editor-resource-id>
+      </extensionElements>
+    </userTask>
+    <sequenceFlow id="sid-2F5CD76B-B346-42A5-A8BB-8A9419A6F7CE" sourceRef="sid-E0A29445-5407-4EAA-ADC5-1F7201635370" targetRef="sid-37BFBB43-9415-4199-BF91-33080A9ACA8D">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-2F5CD76B-B346-42A5-A8BB-8A9419A6F7CE]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+    <endEvent id="sid-B6B0802A-38D9-46B8-9EEE-971A95AED72D">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-B6B0802A-38D9-46B8-9EEE-971A95AED72D]]></modeler:editor-resource-id>
+      </extensionElements>
+    </endEvent>
+    <sequenceFlow id="sid-019029EE-BCB1-481A-B589-429582C35B61" sourceRef="sid-37BFBB43-9415-4199-BF91-33080A9ACA8D" targetRef="sid-B6B0802A-38D9-46B8-9EEE-971A95AED72D">
+      <extensionElements>
+        <modeler:editor-resource-id><![CDATA[sid-019029EE-BCB1-481A-B589-429582C35B61]]></modeler:editor-resource-id>
+      </extensionElements>
+    </sequenceFlow>
+  </process>
+  <bpmndi:BPMNDiagram id="BPMNDiagram_transientVarsTest">
+    <bpmndi:BPMNPlane bpmnElement="transientVarsTest" id="BPMNPlane_transientVarsTest">
+      <bpmndi:BPMNShape bpmnElement="startEvent1" id="BPMNShape_startEvent1">
+        <omgdc:Bounds height="30.0" width="30.0" x="75.0" y="264.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-E0A29445-5407-4EAA-ADC5-1F7201635370" id="BPMNShape_sid-E0A29445-5407-4EAA-ADC5-1F7201635370">
+        <omgdc:Bounds height="435.0" width="673.0" x="195.0" y="60.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-C44C2081-C369-45A5-AD2F-F0E9BA7F2915" id="BPMNShape_sid-C44C2081-C369-45A5-AD2F-F0E9BA7F2915">
+        <omgdc:Bounds height="30.0" width="30.0" x="233.75" y="268.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-1BB75B8C-28B7-49CE-B1D9-2DE94FBEB896" id="BPMNShape_sid-1BB75B8C-28B7-49CE-B1D9-2DE94FBEB896">
+        <omgdc:Bounds height="40.0" width="40.0" x="309.125" y="263.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="wait1" id="BPMNShape_wait1">
+        <omgdc:Bounds height="80.0" width="100.0" x="428.75" y="129.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="wait2" id="BPMNShape_wait2">
+        <omgdc:Bounds height="80.0" width="100.0" x="428.75" y="354.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-BEB4F413-B127-4B40-8A8B-6BA613BC12B2" id="BPMNShape_sid-BEB4F413-B127-4B40-8A8B-6BA613BC12B2">
+        <omgdc:Bounds height="40.0" width="40.0" x="585.0" y="259.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-DE466F26-2EF5-4E5D-8268-AF4CAD2C6052" id="BPMNShape_sid-DE466F26-2EF5-4E5D-8268-AF4CAD2C6052">
+        <omgdc:Bounds height="28.0" width="28.0" x="805.0" y="265.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-57438760-2BDE-4E7D-B518-77EA267FE7BF" id="BPMNShape_sid-57438760-2BDE-4E7D-B518-77EA267FE7BF">
+        <omgdc:Bounds height="80.0" width="100.0" x="660.0" y="239.0"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-37BFBB43-9415-4199-BF91-33080A9ACA8D" id="BPMNShape_sid-37BFBB43-9415-4199-BF91-33080A9ACA8D">
+        <omgdc:Bounds height="80.0" width="100.0" x="945.0" y="237.5"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNShape bpmnElement="sid-B6B0802A-38D9-46B8-9EEE-971A95AED72D" id="BPMNShape_sid-B6B0802A-38D9-46B8-9EEE-971A95AED72D">
+        <omgdc:Bounds height="28.0" width="28.0" x="1090.0" y="263.5"/>
+      </bpmndi:BPMNShape>
+      <bpmndi:BPMNEdge bpmnElement="sid-8A200C9A-07F8-4EE5-A62D-74FB400D1807" id="BPMNEdge_sid-8A200C9A-07F8-4EE5-A62D-74FB400D1807">
+        <omgdi:waypoint x="105.0" y="279.0"/>
+        <omgdi:waypoint x="150.0" y="279.0"/>
+        <omgdi:waypoint x="150.0" y="277.5"/>
+        <omgdi:waypoint x="195.0" y="277.5"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-6FCF921B-AE6E-4960-BBB4-3D852B623692" id="BPMNEdge_sid-6FCF921B-AE6E-4960-BBB4-3D852B623692">
+        <omgdi:waypoint x="528.75" y="394.0"/>
+        <omgdi:waypoint x="605.0" y="394.0"/>
+        <omgdi:waypoint x="605.0" y="299.0"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-61AEF81E-55BC-4FDB-906B-21E2585F5C56" id="BPMNEdge_sid-61AEF81E-55BC-4FDB-906B-21E2585F5C56">
+        <omgdi:waypoint x="329.625" y="302.5"/>
+        <omgdi:waypoint x="329.625" y="394.0"/>
+        <omgdi:waypoint x="428.75" y="394.0"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-B7B2DCA3-CA6D-47F8-997D-5F00175328DF" id="BPMNEdge_sid-B7B2DCA3-CA6D-47F8-997D-5F00175328DF">
+        <omgdi:waypoint x="624.5913461538462" y="279.40865384615387"/>
+        <omgdi:waypoint x="660.0" y="279.2392344497608"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-7985FB2C-1EAD-47A7-B110-F4B14360E6FD" id="BPMNEdge_sid-7985FB2C-1EAD-47A7-B110-F4B14360E6FD">
+        <omgdi:waypoint x="760.0" y="279.0"/>
+        <omgdi:waypoint x="805.0" y="279.0"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-1987B937-FD74-4D40-8BC9-630E6E4D9C2B" id="BPMNEdge_sid-1987B937-FD74-4D40-8BC9-630E6E4D9C2B">
+        <omgdi:waypoint x="528.75" y="169.0"/>
+        <omgdi:waypoint x="605.8917197452229" y="169.0"/>
+        <omgdi:waypoint x="605.8917197452229" y="259.8917197452229"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-019029EE-BCB1-481A-B589-429582C35B61" id="BPMNEdge_sid-019029EE-BCB1-481A-B589-429582C35B61">
+        <omgdi:waypoint x="1045.0" y="277.5"/>
+        <omgdi:waypoint x="1090.0" y="277.5"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-2F5CD76B-B346-42A5-A8BB-8A9419A6F7CE" id="BPMNEdge_sid-2F5CD76B-B346-42A5-A8BB-8A9419A6F7CE">
+        <omgdi:waypoint x="868.0" y="277.5"/>
+        <omgdi:waypoint x="945.0" y="277.5"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-74D97FB8-F5A3-4D63-B9D7-F85059F9D4BE" id="BPMNEdge_sid-74D97FB8-F5A3-4D63-B9D7-F85059F9D4BE">
+        <omgdi:waypoint x="329.625" y="263.5"/>
+        <omgdi:waypoint x="329.625" y="169.0"/>
+        <omgdi:waypoint x="428.75" y="169.0"/>
+      </bpmndi:BPMNEdge>
+      <bpmndi:BPMNEdge bpmnElement="sid-12122E37-DB1E-48B3-A0D1-365B47A687EF" id="BPMNEdge_sid-12122E37-DB1E-48B3-A0D1-365B47A687EF">
+        <omgdi:waypoint x="263.74971610124896" y="283.09228695429243"/>
+        <omgdi:waypoint x="309.4987616198259" y="283.3737616198259"/>
+      </bpmndi:BPMNEdge>
+    </bpmndi:BPMNPlane>
+  </bpmndi:BPMNDiagram>
+</definitions>
\ No newline at end of file
diff --git a/modules/activiti-engine/src/test/resources/org/activiti/engine/test/api/variables/TransientVariablesTest.testUseTransientVariableInExclusiveGateway.bpmn20.xml b/modules/activiti-engine/src/test/resources/org/activiti/engine/test/api/variables/TransientVariablesTest.testUseTransientVariableInExclusiveGateway.bpmn20.xml
new file mode 100644
index 00000000000..1893543f455
--- /dev/null
+++ b/modules/activiti-engine/src/test/resources/org/activiti/engine/test/api/variables/TransientVariablesTest.testUseTransientVariableInExclusiveGateway.bpmn20.xml
@@ -0,0 +1,28 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:activiti="http://activiti.org/bpmn" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:omgdc="http://www.omg.org/spec/DD/20100524/DC" xmlns:omgdi="http://www.omg.org/spec/DD/20100524/DI" typeLanguage="http://www.w3.org/2001/XMLSchema" expressionLanguage="http://www.w3.org/1999/XPath" targetNamespace="http://www.activiti.org/processdef" xmlns:modeler="http://activiti.com/modeler" modeler:version="1.0en" modeler:exportDateTime="20141210093416680" modeler:modelId="924474" modeler:modelVersion="1" modeler:modelLastUpdated="1418204052768">
+  <process id="transientVarsTest" isExecutable="true">
+
+    <startEvent id="theStart"/>
+    <sequenceFlow sourceRef="theStart" targetRef="serviceTask01"/>
+
+    <serviceTask id="serviceTask01" activiti:class="org.activiti.engine.test.api.variables.TransientVariablesTest$FetchDataServiceTask" />
+    <sequenceFlow sourceRef="serviceTask01" targetRef="exclusiveGw"/>
+
+    <exclusiveGateway id="exclusiveGw" />
+    <sequenceFlow sourceRef="exclusiveGw" targetRef="responseOk">
+      <conditionExpression xsi:type="tFormalExpression">${status == 200}</conditionExpression>
+    </sequenceFlow>
+    <sequenceFlow sourceRef="exclusiveGw" targetRef="responseNotOk">
+      <conditionExpression xsi:type="tFormalExpression">${status != 200}</conditionExpression>
+    </sequenceFlow>
+
+    <userTask id="responseOk" />
+    <sequenceFlow sourceRef="responseOk" targetRef="theEnd"/>
+
+    <userTask id="responseNotOk" />
+    <sequenceFlow sourceRef="responseNotOk" targetRef="theEnd"/>
+
+    <endEvent id="theEnd" />
+
+  </process>
+</definitions>
\ No newline at end of file
diff --git a/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ExecutionActionRequest.java b/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ExecutionActionRequest.java
index 8d6648ad512..7c25fb468b9 100644
--- a/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ExecutionActionRequest.java
+++ b/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ExecutionActionRequest.java
@@ -27,12 +27,14 @@
 public class ExecutionActionRequest extends RestActionRequest {

   public static final String ACTION_SIGNAL = "signal";
+  public static final String ACTION_TRIGGER = "trigger";
   public static final String ACTION_SIGNAL_EVENT_RECEIVED = "signalEventReceived";
   public static final String ACTION_MESSAGE_EVENT_RECEIVED = "messageEventReceived";

   protected String signalName;
   protected String messageName;
   protected List<RestVariable> variables;
+  protected List<RestVariable> transientVariables;

   public void setVariables(List<RestVariable> variables) {
     this.variables = variables;
@@ -42,6 +44,15 @@ public void setVariables(List<RestVariable> variables) {
   public List<RestVariable> getVariables() {
     return variables;
   }
+
+  public void setTransientVariables(List<RestVariable> transientVariables) {
+    this.transientVariables = transientVariables;
+  }
+
+  @JsonTypeInfo(use = Id.CLASS, defaultImpl = RestVariable.class)
+  public List<RestVariable> getTransientVariables() {
+    return transientVariables;
+  }

   public String getSignalName() {
     return signalName;
diff --git a/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ExecutionBaseResource.java b/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ExecutionBaseResource.java
index aaa30900baf..3c3676f01d2 100644
--- a/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ExecutionBaseResource.java
+++ b/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ExecutionBaseResource.java
@@ -188,9 +188,9 @@ protected Execution getExecutionFromRequest(String executionId) {
     return execution;
   }

-  protected Map<String, Object> getVariablesToSet(ExecutionActionRequest actionRequest) {
+  protected Map<String, Object> getVariablesToSet(List<RestVariable> restVariables) {
     Map<String, Object> variablesToSet = new HashMap<String, Object>();
-    for (RestVariable var : actionRequest.getVariables()) {
+    for (RestVariable var : restVariables) {
       if (var.getName() == null) {
         throw new ActivitiIllegalArgumentException("Variable name is required");
       }
diff --git a/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ExecutionCollectionResource.java b/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ExecutionCollectionResource.java
index 38b739376d3..a1f418288b6 100644
--- a/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ExecutionCollectionResource.java
+++ b/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ExecutionCollectionResource.java
@@ -102,7 +102,7 @@ public void executeExecutionAction(@RequestBody ExecutionActionRequest actionReq
     }

     if (actionRequest.getVariables() != null) {
-      runtimeService.signalEventReceived(actionRequest.getSignalName(), getVariablesToSet(actionRequest));
+      runtimeService.signalEventReceived(actionRequest.getSignalName(), getVariablesToSet(actionRequest.getVariables()));
     } else {
       runtimeService.signalEventReceived(actionRequest.getSignalName());
     }
diff --git a/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ExecutionResource.java b/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ExecutionResource.java
index edd119066f1..00a868b948c 100644
--- a/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ExecutionResource.java
+++ b/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ExecutionResource.java
@@ -41,9 +41,12 @@ public ExecutionResponse performExecutionAction(@PathVariable String executionId

     Execution execution = getExecutionFromRequest(executionId);

-    if (ExecutionActionRequest.ACTION_SIGNAL.equals(actionRequest.getAction())) {
-      if (actionRequest.getVariables() != null) {
-        runtimeService.trigger(execution.getId(), getVariablesToSet(actionRequest));
+    if (ExecutionActionRequest.ACTION_SIGNAL.equals(actionRequest.getAction())
+        || ExecutionActionRequest.ACTION_TRIGGER.equals(actionRequest.getAction())) {
+      if (actionRequest.getTransientVariables() != null && actionRequest.getVariables() != null) {
+        runtimeService.trigger(execution.getId(), getVariablesToSet(actionRequest.getVariables()), getVariablesToSet(actionRequest.getTransientVariables()));
+      } else if (actionRequest.getVariables() != null) {
+        runtimeService.trigger(execution.getId(), getVariablesToSet(actionRequest.getVariables()));
       } else {
         runtimeService.trigger(execution.getId());
       }
@@ -52,7 +55,7 @@ public ExecutionResponse performExecutionAction(@PathVariable String executionId
         throw new ActivitiIllegalArgumentException("Signal name is required");
       }
       if (actionRequest.getVariables() != null) {
-        runtimeService.signalEventReceived(actionRequest.getSignalName(), execution.getId(), getVariablesToSet(actionRequest));
+        runtimeService.signalEventReceived(actionRequest.getSignalName(), execution.getId(), getVariablesToSet(actionRequest.getVariables()));
       } else {
         runtimeService.signalEventReceived(actionRequest.getSignalName(), execution.getId());
       }
@@ -61,7 +64,7 @@ public ExecutionResponse performExecutionAction(@PathVariable String executionId
         throw new ActivitiIllegalArgumentException("Message name is required");
       }
       if (actionRequest.getVariables() != null) {
-        runtimeService.messageEventReceived(actionRequest.getMessageName(), execution.getId(), getVariablesToSet(actionRequest));
+        runtimeService.messageEventReceived(actionRequest.getMessageName(), execution.getId(), getVariablesToSet(actionRequest.getVariables()));
       } else {
         runtimeService.messageEventReceived(actionRequest.getMessageName(), execution.getId());
       }
diff --git a/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ProcessInstanceCollectionResource.java b/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ProcessInstanceCollectionResource.java
index 1f5830b3c60..335c01b183a 100644
--- a/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ProcessInstanceCollectionResource.java
+++ b/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ProcessInstanceCollectionResource.java
@@ -25,6 +25,7 @@
 import org.activiti.engine.HistoryService;
 import org.activiti.engine.history.HistoricVariableInstance;
 import org.activiti.engine.runtime.ProcessInstance;
+import org.activiti.engine.runtime.ProcessInstanceBuilder;
 import org.activiti.rest.common.api.DataResponse;
 import org.activiti.rest.service.api.engine.variable.RestVariable;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -124,7 +125,7 @@ public ProcessInstanceResponse createProcessInstance(@RequestBody ProcessInstanc
       throw new ActivitiIllegalArgumentException("Only one of processDefinitionId, processDefinitionKey or message should be set.");
     }

-    if (request.isCustomTenantSet()) {
+    if (request.isTenantSet()) {
       // Tenant-id can only be used with either key or message
       if (request.getProcessDefinitionId() != null) {
         throw new ActivitiIllegalArgumentException("TenantId can only be used with either processDefinitionKey or message.");
@@ -141,29 +142,49 @@ public ProcessInstanceResponse createProcessInstance(@RequestBody ProcessInstanc
         startVariables.put(variable.getName(), restResponseFactory.getVariableValue(variable));
       }
     }
+
+    Map<String, Object> transientVariables = null;
+    if (request.getTransientVariables() != null) {
+      transientVariables = new HashMap<String, Object>();
+      for (RestVariable variable : request.getTransientVariables()) {
+        if (variable.getName() == null) {
+          throw new ActivitiIllegalArgumentException("Variable name is required.");
+        }
+        transientVariables.put(variable.getName(), restResponseFactory.getVariableValue(variable));
+      }
+    }

     // Actually start the instance based on key or id
     try {
       ProcessInstance instance = null;
+
+      ProcessInstanceBuilder processInstanceBuilder = runtimeService.createProcessInstanceBuilder();
       if (request.getProcessDefinitionId() != null) {
-        instance = runtimeService.startProcessInstanceById(request.getProcessDefinitionId(), request.getBusinessKey(), startVariables);
-      } else if (request.getProcessDefinitionKey() != null) {
-        if (request.isCustomTenantSet()) {
-          instance = runtimeService.startProcessInstanceByKeyAndTenantId(request.getProcessDefinitionKey(), request.getBusinessKey(), startVariables, request.getTenantId());
-        } else {
-          instance = runtimeService.startProcessInstanceByKey(request.getProcessDefinitionKey(), request.getBusinessKey(), startVariables);
-        }
-      } else {
-        if (request.isCustomTenantSet()) {
-          instance = runtimeService.startProcessInstanceByMessageAndTenantId(request.getMessage(), request.getBusinessKey(), startVariables, request.getTenantId());
-        } else {
-          instance = runtimeService.startProcessInstanceByMessage(request.getMessage(), request.getBusinessKey(), startVariables);
-        }
+        processInstanceBuilder.processDefinitionId(request.getProcessDefinitionId());
       }
-
+      if (request.getProcessDefinitionKey() != null) {
+        processInstanceBuilder.processDefinitionKey(request.getProcessDefinitionKey());
+      }
+      if (request.getMessage() != null) {
+        processInstanceBuilder.messageName(request.getMessage());
+      }
+      if (request.getBusinessKey() != null) {
+        processInstanceBuilder.businessKey(request.getBusinessKey());
+      }
+      if (request.isTenantSet()) {
+        processInstanceBuilder.tenantId(request.getTenantId());
+      }
+      if (startVariables != null) {
+        processInstanceBuilder.variables(startVariables);
+      }
+      if (transientVariables != null) {
+        processInstanceBuilder.transientVariables(transientVariables);
+      }
+
+      instance = processInstanceBuilder.start();
+
       response.setStatus(HttpStatus.CREATED.value());

-      // Added by Ryan Johnston
       if (request.getReturnVariables()) {
         Map<String, Object> runtimeVariableMap = null;
         List<HistoricVariableInstance> historicVariableList = null;
@@ -177,10 +198,7 @@ public ProcessInstanceResponse createProcessInstance(@RequestBody ProcessInstanc
       } else {
         return restResponseFactory.createProcessInstanceResponse(instance);
       }
-      // End Added by Ryan Johnston

-      // Removed by Ryan Johnston (obsolete given the above).
-      // return factory.createProcessInstanceResponse(this, instance);
     } catch (ActivitiObjectNotFoundException aonfe) {
       throw new ActivitiIllegalArgumentException(aonfe.getMessage(), aonfe);
     }
diff --git a/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ProcessInstanceCreateRequest.java b/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ProcessInstanceCreateRequest.java
index bd202d92e8b..cf290c57bc2 100644
--- a/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ProcessInstanceCreateRequest.java
+++ b/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/process/ProcessInstanceCreateRequest.java
@@ -28,6 +28,7 @@
  *
  * @author Frederik Heremans
  * @author Ryan Johnston (@rjfsu)
+ * @author Joram Barrez
  */
 public class ProcessInstanceCreateRequest {

@@ -36,6 +37,7 @@ public class ProcessInstanceCreateRequest {
   private String message;
   private String businessKey;
   private List<RestVariable> variables;
+  private List<RestVariable> transientVariables;
   private String tenantId;

   // Added by Ryan Johnston
@@ -89,9 +91,18 @@ public List<RestVariable> getVariables() {
   public void setVariables(List<RestVariable> variables) {
     this.variables = variables;
   }
+
+  @JsonTypeInfo(use = Id.CLASS, defaultImpl = RestVariable.class)
+  public List<RestVariable> getTransientVariables() {
+    return transientVariables;
+  }
+
+  public void setTransientVariables(List<RestVariable> transientVariables) {
+    this.transientVariables = transientVariables;
+  }

   @JsonIgnore
-  public boolean isCustomTenantSet() {
+  public boolean isTenantSet() {
     return tenantId != null && !StringUtils.isEmpty(tenantId);
   }

diff --git a/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/task/TaskActionRequest.java b/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/task/TaskActionRequest.java
index 31baaa707fe..88eff62cd14 100644
--- a/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/task/TaskActionRequest.java
+++ b/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/task/TaskActionRequest.java
@@ -33,6 +33,7 @@ public class TaskActionRequest extends RestActionRequest {

   private String assignee;
   private List<RestVariable> variables;
+  private List<RestVariable> transientVariables;

   public void setAssignee(String assignee) {
     this.assignee = assignee;
@@ -50,4 +51,15 @@ public void setVariables(List<RestVariable> variables) {
   public List<RestVariable> getVariables() {
     return variables;
   }
+
+  public List<RestVariable> getTransientVariables() {
+    return transientVariables;
+  }
+
+  @JsonTypeInfo(use = Id.CLASS, defaultImpl = RestVariable.class)
+  public void setTransientVariables(List<RestVariable> transientVariables) {
+    this.transientVariables = transientVariables;
+  }
+
+
 }
diff --git a/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/task/TaskResource.java b/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/task/TaskResource.java
index 82c324b679c..056b2de1baf 100644
--- a/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/task/TaskResource.java
+++ b/modules/activiti-rest/src/main/java/org/activiti/rest/service/api/runtime/task/TaskResource.java
@@ -113,8 +113,11 @@ public void deleteTask(@PathVariable String taskId, @RequestParam(value = "casca
   }

   protected void completeTask(Task task, TaskActionRequest actionRequest) {
+    Map<String, Object> variablesToSet = null;
+    Map<String, Object> transientVariablesToSet = null;
+
     if (actionRequest.getVariables() != null) {
-      Map<String, Object> variablesToSet = new HashMap<String, Object>();
+      variablesToSet = new HashMap<String, Object>();
       for (RestVariable var : actionRequest.getVariables()) {
         if (var.getName() == null) {
           throw new ActivitiIllegalArgumentException("Variable name is required");
@@ -123,12 +126,21 @@ protected void completeTask(Task task, TaskActionRequest actionRequest) {
         Object actualVariableValue = restResponseFactory.getVariableValue(var);
         variablesToSet.put(var.getName(), actualVariableValue);
       }
-
-      taskService.complete(task.getId(), variablesToSet);
-    } else {
-      taskService.complete(task.getId());
     }
+
+    if (actionRequest.getTransientVariables() != null) {
+      transientVariablesToSet = new HashMap<String, Object>();
+      for (RestVariable var : actionRequest.getTransientVariables()) {
+        if (var.getName() == null) {
+          throw new ActivitiIllegalArgumentException("Transient variable name is required");
+        }

+        Object actualVariableValue = restResponseFactory.getVariableValue(var);
+        transientVariablesToSet.put(var.getName(), actualVariableValue);
+      }
+    }
+
+    taskService.complete(task.getId(), variablesToSet, transientVariablesToSet);
   }

   protected void resolveTask(Task task, TaskActionRequest actionRequest) {
diff --git a/modules/activiti5-compatibility/src/main/java/org/activiti/compatibility/DefaultActiviti5CompatibilityHandler.java b/modules/activiti5-compatibility/src/main/java/org/activiti/compatibility/DefaultActiviti5CompatibilityHandler.java
index 229407d4dd8..97264214507 100644
--- a/modules/activiti5-compatibility/src/main/java/org/activiti/compatibility/DefaultActiviti5CompatibilityHandler.java
+++ b/modules/activiti5-compatibility/src/main/java/org/activiti/compatibility/DefaultActiviti5CompatibilityHandler.java
@@ -845,9 +845,9 @@ public boolean mapException(Exception camelException, DelegateExecution executio
     }
   }

-  public Map<String, Object> getVariableValues(ProcessInstance processInstance) {
+  public Map<String, Object> getVariables(ProcessInstance processInstance) {
     org.activiti5.engine.runtime.ProcessInstance activiti5ProcessInstance = ((Activiti5ProcessInstanceWrapper) processInstance).getRawObject();
-    return ((ExecutionEntity) activiti5ProcessInstance).getVariableValues();
+    return ((ExecutionEntity) activiti5ProcessInstance).getVariables();
   }

   public Object getScriptingEngineValue(String payloadExpressionValue, String languageValue, DelegateExecution execution) {
diff --git a/modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/el/NoExecutionVariableScope.java b/modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/el/NoExecutionVariableScope.java
index 05232c310a2..beaf250b3df 100644
--- a/modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/el/NoExecutionVariableScope.java
+++ b/modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/el/NoExecutionVariableScope.java
@@ -47,12 +47,6 @@ public Map<String, Object> getVariables() {
     return Collections.EMPTY_MAP;
   }

-  @SuppressWarnings("unchecked")
-  @Override
-  public Map<String, Object> getVariableValues() {
-    return Collections.EMPTY_MAP;
-  }
-
   @SuppressWarnings("unchecked")
   public Map<String, Object> getVariablesLocal() {
     return Collections.EMPTY_MAP;
@@ -242,4 +236,52 @@ public void removeVariables(Collection<String> variableNames) {
   public void removeVariablesLocal(Collection<String> variableNames) {
     throw new UnsupportedOperationException("No execution active, no variables can be removed");
   }
+
+  public void setTransientVariablesLocal(Map<String, Object> transientVariables) {
+    throw new UnsupportedOperationException("No execution active, no variables can be set");
+  }
+
+  public void setTransientVariableLocal(String variableName, Object variableValue) {
+    throw new UnsupportedOperationException("No execution active, no variables can be set");
+  }
+
+  public void setTransientVariables(Map<String, Object> transientVariables) {
+    throw new UnsupportedOperationException("No execution active, no variables can be set");
+  }
+
+  public void setTransientVariable(String variableName, Object variableValue) {
+    throw new UnsupportedOperationException("No execution active, no variables can be set");
+  }
+
+  public Object getTransientVariableLocal(String variableName) {
+    return null;
+  }
+
+  public Map<String, Object> getTransientVariablesLocal() {
+    return null;
+  }
+
+  public Object getTransientVariable(String variableName) {
+    return null;
+  }
+
+  public Map<String, Object> getTransientVariables() {
+    return null;
+  }
+
+  public void removeTransientVariableLocal(String variableName) {
+    throw new UnsupportedOperationException("No execution active, no variables can be removed");
+  }
+
+  public void removeTransientVariablesLocal() {
+    throw new UnsupportedOperationException("No execution active, no variables can be removed");
+  }
+
+  public void removeTransientVariable(String variableName) {
+    throw new UnsupportedOperationException("No execution active, no variables can be removed");
+  }
+
+  public void removeTransientVariables() {
+    throw new UnsupportedOperationException("No execution active, no variables can be removed");
+  }
 }
diff --git a/modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/persistence/entity/VariableScopeImpl.java b/modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/persistence/entity/VariableScopeImpl.java
index d1903c99183..0a629674d49 100644
--- a/modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/persistence/entity/VariableScopeImpl.java
+++ b/modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/persistence/entity/VariableScopeImpl.java
@@ -503,21 +503,6 @@ public Map<String, VariableInstanceEntity> getVariableInstanceEntities() {
     return Collections.unmodifiableMap(variableInstances);
   }

-  public Map<String, Object> getVariableValues() {
-    Map<String, Object> variableMap = new HashMap<String, Object>();
-    if (variableInstances != null) {
-      for (String varName : variableInstances.keySet()) {
-        VariableInstanceEntity variableEntity = variableInstances.get(varName);
-        if (variableEntity != null) {
-          variableMap.put(varName, variableEntity.getValue());
-        } else {
-          variableMap.put(varName, null);
-        }
-      }
-    }
-    return variableMap;
-  }
-
   public Map<String, VariableInstanceEntity> getUsedVariablesCache() {
     return usedVariablesCache;
   }
@@ -862,6 +847,57 @@ protected VariableInstanceEntity createVariableInstance(String variableName, Obj
   protected boolean isActivityIdUsedForDetails() {
     return true;
   }
+
+  // No support for transient variables in v5
+
+  public void setTransientVariablesLocal(Map<String, Object> transientVariables) {
+    throw new UnsupportedOperationException();
+  }
+
+  public void setTransientVariableLocal(String variableName, Object variableValue) {
+    throw new UnsupportedOperationException();
+  }
+
+  public void setTransientVariables(Map<String, Object> transientVariables) {
+    throw new UnsupportedOperationException();
+  }
+
+  public void setTransientVariable(String variableName, Object variableValue) {
+    throw new UnsupportedOperationException();
+  }
+
+  public Object getTransientVariableLocal(String variableName) {
+    throw new UnsupportedOperationException();
+  }
+
+  public Map<String, Object> getTransientVariablesLocal() {
+    throw new UnsupportedOperationException();
+  }
+
+  public Object getTransientVariable(String variableName) {
+    throw new UnsupportedOperationException();
+  }
+
+  public Map<String, Object> getTransientVariables() {
+    throw new UnsupportedOperationException();
+  }
+
+  public void removeTransientVariableLocal(String variableName) {
+    throw new UnsupportedOperationException();
+  }
+
+  public void removeTransientVariablesLocal() {
+    throw new UnsupportedOperationException();
+  }
+
+  public void removeTransientVariable(String variableName) {
+    throw new UnsupportedOperationException();
+  }
+
+  public void removeTransientVariables() {
+    throw new UnsupportedOperationException();
+  }
+

   // getters and setters //////////////////////////////////////////////////////

diff --git a/modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/pvm/runtime/ExecutionImpl.java b/modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/pvm/runtime/ExecutionImpl.java
index e9994db2886..666c1d1452e 100644
--- a/modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/pvm/runtime/ExecutionImpl.java
+++ b/modules/activiti5-engine/src/main/java/org/activiti5/engine/impl/pvm/runtime/ExecutionImpl.java
@@ -676,11 +676,6 @@ public Map<String, Object> getVariables() {
     return collectedVariables;
   }

-  @Override
-  public Map<String, Object> getVariableValues() {
-    return getVariables();
-  }
-
   @Override
   public Map<String, Object> getVariables(Collection<String> variableNames) {
   	Map<String, Object> allVariables = getVariables();
@@ -1039,4 +1034,55 @@ public boolean isMultiInstanceRoot() {
   public void setMultiInstanceRoot(boolean isMultiInstanceRoot) {

   }
+
+  // No support for transient variables in v5
+
+  public void setTransientVariablesLocal(Map<String, Object> transientVariables) {
+    throw new UnsupportedOperationException();
+  }
+
+  public void setTransientVariableLocal(String variableName, Object variableValue) {
+    throw new UnsupportedOperationException();
+  }
+
+  public void setTransientVariables(Map<String, Object> transientVariables) {
+    throw new UnsupportedOperationException();
+  }
+
+  public void setTransientVariable(String variableName, Object variableValue) {
+    throw new UnsupportedOperationException();
+  }
+
+  public Object getTransientVariableLocal(String variableName) {
+    throw new UnsupportedOperationException();
+  }
+
+  public Map<String, Object> getTransientVariablesLocal() {
+    throw new UnsupportedOperationException();
+  }
+
+  public Object getTransientVariable(String variableName) {
+    throw new UnsupportedOperationException();
+  }
+
+  public Map<String, Object> getTransientVariables() {
+    throw new UnsupportedOperationException();
+  }
+
+  public void removeTransientVariableLocal(String variableName) {
+    throw new UnsupportedOperationException();
+  }
+
+  public void removeTransientVariablesLocal() {
+    throw new UnsupportedOperationException();
+  }
+
+  public void removeTransientVariable(String variableName) {
+    throw new UnsupportedOperationException();
+  }
+
+  public void removeTransientVariables() {
+    throw new UnsupportedOperationException();
+  }
+
 }
diff --git a/modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/runtime/RuntimeServiceTest.java b/modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/runtime/RuntimeServiceTest.java
index acefc29b60c..3fe162961ce 100644
--- a/modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/runtime/RuntimeServiceTest.java
+++ b/modules/activiti5-test/src/test/java/org/activiti5/engine/test/api/runtime/RuntimeServiceTest.java
@@ -159,8 +159,8 @@ public void testStartProcessInstanceByProcessInstanceBuilder() {
     processInstanceBuilder = runtimeService.createProcessInstanceBuilder();

     // by key, with processInstance name with variables
-    processInstance = processInstanceBuilder.processDefinitionKey("oneTaskProcess").businessKey("456").addVariable("var", "value")
-        .processInstanceName("processName1").start();
+    processInstance = processInstanceBuilder.processDefinitionKey("oneTaskProcess").businessKey("456").variable("var", "value")
+        .name("processName1").start();
     assertNotNull(processInstance);
     assertEquals(2, runtimeService.createProcessInstanceQuery().processDefinitionKey("oneTaskProcess").count());
     assertEquals("processName1", processInstance.getName());
@@ -178,7 +178,7 @@ public void testStartProcessInstanceByProcessInstanceBuilder() {
     processInstanceBuilder = runtimeService.createProcessInstanceBuilder();
     // by id with variables
     processInstance = processInstanceBuilder.processDefinitionId(processDefinition.getId()).businessKey("101123")
-        .addVariable("var", "value2").start();
+        .variable("var", "value2").start();
     assertNotNull(processInstance);
     assertEquals(4, runtimeService.createProcessInstanceQuery().processDefinitionKey("oneTaskProcess").count());
     assertEquals("value2", runtimeService.getVariable(processInstance.getId(), "var"));
@@ -187,7 +187,7 @@ public void testStartProcessInstanceByProcessInstanceBuilder() {
     processInstanceBuilder = runtimeService.createProcessInstanceBuilder();
     // by id and processInstance name
     processInstance = processInstanceBuilder.processDefinitionId(processDefinition.getId()).businessKey("101124")
-        .processInstanceName("processName2").start();
+        .name("processName2").start();
     assertNotNull(processInstance);
     assertEquals(5, runtimeService.createProcessInstanceQuery().processDefinitionKey("oneTaskProcess").count());
     assertEquals("processName2", processInstance.getName());
diff --git a/modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/StartToEndTest.java b/modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/StartToEndTest.java
index 6d3b0e07678..564d482ca3e 100644
--- a/modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/StartToEndTest.java
+++ b/modules/activiti5-test/src/test/java/org/activiti5/engine/test/bpmn/StartToEndTest.java
@@ -42,7 +42,7 @@ public void testStartProcessInstanceWithVariables() {
     varMap.put("test", "hello");
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("startToEnd", varMap);
     assertProcessEnded(processInstance.getId());
-    Map<String, Object> returnVarMap = ((ExecutionEntity) ((Activiti5ProcessInstanceWrapper) processInstance).getRawObject()).getVariableValues();
+    Map<String, Object> returnVarMap = ((ExecutionEntity) ((Activiti5ProcessInstanceWrapper) processInstance).getRawObject()).getVariables();
     assertEquals("hello", returnVarMap.get("test"));
   }

@@ -52,7 +52,7 @@ public void testStartProcessInstanceWithServiceTask() {
     varMap.put("test", "hello");
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("startToEnd", varMap);
     assertProcessEnded(processInstance.getId());
-    Map<String, Object> returnVarMap = ((ExecutionEntity) ((Activiti5ProcessInstanceWrapper) processInstance).getRawObject()).getVariableValues();
+    Map<String, Object> returnVarMap = ((ExecutionEntity) ((Activiti5ProcessInstanceWrapper) processInstance).getRawObject()).getVariables();
     assertEquals("hello", returnVarMap.get("test"));
     assertEquals("string", returnVarMap.get("string"));
     assertEquals(true, returnVarMap.get("boolean"));
@@ -66,7 +66,7 @@ public void testStartProcessInstanceWithSerializbleVariables() {
     varMap.put("test", "hello");
     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("startToEnd", varMap);
     assertProcessEnded(processInstance.getId());
-    Map<String, Object> returnVarMap = ((ExecutionEntity) ((Activiti5ProcessInstanceWrapper) processInstance).getRawObject()).getVariableValues();
+    Map<String, Object> returnVarMap = ((ExecutionEntity) ((Activiti5ProcessInstanceWrapper) processInstance).getRawObject()).getVariables();
     assertEquals("hello", returnVarMap.get("test"));
     Person person1 = (Person) returnVarMap.get("person1");
     assertEquals("1", person1.getId());
diff --git a/modules/activiti5-test/src/test/java/org/activiti5/engine/test/history/HistoricProcessInstanceTest.java b/modules/activiti5-test/src/test/java/org/activiti5/engine/test/history/HistoricProcessInstanceTest.java
index 8b0322a102d..9153674ee6d 100644
--- a/modules/activiti5-test/src/test/java/org/activiti5/engine/test/history/HistoricProcessInstanceTest.java
+++ b/modules/activiti5-test/src/test/java/org/activiti5/engine/test/history/HistoricProcessInstanceTest.java
@@ -461,7 +461,7 @@ public void testHistoricProcessInstanceName() {
 	  String piName = "Customized Process Instance Name";
 	  ProcessInstanceBuilder builder = runtimeService.createProcessInstanceBuilder();
 	  builder.processDefinitionKey("oneTaskProcess");
-	  builder.processInstanceName(piName);
+	  builder.name(piName);
 	  ProcessInstance processInstance1 = builder.start();

 	  HistoricProcessInstance historicProcessInstance = historyService.createHistoricProcessInstanceQuery().processInstanceId(processInstance1.getProcessInstanceId()).singleResult();
diff --git a/userguide/src/en/ch04-API.adoc b/userguide/src/en/ch04-API.adoc
index 7357194f12f..980929cbad5 100644
--- a/userguide/src/en/ch04-API.adoc
+++ b/userguide/src/en/ch04-API.adoc
@@ -412,6 +412,90 @@ When using _true_ for the parameter _fetchAllVariables_, the behaviour will be e

 However, when using _false_ as value, a specific query will be used and no other variables will be fetched nor cached. Only the value of the variable in question here will be cached for subsequent use.

+[[apiTransientVariables]]
+
+=== Transient variables
+
+Transient variables are variables that behave like regular variables, but are not persisted. Typically, transient variables are used for advanced use cases (i.e. when in doubt, use a regular process variable).
+
+The following applies for transient variables:
+
+* There is no history stored at all for transient variables.
+* Like _regular_ variables, transient variables are put on the _highest parent_ when set. This means that when setting a variable on an execution, the transient variable is actually stored on the process instance execution. Like regular variables, a _local_ variant of the method exists if the variable should be set on the specific execution or task.
+* A transient variable can only be accessed until the next 'wait state' in the process definition. After that, they are gone. The wait state means here the point in the process instance where it is persisted to the data store. Note that an _async_ activity also is a 'wait state' in this definition!
+* Transient variables can only be set by the _setTransientVariable(name, value)_, but transient variables are also returned when calling _getVariable(name)_ (a _getTransientVariable(name)_ also exists, that only checks the transient variables). The reason for this is to make the writing of expressions easy and existing logic using variables works for both types.
+* A transient variable _shadows_ a persistent variable with the same name. This means that when both a persistent and transient variable is set on a process instance and the _getVariable("someVariable")_ is used, the transient variable value will be returned.
+
+Transient variables can be got and/or set in most places where regular variables are exposed:
+
+* On _DelegateExecution_ in _JavaDelegate_ implementations
+* On _DelegateExecution_ in _ExecutionListener_ implementations and on _DelegateTask_ on _TaskListener_ implementations
+* In script task via the _execution_ object
+* When starting a process instance via the runtime service
+* When completing a task
+* When calling the _runtimeService.trigger_ method
+
+The methods follow the naming convention of the regular process variables:
+
+[source,java,linenums]
+----
+void setTransientVariable(String variableName, Object variableValue);
+void setTransientVariableLocal(String variableName, Object variableValue);
+void setTransientVariables(Map<String, Object> transientVariables);
+void setTransientVariablesLocal(Map<String, Object> transientVariables);
+
+Object getTransientVariable(String variableName);
+Object getTransientVariableLocal(String variableName);
+
+Map<String, Object> getTransientVariables();
+Map<String, Object> getTransientVariablesLocal();
+
+void removeTransientVariable(String variableName);
+void removeTransientVariableLocal(String variableName);
+----
+
+Following BPMN diagram shows a typical example:
+
+image::images/api.transient.variable.example.png[align="center"]
+
+Let's assume the 'Fetch Data' service task calls some remote service (for example using REST). Let's also assume some config parameters are needed and need to be provided when starting the process instance. Also, these config parameters are not important for historical audit purposes, so we pass them as transient variables:
+
+[source,java,linenums]
+----
+ProcessInstance processInstance = runtimeService.createProcessInstanceBuilder()
+       .processDefinitionKey("someKey")
+       .transientVariable("configParam01", "A")
+       .transientVariable("configParam02", "B")
+       .transientVariable("configParam03", "C")
+       .start();
+----
+
+Note that the variables will be available until the user task is reached and persisted to the database. For example, in the 'Additional Work' user task they are not available anymore. Also note that if 'Fetch Data' would have been asynchronous, they won't be available after that step too.
+
+The 'Fetch Data' (simplified) could be something like
+
+[source,java,linenums]
+----
+public static class FetchDataServiceTask implements JavaDelegate {
+  public void execute(DelegateExecution execution) {
+    String configParam01 = (String) execution.getVariable(configParam01);
+    // ...
+
+    RestReponse restResponse = executeRestCall();
+    execution.setTransientVariable("response", restResponse.getBody());
+    execution.setTransientVariable("status", restResponse.getStatus());
+  }
+}
+----
+
+The 'Process Data' would get the response transient variable, parse it and store the relevant data in real process variables as we need them later.
+
+The condition on the sequence flow leaving the exclusive gateway are oblivious to whether persistent or transient variables are used (in this case the _status_ transient variable):
+
+[source,xml,linenums]
+----
+<conditionExpression xsi:type="tFormalExpression">${status == 200}</conditionExpression>
+----

 [[apiExpressions]]

diff --git a/userguide/src/en/ch12-REST.adoc b/userguide/src/en/ch12-REST.adoc
index 710b0314fe8..93d78f102ed 100644
--- a/userguide/src/en/ch12-REST.adoc
+++ b/userguide/src/en/ch12-REST.adoc
@@ -1580,6 +1580,8 @@ POST runtime/process-instances
 }
 ----

+Note that also a _transientVariables_ property is accepted as part of this json, that follows the same structure as the _variables_ property.
+

 Only one of +processDefinitionId+, +processDefinitionKey+ or +message+ can be used in the request body. Parameters +businessKey+, +variables+ and +tenantId+ are optional. If +tenantId+ is omitted, the default tenant will be used. More information about the variable format can be found in <<restVariables,the REST variables section>>. Note that the variable-scope that is supplied is ignored, process-variables are always +local+.

@@ -2331,6 +2333,21 @@ PUT runtime/executions/{executionId}
 }
 ----

+Both a _variables_ and _transientVariables_ property is accepted with following structure:
+
+[source,json,linenums]
+----
+{
+  "action":"signal",
+  "variables" : [
+    {
+      "name": "myVar",
+      "value": "someValue"
+    }
+  ]
+}
+----
+

 *Request body (signal event received for execution):*

@@ -3239,6 +3256,8 @@ POST runtime/tasks/{taskId}

 Completes the task. Optional variable array can be passed in using the +variables+ property. More information about the variable format can be found in <<restVariables,the REST variables section>>. Note that the variable-scope that is supplied is ignored and the variables are set on the parent-scope unless a variable exists in a local scope, which is overridden in this case. This is the same behavior as the +TaskService.completeTask(taskId, variables)+ invocation.

+Note that also a _transientVariables_ property is accepted as part of this json, that follows the same structure as the _variables_ property.
+
 *Claim a task - Body JSON:*

 [source,json,linenums]
@@ -7203,7 +7222,3 @@ DELETE identity/groups/{groupId}/members/{userId}
     "url":"http://localhost:8182/identity/groups/sales/members/kermit"
 }
 ----
-
-
-
-
diff --git a/userguide/src/en/ch16-tooling.adoc b/userguide/src/en/ch16-tooling.adoc
index 8d812ceae8b..7916d039926 100644
--- a/userguide/src/en/ch16-tooling.adoc
+++ b/userguide/src/en/ch16-tooling.adoc
@@ -187,63 +187,4 @@ If you are using the project to articulate a bug or a feature, test case should
 after the desired bug is fixed or the desired feature is implemented.
 Please make sure to clean the project by typing *mvn clean* before sending it.

-[[docker]]
-
-=== Docker images
-[[dockerIntroduction]]
-
-==== Introduction
-
-https://www.docker.com/[Docker] is a fantastic virtualization tool. It allows you package an application with all of its dependencies into a
-standardized unit for software development. People can build pretested images and put them in a shared hub. Other people can pull
-the images and easily bring up and run the software.
-
-Purpose of Activiti docker image is running the activiti explorer and the rest-api rapidly without dealing with gory details of setting up development environment.
-It is specially beneficiary for the people who want to run, test and evaluate the Activiti as fast as possible.
-It may also be valuable for demonstrations and presentations.
-
-[[dockerSingleImage]]
-==== Usage
-The first step is to install docker if it is not already done. https://docs.docker.com/engine/installation/[Installation] is very easy and straight forward. Binary installation media is available for nearly every major OS.
-After installation of Docker, the activiti image and its dependencies should be pulled into the local machine: This command will do the job:
-
-[source]
-docker pull activiti/activiti-single-image:latest explorer
-
-
-It may take some time depending on the Internet connection speed for the images to be downloaded.
-Pulling is required only the first time or when there is a new version of the image available on the hub.
-The next step is to run the image and create the container:
-
-[source]
-docker run -p 8080:8080  -t -i activiti/activiti-single-image:latest explorer
-
-That is it, the image is up, and explorer web application is running. You can access it in your browser using this URL:
-
-[source]
-localhost:8080/activiti-explorer
-
-The port number on the local machine can be changed by modifying the second part of the 8080:8080 argument.
-
-The last parameter, determines the application to run. There are two options possible:
-
-* explorer
-* rest
-
-Selecting "rest" causes the rest-api to run. For example this Url will get back list of deployments:
-[source]
-http://kermit:kermit@localhost:8080/activiti-rest/service/repository/deployments
-
-If no parameter is provided, the default would be "explorer".
-
-
-[[dockerBuild]]
-==== Build docker image
-Docker is built using a Dockerfile located in tooling/dockerImage/singleImage directory. A utility batch file, named "buildImage.sh" contains the command line for building the image.
-If the built image is going to be used by others, it should be pushed into the docker hub using a command like:
-[source]
-docker push activiti/activiti-single-image:latest
-
-
-
 [[jmxQuickStart]]
diff --git a/userguide/src/en/images/api.transient.variable.example.png b/userguide/src/en/images/api.transient.variable.example.png
new file mode 100644
index 00000000000..d9034292640
Binary files /dev/null and b/userguide/src/en/images/api.transient.variable.example.png differ
