PR,commented_file,point_id,point,code
1,OwnerController.java,8,catch 语句块不能为空,catch (Exception e) {
1,OwnerController.java,3,不要使用 System.out.println 去打印,"System.out.println(""Initializing new owner form."");"
1,OwnerController.java,2,未使用的临时变量,"String unusedVar = ""This variable is not used"";"
2,OwnerController.java,3,不要使用 System.out.println 去打印,"System.out.println(""This is always true"");"
2,OwnerController.java,9,不必要的永真/永假判断,if (true)
2,OwnerController.java,3,不要使用 System.out.println 去打印,"System.out.println(""test"");"
2,OwnerController.java,22,禁止在 equals()中使用 NULL 做比较,"if (""test"".equals(null))"
2,OwnerController.java,15,对对象不必要的 NULL 检查,"if (""test"".equals(null))"
2,OwnerController.java,2,未使用的临时变量,int unusedVar = 10;
3,PetValidator.java,18,空的 static 初始化,static { }
3,PetValidator.java,28,非线程安全的 SimpleDateFormat 使用，必须在函数或代码块级别使用synchronized,"private static final SimpleDateFormat dateFormat = new SimpleDateFormat(""yyyy-MM-dd"");"
3,PetValidator.java,19,日历类用法不当风险,"private static final Calendar calendar = new GregorianCalendar(2020, Calendar.JANUARY, 1);"
4,Owner.java,6,循环体不能为空,while (true) {
4,Owner.java,9,不必要的永真/永假判断,while (true) {
4,Owner.java,8,catch 语句块不能为空,catch (Exception e) {
4,Owner.java,14,try 语句块不能为空,try {
4,Owner.java,17,避免 finally 块中出现 return,finally {
5,Pet.java,15,对对象不必要的 NULL 检查,if (this.type != null && this.type.getName() != null)
5,Pet.java,3,不要使用 System.out.println 去打印,"System.out.println(""Type name is not null"");"
5,Pet.java,14,try 语句块不能为空,try {
5,Pet.java,3,不要使用 System.out.println 去打印,"System.out.println(""Inside finally block"");"
5,Pet.java,13,finally 语句块不能为空,finally {
5,Pet.java,3,不要使用 System.out.println 去打印,"System.out.println(""Inside try block"");"
6,PetController.java,11,未使用 equals()函数对 String 作比较,if (existingPet != null && existingPet.getName() == petName)
6,PetController.java,28,非线程安全的 SimpleDateFormat 使用，必须在函数或代码块级别使用synchronized,"public void formatDate(Date date) {
  SimpleDateFormat sdf = new SimpleDateFormat(""yyyy-MM-dd"");
  System.out.println(""Formatted date: "" + sdf.format(date));
 }"
6,PetController.java,10,switch 中 default 必须放在最后,switch (number) {
6,PetController.java,3,不要使用 System.out.println 去打印,"System.out.println(""This is the default block, which is incorrectly placed here."");"
6,PetController.java,3,不要使用 System.out.println 去打印,"System.out.println(""Number one"");"
6,PetController.java,3,不要使用 System.out.println 去打印,"System.out.println(""Number two"");"
6,PetController.java,3,不要使用 System.out.println 去打印,"System.out.println(""Formatted date: "" + sdf.format(date));"
7,Vet.java,3,不要使用 System.out.println 去打印,"System.out.println(""This method has an unused parameter."");"
7,Vet.java,5,if 语句块不能为空,if (getSpecialties().isEmpty()) {
7,Vet.java,7,避免使用 printStackTrace()，应该使,e.printStackTrace();
7,Vet.java,6,循环体不能为空，或者检查是否有多余的分号,for (Specialty specialty : getSpecialties()) {
7,Vet.java,4,函数中未使用的形参,public void unusedParamMethod(int unusedParam) {
8,OwnerController.java,24,命名含义需优化,Owner o = new Owner();
8,OwnerController.java,24,命名含义需优化,List<Owner> a = paginated.getContent();
99,BpmnJsonConverter.java,12,禁止日志中直接使用 String 输出异常,"LOGGER.info(""Listeners node can not be read"", e);"
99,BaseBpmnJsonConverter.java,12,禁止日志中直接使用 String 输出异常,"LOGGER.info(""Form properties values node can not be read"", e);"
99,BaseBpmnJsonConverter.java,12,禁止日志中直接使用 String 输出异常,"LOGGER.info(""Form properties node can not be read"", e);"
99,BpmnJsonConverter.java,26,避免重复代码,private List<ActivitiListener> convertJsonToListeners(JsonNode listenersNode)
356,AdminBasicOperationsController.java,4,避免函数中未使用的形参,"protected void modifyFetchPersistencePackageRequest(PersistencePackageRequest ppr, Map<String, String> pathVars) {

    }"
812,VetRepository.java,27,不能有多余的分号,"@Transactional(readOnly = true)
 @Cacheable(""vets"")
 Page<Vet> findAll(Pageable pageable) throws DataAccessException;

 ;"
812,VetController.java,24,变量/方法/类 命名，要有效清晰表示对应的实际含义,"private String addPaginationModel(@PathVariable(value = ""pageNo"") int pageNo, Vets vets, Model model)"
812,OwnerController.java,24,变量/方法/类 命名，要有效清晰表示对应的实际含义,addPaginationModel
812,OwnerController.java,2,避免未使用的临时变量,"String lastName;

lastName = owner.getLastName();
if (ownersResults.isEmpty()) {
  // no owners found
  result.rejectValue(""lastName"", ""notFound"", ""not found"");
  return ""owners/findOwners"";
 }
 else if (ownersResults.getTotalElements() == 1) {
  // 1 owner found
  owner = results.iterator().next();
  owner = ownersResults.iterator().next();
  return ""redirect:/owners/"" + owner.getId();
 }
 else {
  // multiple owners found
  lastName = owner.getLastName();
  return addPaginationModel(pageNo, paginationModel, lastName, ownersResults);
 }
}"
812,VetController.java,26,代码结构冗余（首批不包括）,"addPaginationModel(@PathVariable(value = ""pageNo"") int pageNo, Vets vets, Model model) findPaginated(int pageNo)"
812,OwnerController.java,24,变量/方法/类 命名，要有效清晰表示对应的实际含义,findPaginatedForOwnersLastName
812,OwnerController.java,26,代码结构冗余（首批不包括）,"addPaginationModel(int pageNo, Model model, String lastName, Page<Owner> ownerResults) findPaginatedForOwnersLastName(int pageNo, String lastname)"
812,OwnerRepository.java,24,变量/方法/类 命名，要有效清晰表示对应的实际含义,Page<Owner> findAll(Pageable pageable);
1000,NoExecutionVariableScope.java,4,避免函数中未使用的形参,"public void setTransientVariablesLocal(Map<String, Object> transientVariables) {
    throw new UnsupportedOperationException(""No execution active, no variables can be set"");
  }
"
1000,NoExecutionVariableScope.java,26,避免重复代码,"throw new UnsupportedOperationException(""No execution active, no variables can be removed"");"
1000,TaskResource.java,26,避免重复代码,if (actionRequest.getTransientVariables() != null)
1000,TaskResource.java,11,未使用equals()函数对 String 作比较,if (var.getName() == null)
1000,ProcessInstanceCreateRequest.java,24,变量/方法/类 命名，要有效清晰表示对应的实际含义,public boolean isTenantSet()
1000,ExecutionResource.java,25,判断逻辑应简洁，不能重复或者无意义,"if (actionRequest.getTransientVariables() != null && actionRequest.getVariables() != null) {
        runtimeService.trigger(execution.getId(), getVariablesToSet(actionRequest.getVariables()), getVariablesToSet(actionRequest.getTransientVariables()));
      } else if (actionRequest.getVariables() != null) {
        runtimeService.trigger(execution.getId(), getVariablesToSet(actionRequest.getVariables()));
      } else {
        runtimeService.trigger(execution.getId());
      }"
1000,ExecutionResource.java,26,避免重复代码,"if (ExecutionActionRequest.ACTION_SIGNAL.equals(actionRequest.getAction())
        || ExecutionActionRequest.ACTION_TRIGGER.equals(actionRequest.getAction())) {
      if (actionRequest.getTransientVariables() != null && actionRequest.getVariables() != null) {
        runtimeService.trigger(execution.getId(), getVariablesToSet(actionRequest.getVariables()), getVariablesToSet(actionRequest.getTransientVariables()));
      } else if (actionRequest.getVariables() != null) {
        runtimeService.trigger(execution.getId(), getVariablesToSet(actionRequest.getVariables()));
      } else {
        runtimeService.trigger(execution.getId());
      }"
1000,ProcessInstanceBuilderImpl.java,24,变量/方法/类 命名，要有效清晰表示对应的实际含义,public ProcessInstanceBuilder name(String processInstanceName)
1000,ProcessInstanceBuilderImpl.java,24,变量/方法/类 命名，要有效清晰表示对应的实际含义,protected String messageName;
1000,VariableScopeImpl.java,24,变量/方法/类 命名，要有效清晰表示对应的实际含义,"protected Map<String, VariableInstance> transientVariabes;"
1000,TriggerCmd.java,26,避免重复代码," public TriggerCmd(String executionId, Map<String, Object> processVariables, Map<String, Object> transientVariables) {
    this(executionId, processVariables);
    this.transientVariables = transientVariables;
  }
"
1000,NoExecutionVariableScope.java,26,避免重复代码,"public void setTransientVariablesLocal(Map<String, Object> transientVariables) {
    throw new UnsupportedOperationException(""No execution active, no variables can be set"");
  }
"
1000,TaskResource.java,24,变量/方法/类 命名，要有效清晰表示对应的实际含义,for (RestVariable var : restVariables) {
1000,RuntimeServiceImpl.java,26,避免重复代码,"public void trigger(String executionId, Map<String, Object> processVariables, Map<String, Object> transientVariables)"
1000,NoExecutionVariableScope.java,24,变量/方法/类 命名，要有效清晰表示对应的实际含义,"public void setTransientVariablesLocal(Map<String, Object> transientVariables) {
    throw new UnsupportedOperationException(""No execution active, no variables can be set"");
  }
"
1000,VariableScopeImpl.java,27,不能有多余的分号,variables.putAll(transientVariabes);;
1090,SolrSearchServiceImpl.java,24,变量/方法/类 命名，要有效清晰表示对应的实际含义,StringBuilder sb = new StringBuilder();
1090,SolrSearchServiceImpl.java,26,代码结构冗余，避免重复代码,"protected String getSolrFieldTag(String tagField, String tag, SearchFacetRange range) {
        StringBuilder sb = new StringBuilder();
        if (StringUtils.isNotBlank(tag)) {
            sb.append(""{!"").append(tag).append(""="").append(tagField).append(""}"");
            sb.append(""{!"").append(tag).append(""="").append(tagField);

            if (range != null) {
                sb.append(""["").append(range.getMinValue().toPlainString()).append("":"");
                if (range.getMaxValue() != null)
                    sb.append(range.getMaxValue().toPlainString());
                else
                    sb.append(""*"");
                sb.append(""]"");

                sb.append("" ""+getSolrRangeFunctionString(range.getMinValue(), range.getMaxValue()));
            }

            sb.append(""}"");
        }
        return sb.toString();
    }"
2723,TaskRuntimeHelper.java,15,避免对象进行不必要的 NULL或者null 检查,if (authenticatedUserId != null && !authenticatedUserId.isEmpty() && userGroupManager!=null)
2723,TaskRuntimeHelper.java,25,判断逻辑应简洁，不能有重复或者无意义的判断,"if (task == null) {
                task = taskService.createTaskQuery().taskId(taskId).singleResult();
                //Check this only for tasks from processInstance
                if (task != null) {
                    Integer ok = 0;
                    if (task.getProcessInstanceId() != null) {
                      //Check maybe no candidates for task is set at all
                      List<IdentityLink> identityLinks = taskService.getIdentityLinksForTask(taskId);
                      if (identityLinks == null || identityLinks.isEmpty()) {
                           //We may set here default security policy
                           ok=1;
                      }
                    }
                    if (ok == 0) {
                        task = null;
                    }
                }
            }"
2723,TaskRuntimeHelper.java,24,命名含义需优化,Integer ok = 0;
3004,CustomModelParser.java,12,禁止日志中直接使用 String 输出异常,"throw new IllegalArgumentException(""The first group needs to end with an 'else' (or contain a single unconditional 'if' statement)."");"
3004,CustomModelParser.java,12,禁止日志中直接使用 String 输出异常,"throw new IllegalArgumentException(""The first group needs to contain a single unconditional 'if' statement (or end with an 'else')."");"
3004,CustomModelParser.java,12,禁止日志中直接使用 String 输出异常,"throw new IllegalArgumentException(""Every group must start with an if-statement"");"
3004,CustomModelParser.java,12,禁止日志中直接使用 String 输出异常,"throw new IllegalArgumentException(""condition must be empty but was "" + statement.condition());"
3004,CustomModelParser.java,12,禁止日志中直接使用 String 输出异常,"throw new IllegalArgumentException(exceptionInfo + "" invalid condition \"""" + statement.condition() + ""\"""" +"
3004,StatementDeserializer.java,12,禁止日志中直接使用 String 输出异常,"throw new IllegalArgumentException(""This block statement expects two entries but was "" + treeNode.size() + "" for "" + treeNode);"
3004,StatementDeserializer.java,26,避免重复代码代码结构冗余（首批不包括）,"if (treeNode.has(IF.getName()))
                return If(treeNode.get(IF.getName()).asText(), list);
            else if (treeNode.has(ELSEIF.getName()))
                return ElseIf(treeNode.get(ELSEIF.getName()).asText(), list);
            else if (treeNode.has(ELSE.getName())) {
                JsonNode elseNode = treeNode.get(ELSE.getName());
                if (elseNode.isNull() || elseNode.isValueNode() && elseNode.asText().isEmpty())
                    return Else(list);
                throw new IllegalArgumentException(""else cannot have expression but was "" + treeNode.get(ELSE.getName()));
            } else
                throw new IllegalArgumentException(""invalid then block: "" + treeNode.toPrettyString());"
2805,WaySegmentParser.java,24,命名含义需优化,int id = segment.get(i).id;GHPoint3D c = nodeData.getCoordinates(id);
18785,AbstractGoCodegen.java,15,对对象不必要的 NULL 检查,if (ref != null && !ref.isEmpty() && ref.endsWith(openAPIType))
16834,Employee.java,18,初始化块为空 ,"public Employee() {
    }"
16834,EmployeeMaxValueService.java,24,命名含义需优化,CriteriaBuilder cb = entityManager.getCriteriaBuilder();
35,User.java,26,避免重复代码代码结构冗余（首批不包括）,"if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final User user = (User) obj;
        if (!username.equals(user.username))
            return false;
        return true;"
1017,ERXShutdownHook.java,3,不要使用 System.out.println 去打印,"System.out.println( ""ERXShutdownHook waiting for "" + ALL_HOOKS.size() + "" hook"" + (ALL_HOOKS.size() > 1 ? ""s"" : """") + "" to complete: "" + names );"
1262,WorkersAiChatModel.java,12,禁止日志中直接使用 String 输出异常,"throw new IllegalStateException(""Response is empty"");"
1262,WorkersAiEmbeddingModel.java,12,禁止日志中直接使用 String 输出异常,"throw new RuntimeException(""Unexpected response: "" + retrofitResponse);"
1262,WorkersAiImageModel.java,26,避免重复代码代码结构冗余（首批不包括）,"if (image != null) {
                if (image.url() != null) {
                    imgReq.setImage(getPixels(image.url().toURL()));
                }
            }
            if (mask != null) {
                if (mask.url() != null) {
                    imgReq.setMask(getPixels(mask.url().toURL()));
                }
            }"
1262,WorkersAiImageModel.java,12,禁止日志中直接使用 String 输出异常,"throw new IllegalStateException(""An error occured while generating image."");"
1262,WorkersAiLanguageModel.java,12,禁止日志中直接使用 String 输出异常,"throw new RuntimeException(""Empty response"");"
1262,AbstractWorkersAIModel.java,12,禁止日志中直接使用 String 输出异常,"throw new IllegalArgumentException(""Account identifier should not be null or empty"");"
11537,ApiWrapperConsumer.java,3,不要使用 System.out.println 去打印,"System.out.println(""============================================================================"");"
11537,ReflectionPackableMethod.java,12,禁止日志中直接使用 String 输出异常,"throw new RuntimeException(""fieldNum should is 2 "");"
10001,CodeIssues.java,1,避免无效的 import ,import java.util.Map;
10001,CodeIssues.java,2,未使用的临时变量,int temp = 10;
10001,CodeIssues.java,4,函数中未使用的形参,"public void unusedParameter(int param1, int param2) {
    System.out.println(""This method has unused parameters."");
}"
10001,CodeIssues.java,5,if 语句块不能为空,"if (value > 0) {

    }"
10001,CodeIssues.java,6,"循环体不能为空,不能有多余的分号","while (true) {
        }"
10001,CodeIssues.java,7,"避免使用 printStackTrace(),应该使用日志的方式去记录","try {
        } catch (Exception e) {
            e.printStackTrace();
        }"
10001,CodeIssues.java,8,catch 语句块不能为空,"try {
        } catch (Exception e) {
        }"
10001,CodeIssues.java,9,不必要的永真/永假判断,"if (condition) {
            System.out.println(""This condition is always true."");
        }

        if (!condition) {
            System.out.println(""This condition is always false."");
        }"
10001,CodeIssues.java,10,switch 中 default 必须放在最后,"switch (value) {
            default:
                System.out.println(""Default case"");
                break;
            case 1:
                System.out.println(""Case 1"");
                break;
        }"
10001,CodeIssues.java,11,未使用 equals() 函数对 String 作比较,"public void stringComparisonWithoutEquals(String str1, String str2) {
        if (str1 == str2) {
            System.out.println(""Strings are equal."");
        }
    }"
10001,CodeIssues.java,13,finally 语句块不能为空,"try {
        } catch (Exception e) {
            System.out.println(""Exception occurred."");
        } finally {
        }"
10001,CodeIssues.java,14,try 语句块不能为空,"try {
        } catch (Exception e) {
            System.out.println(""Exception occurred."");
        } finally {
        }"
10001,CodeIssues.java,16,while 语句块不能为空,"while (true) {
        }"
10001,CodeIssues.java,17,避免 finally 块中出现 return,"try {
            return 10;
        } catch (Exception e) {
            System.out.println(""Exception occurred."");
        } finally {
            return 20;
        }"
10001,CodeIssues.java,19,日历类用法不当风险,"Calendar calendar = Calendar.getInstance();
        Date date = calendar.getTime();"
10001,CodeIssues.java,20,简单的日期格式容易出错的规则,"SimpleDateFormat sdf = new SimpleDateFormat(""yyyy/MM/dd"");"
10001,CodeIssues.java,21,"使用集合转数组的方法,必须使用集合的 toArray(T[] array),传入的是类型完全一样的数组,大小就是 list.size()",String[] stringArray = (String[]) stringList.toArray();
10001,CodeIssues.java,22,禁止在 equals() 中使用 NULL 做比较,"if (str.equals(null)) {
            System.out.println(""Strings are equal."");
        }"
10001,CodeIssues.java,23,switch 语句块不能为空,"switch (value) {

        }"
10001,CodeIssues.java,24,命名含义需优化,"int x = 10;
        int y = 20;
        int result = x + y;"
10001,CodeIssues.java,27,非线程安全的 SimpleDateFormat 使用必须在函数或代码块级别使用 synchronized,"SimpleDateFormat sdf = new SimpleDateFormat(""yyyy-MM-dd"");
        Date date = sdf.parse(""2023-06-12"");"
12891,AuthenticationFlow.java,12,禁止日志中直接使用 String 输出异常,"throw new IllegalStateException(""Not supposed to be invoked"");"
12891,AuthenticationProcessor.java,24,命名含义需优化,"String client_execution = authSession.getAuthNote(AuthenticationProcessor.CLIENT_AUTHENTICATION_EXECUTION);
        String client_flow = authSession.getAuthNote(AuthenticationProcessor.CLIENT_FLOW_ID);"
12891,IdentityProviderAuthenticator.java,24,命名含义需优化,Optional<IdentityProviderModel> idp = context.getRealm().getIdentityProvidersStream()
10905,RealmAdapter.java,25,不必要判断逻辑（首批不包括）,"if (getAttribute(RealmAttributes.CLAIMS_SUPPORTED) != null) {
            return new ArrayList<String>(Arrays.asList(getAttribute(RealmAttributes.CLAIMS_SUPPORTED).split("","")));
        } else {
            return null;
        }"
10905,MapRealmAdapter.java,26,避免重复代码代码结构冗余（首批不包括）,"if (getAttribute(CLAIMS_SUPPORTED) != null) {
            return new ArrayList<String>(Arrays.asList(getAttribute(CLAIMS_SUPPORTED).split("","")));
        } else {
            return null;
        }"
819,AnimationSampleActivity.java,26,避免重复代码代码结构冗余（首批不包括）,"if (pvGif.getTag().equals(""pic_dog"")) {
                pvGif.setImageResource(R.mipmap.pic_cat);
                pvGif.setTag(""pic_cat"");
            } else {
                pvGif.setImageResource(R.mipmap.pic_dog);
                pvGif.setTag(""pic_dog"");
            }"
800,PhotoViewAttacher.java,8,catch 语句块不能为空,"catch (ArrayIndexOutOfBoundsException e) {
                        // Can sometimes happen when getX() and getY() is called
                    }"
621,PhotoViewAttacher.java,26,避免重复代码代码结构冗余（首批不包括）,"if (e1.getPointerCount() > SINGLE_TOUCH
                            || e1.getPointerCount() > SINGLE_TOUCH) {
                        return false;
                    }"
